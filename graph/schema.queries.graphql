"""The cursor string to use for pagination."""
scalar Cursor

"""Time string, in RFC3339 format."""
scalar Time

type PageInfo {
    """Whether there is at least one more page."""
    hasNextPage: Boolean!

    """Whether there is a previous page."""
    hasPreviousPage: Boolean!

    """The cursor to the first element of the current page."""
    startCursor: Cursor

    """The cursor to the last element of the current page."""
    endCursor: Cursor
}

type AirportConnection {
    """Total number of airports."""
    totalCount: Int!

    """Page info of this connection."""
    pageInfo: PageInfo!

    """List of airport edges."""
    edges: [AirportEdge!]!
}

type AirportEdge {
    """The airport object."""
    node: Airport!

    """The cursor of this airport."""
    cursor: Cursor!
}

type MetarConnection {
    """Total number of airports."""
    totalCount: Int!

    """Page info of this connection."""
    pageInfo: PageInfo!

    """List of metar edges."""
    edges: [MetarEdge!]!
}

type MetarEdge {
    """The metar object."""
    node: Metar!

    """The cursor of this metar."""
    cursor: Cursor!
}

type TafConnection {
    """Total number of tafs."""
    totalCount: Int!

    """Page info of this connection."""
    pageInfo: PageInfo!

    """List of taf edges."""
    edges: [TafEdge!]!
}

type TafEdge {
    """The taf object."""
    node: Taf!

    """The cursor of this taf."""
    cursor: Cursor!
}

type WeatherStationConnection {
    """Total number of weather stations."""
    totalCount: Int!

    """Page info of this connection."""
    pageInfo: PageInfo!

    """List of weather station edges."""
    edges: [WeatherStationEdge!]!
}

type WeatherStationEdge {
    """The weather station object."""
    node: WeatherStation!

    """The cursor of this weather station."""
    cursor: Cursor!
}

type Query {
    """Search for airports by a variety of criteria."""
    getAirports(
        first: Int
        after: Cursor
        before: Cursor
        last: Int

        """Search the airport by its ICAO code if available. Otherwise, it will be a local airport code (if no conflict), or if nothing else is available, an internally-generated code starting with the ISO2 country code, followed by a dash and a four-digit number."""
        identifier: String

        """Search the airport by its ICAO code."""
        icao: String,

        """Search the airport by its IATA code."""
        iata: String,

        """Filter by airport type."""
        type: AirportType

        """Search the airport by its name, ICAO, IATA, GPS code, municipality, local code and keywords."""
        search: String,

        """Filter whether the airport provides METARs."""
        hasWeather: Boolean
    ): AirportConnection!

    """Get a single airport by it's id, identifier, icao code or iata code."""
    getAirport(id: String, identifier: String, icao: String, iata: String,): Airport

    """Search for weather stations by it's identifier."""
    getStations(
        first: Int
        after: Cursor
        before: Cursor
        last: Int

        """Search the weather station by it's identifier, this is usually the ICAO code of the airport it is located at."""
        identifier: String
    ): WeatherStationConnection!

    """Get a single weather station by it's id or identifier."""
    getStation(id: String, identifier: String): WeatherStation
}