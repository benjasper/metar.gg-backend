directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Airport {
  """The unique identifier of the record."""
  id: ID!
  """The unique identifier of the import."""
  importID: Int!
  """The last time the record was updated/created."""
  lastUpdated: Time!
  """The four-letter ICAO code of the airport."""
  icaoCode: String
  """The three-letter IATA code for the airport."""
  iataCode: String
  """This will be the ICAO code if available. Otherwise, it will be a local airport code (if no conflict), or if nothing else is available, an internally-generated code starting with the ISO2 country code, followed by a dash and a four-digit number."""
  identifier: String!
  """Type of airport."""
  type: AirportType!
  """Importance of the airport."""
  importance: Int!
  """The official airport name, including "Airport", "Airstrip", etc."""
  name: String!
  """Latitude of the airport in decimal degrees (positive is north)."""
  latitude: Float!
  """Longitude of the airport in decimal degrees (positive is east)."""
  longitude: Float!
  """The timezone of the airport."""
  timezone: String
  """Elevation of the airport, in feet."""
  elevation: Int
  """The primary municipality that the airport serves (when available). Note that this is not necessarily the municipality where the airport is physically located."""
  municipality: String
  """Whether the airport has scheduled airline service."""
  scheduledService: Boolean!
  """The code that an aviation GPS database (such as Jeppesen's or Garmin's) would normally use for the airport. This will always be the ICAO code if one exists. Note that, unlike the ident column, this is not guaranteed to be globally unique."""
  gpsCode: String
  """The local country code for the airport, if different from the gps_code and iata_code fields (used mainly for US airports)."""
  localCode: String
  """The URL of the airport's website."""
  website: String
  """The URL of the airport's Wikipedia page."""
  wikipedia: String
  """Extra keywords/phrases to assist with search. May include former names for the airport, alternate codes, names in other languages, nearby tourist destinations, etc."""
  keywords: [String!]!
  region: Region
  country: Country
  frequencies: [Frequency!]
  station: WeatherStation
}
"""Ordering options for Airport connections"""
input AirportOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Airports."""
  field: AirportOrderField!
}
"""Properties by which Airport connections can be ordered."""
enum AirportOrderField {
  ICAO_CODE
  IMPORTANCE
}
"""AirportType is enum for the field type"""
enum AirportType @goModel(model: "metar.gg/ent/airport.Type") {
  large_airport
  medium_airport
  small_airport
  closed_airport
  heliport
  seaplane_base
}
type Country {
  """The unique identifier of the record."""
  id: ID!
  """The unique identifier of the import."""
  importID: Int!
  """The last time the record was updated/created."""
  lastUpdated: Time!
  """The ISO 3166-1 alpha-2 code of the country. A handful of unofficial, non-ISO codes are also in use, such as "XK" for Kosovo."""
  code: String!
  """The name of the country."""
  name: String!
  """Where the airport is (primarily) located."""
  continent: CountryContinent!
  """The wikipedia link of the country."""
  wikipediaLink: String!
  """Keywords that can be used to search for the country."""
  keywords: [String!]!
}
"""CountryContinent is enum for the field continent"""
enum CountryContinent @goModel(model: "metar.gg/ent/country.Continent") {
  AF
  AN
  AS
  EU
  NA
  SA
  OC
}
type Forecast {
  """The unique identifier of the record."""
  id: ID!
  """The start time of the forecast period."""
  fromTime: Time!
  """The end time of the forecast period."""
  toTime: Time!
  """The change indicator."""
  changeIndicator: ForecastChangeIndicator
  """The time of the change."""
  changeTime: Time
  """The probability of the change."""
  changeProbability: Int
  """The wind direction in degrees."""
  windDirection: Int
  """The wind shear direction in degrees."""
  windShearDirection: Int
  """The weather string."""
  weather: String
  """The not decoded string."""
  notDecoded: String
  skyConditions: [SkyCondition!]
  turbulenceConditions: [TurbulenceCondition!]
  icingConditions: [IcingCondition!]
  temperatureData: [TemperatureData!]
}
"""ForecastChangeIndicator is enum for the field change_indicator"""
enum ForecastChangeIndicator @goModel(model: "metar.gg/ent/forecast.ChangeIndicator") {
  BECMG
  FM
  TEMPO
  PROB
}
type Frequency {
  """The unique identifier of the record."""
  id: ID!
  """The unique identifier of the import."""
  importID: Int!
  """The last time the record was updated/created."""
  lastUpdated: Time!
  """A code for the frequency type. Some common values are "TWR" (tower), "ATF" or "CTAF" (common traffic frequency), "GND" (ground control), "RMP" (ramp control), "ATIS" (automated weather), "RCO" (remote radio outlet), "ARR" (arrivals), "DEP" (departures), "UNICOM" (monitored ground station), and "RDO" (a flight-service station)."""
  type: String!
  """A description of the frequency."""
  description: String!
  """Radio frequency in megahertz. Note that the same frequency may appear multiple times for an airport, serving different functions"""
  frequency: Float!
  airport: Airport
}
type IcingCondition {
  """The unique identifier of the record."""
  id: ID!
  """The intensity of the icing."""
  intensity: String!
}
type Metar {
  """The unique identifier of the record."""
  id: ID!
  """The raw METAR text."""
  rawText: String!
  """The time the METAR was observed."""
  observationTime: Time!
  """The wind direction in degrees, or 0 if calm."""
  windDirection: Int!
  """The present weather string."""
  presentWeather: String
  flightCategory: MetarFlightCategory
  """Quality control corrected."""
  qualityControlCorrected: Boolean
  """Whether it's an automated station, of one of the following types A01|A01A|A02|A02A|AOA|AWOS."""
  qualityControlAutoStation: Boolean!
  """Maintenance check indicator - maintenance is needed."""
  qualityControlMaintenanceIndicatorOn: Boolean!
  """No signal."""
  qualityControlNoSignal: Boolean!
  """Whether Lightning sensor is off."""
  qualityControlLightningSensorOff: Boolean!
  """Whether Freezing rain sensor is off."""
  qualityControlFreezingRainSensorOff: Boolean!
  """Whether Present weather sensor is off."""
  qualityControlPresentWeatherSensorOff: Boolean!
  """The maximum air temperature in Celsius from the past 6 hours."""
  maxTemp6: Float
  """The minimum air temperature in Celsius from the past 6 hours."""
  minTemp6: Float
  """The maximum air temperature in Celsius from the past 24 hours."""
  maxTemp24: Float
  """The minimum air temperature in Celsius from the past 24 hours."""
  minTemp24: Float
  """The precipitation in inches from since the last observation. 0.0005 in = trace precipitation."""
  precipitation: Float
  """The precipitation in inches from the past 3 hours. 0.0005 in = trace precipitation."""
  precipitation3: Float
  """The precipitation in inches from the past 6 hours. 0.0005 in = trace precipitation."""
  precipitation6: Float
  """The precipitation in inches from the past 24 hours. 0.0005 in = trace precipitation."""
  precipitation24: Float
  """The type of METAR."""
  metarType: MetarMetarType!
  station: WeatherStation!
  skyConditions: [SkyCondition!]
}
"""MetarFlightCategory is enum for the field flight_category"""
enum MetarFlightCategory @goModel(model: "metar.gg/ent/metar.FlightCategory") {
  VFR
  MVFR
  IFR
  LIFR
}
"""MetarMetarType is enum for the field metar_type"""
enum MetarMetarType @goModel(model: "metar.gg/ent/metar.MetarType") {
  METAR
  SPECI
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
type Region {
  """The unique identifier of the record."""
  id: ID!
  """The unique identifier of the import."""
  importID: Int!
  """The last time the record was updated/created."""
  lastUpdated: Time!
  """local_code prefixed with the country code to make a globally-unique identifier."""
  code: String!
  """The local code for the administrative subdivision. Whenever possible, these are official ISO 3166:2, at the highest level available, but in some cases OurAirports has to use unofficial codes. There is also a pseudo code "U-A" for each country, which means that the airport has not yet been assigned to a region (or perhaps can't be, as in the case of a deep-sea oil platform)."""
  localCode: String!
  name: String!
  """The wikipedia link of the region."""
  wikipediaLink: String!
  """Keywords that can be used to search for the region."""
  keywords: [String!]!
}
type Runway {
  """The unique identifier of the record."""
  id: ID!
  """The unique identifier of the import."""
  importID: Int!
  """The last time the record was updated/created."""
  lastUpdated: Time!
  """Length of the runway in feet."""
  length: Int!
  """Width of the runway surface in feet."""
  width: Int!
  """Code for the runway surface type. This is not yet a controlled vocabulary, but probably will be soon. Some common values include "ASP" (asphalt), "TURF" (turf), "CON" (concrete), "GRS" (grass), "GRE" (gravel), "WATER" (water), and "UNK" (unknown)."""
  surface: String
  """Whether the runway is lighted at night or not."""
  lighted: Boolean!
  """Whether the runway is currently closed or not."""
  closed: Boolean!
  """Low numbered runway identifier, like 18R."""
  lowRunwayIdentifier: String!
  """Latitude of the low numbered runway end, in decimal degrees (positive is north)."""
  lowRunwayLatitude: Float
  """Longitude of the low numbered runway end, in decimal degrees (positive is east)."""
  lowRunwayLongitude: Float
  """Elevation of the low numbered runway end, in feet."""
  lowRunwayElevation: Int
  """True (not magnetic) heading of the lower numbered runway."""
  lowRunwayHeading: Float
  """Displaced threshold length of the lower numbered runway end, in feet."""
  lowRunwayDisplacedThreshold: Int
  """High numbered runway identifier, like 01L."""
  highRunwayIdentifier: String!
  """Latitude of the high numbered runway end, in decimal degrees (positive is north)."""
  highRunwayLatitude: Float
  """Longitude of the high numbered runway end, in decimal degrees (positive is east)."""
  highRunwayLongitude: Float
  """Elevation of the high numbered runway end, in feet."""
  highRunwayElevation: Int
  """True (not magnetic) heading of the higher numbered runway."""
  highRunwayHeading: Float
  """Displaced threshold length of the higher numbered runway end, in feet."""
  highRunwayDisplacedThreshold: Int
  airport: Airport
}
type SkyCondition {
  """The unique identifier of the record."""
  id: ID!
  skyCover: SkyConditionSkyCover!
  """Cloud type. Only present in TAFs."""
  cloudType: SkyConditionCloudType
}
"""SkyConditionCloudType is enum for the field cloud_type"""
enum SkyConditionCloudType @goModel(model: "metar.gg/ent/skycondition.CloudType") {
  CB
  CU
  TCU
}
"""SkyConditionSkyCover is enum for the field sky_cover"""
enum SkyConditionSkyCover @goModel(model: "metar.gg/ent/skycondition.SkyCover") {
  SKC
  FEW
  SCT
  CLR
  NSC
  BKN
  OVC
  OVCX
  OVX
  CAVOK
}
type Taf {
  """The unique identifier of the record."""
  id: ID!
  """The raw TAF text."""
  rawText: String!
  """The time the TAF was issued."""
  issueTime: Time!
  """TAF bulletin time."""
  bulletinTime: Time!
  """The start time of the TAF validity period."""
  validFromTime: Time!
  """The end time of the TAF validity period."""
  validToTime: Time!
  """Remarks."""
  remarks: String!
  station: WeatherStation!
  skyConditions: [SkyCondition!]
  forecast: [Forecast!]
}
"""Ordering options for Taf connections"""
input TafOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Tafs."""
  field: TafOrderField!
}
"""Properties by which Taf connections can be ordered."""
enum TafOrderField {
  valid_from_time
}
type TemperatureData {
  """The unique identifier of the record."""
  id: ID!
  """The time the temperature data is valid."""
  validTime: Time!
}
type TurbulenceCondition {
  """The unique identifier of the record."""
  id: ID!
  """The intensity of the turbulence."""
  intensity: String!
}
type WeatherStation {
  """The unique identifier of the record."""
  id: ID!
  """The ICAO identifier of the station that provided the weather data or identifier of the weather station."""
  stationID: String!
  """The latitude in decimal degrees of the station."""
  latitude: Float
  """The longitude in decimal degrees of the station."""
  longitude: Float
  """The elevation in meters of the station."""
  elevation: Float
  airport: Airport
}
