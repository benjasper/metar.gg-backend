directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Airport {
  id: ID!
  lastUpdated: Time!
  """This will be the ICAO code if available. Otherwise, it will be a local airport code (if no conflict), or if nothing else is available, an internally-generated code starting with the ISO2 country code, followed by a dash and a four-digit number."""
  identifier: String!
  """Type of airport."""
  type: AirportType!
  """The official airport name, including "Airport", "Airstrip", etc."""
  name: String!
  """Latitude of the airport in decimal degrees (positive is north)."""
  latitude: Float!
  """Longitude of the airport in decimal degrees (positive is east)."""
  longitude: Float!
  """Elevation of the airport, in feet."""
  elevation: Int
  """Where the airport is (primarily) located."""
  continent: AirportContinent!
  country: String!
  region: String!
  """Whether the airport has weather reporting and a metar is available."""
  hasWeather: Boolean!
  """The primary municipality that the airport serves (when available). Note that this is not necessarily the municipality where the airport is physically located."""
  municipality: String
  """Whether the airport has scheduled airline service."""
  scheduledService: Boolean!
  """The code that an aviation GPS database (such as Jeppesen's or Garmin's) would normally use for the airport. This will always be the ICAO code if one exists. Note that, unlike the ident column, this is not guaranteed to be globally unique."""
  gpsCode: String
  """The three-letter IATA code for the airport."""
  iataCode: String
  """The local country code for the airport, if different from the gps_code and iata_code fields (used mainly for US airports)."""
  localCode: String
  """The URL of the airport's website."""
  website: String
  """The URL of the airport's Wikipedia page."""
  wikipedia: String
  """Extra keywords/phrases to assist with search. May include former names for the airport, alternate codes, names in other languages, nearby tourist destinations, etc."""
  keywords: [String!]!
  frequencies: [Frequency!]
}
"""AirportContinent is enum for the field continent"""
enum AirportContinent @goModel(model: "metar.gg/ent/airport.Continent") {
  AF
  AN
  AS
  EU
  NA
  SA
  OC
}
"""AirportType is enum for the field type"""
enum AirportType @goModel(model: "metar.gg/ent/airport.Type") {
  large_airport
  medium_airport
  small_airport
  closed_airport
  heliport
  seaplane_base
}
type Frequency {
  id: ID!
  lastUpdated: Time!
  """A code for the frequency type. Some common values are "TWR" (tower), "ATF" or "CTAF" (common traffic frequency), "GND" (ground control), "RMP" (ramp control), "ATIS" (automated weather), "RCO" (remote radio outlet), "ARR" (arrivals), "DEP" (departures), "UNICOM" (monitored ground station), and "RDO" (a flight-service station)."""
  type: String!
  """A description of the frequency."""
  description: String!
  """Radio frequency in megahertz. Note that the same frequency may appear multiple times for an airport, serving different functions"""
  frequency: Float!
  airport: Airport
}
type Metar {
  """The ICAO identifier of the station that provided the METAR or identifier of the weather station."""
  stationID: String!
  """The raw METAR text."""
  rawText: String!
  """The time the METAR was observed."""
  observationTime: Time!
  """The latitude in decimal degrees of the station."""
  latitude: Float
  """The longitude in decimal degrees of the station."""
  longitude: Float
  """The elevation in meters of the station."""
  elevation: Float
  """The temperature in Celsius."""
  temperature: Float!
  """The dewpoint in Celsius."""
  dewpoint: Float!
  """The wind speed in knots, or 0 if calm."""
  windSpeed: Int!
  """The wind gust in knots."""
  windGust: Int!
  """The wind direction in degrees, or 0 if calm."""
  windDirection: Int!
  """The visibility in statute miles."""
  visibility: Float!
  """The altimeter setting in inches of mercury."""
  altimeter: Float!
  """The present weather string."""
  presentWeather: String
  flightCategory: MetarFlightCategory
  """Quality control corrected."""
  qualityControlCorrected: Boolean
  """Whether it's an automated station, of one of the following types A01|A01A|A02|A02A|AOA|AWOS."""
  qualityControlAutoStation: Boolean!
  """Maintenance check indicator - maintenance is needed."""
  qualityControlMaintenanceIndicatorOn: Boolean!
  """No signal."""
  qualityControlNoSignal: Boolean!
  """Whether Lightning sensor is off."""
  qualityControlLightningSensorOff: Boolean!
  """Whether Freezing rain sensor is off."""
  qualityControlFreezingRainSensorOff: Boolean!
  """Whether Present weather sensor is off."""
  qualityControlPresentWeatherSensorOff: Boolean!
  """The sea level pressure in hectopascal.s"""
  seaLevelPressure: Float
  """The pressur_6e tendency in hectopascals."""
  pressureTendency: Float
  """The maximum air temperature in Celsius from the past 6 hours."""
  maxTemp6: Float
  """The minimum air temperature in Celsius from the past 6 hours."""
  minTemp6: Float
  """The maximum air temperature in Celsius from the past 24 hours."""
  maxTemp24: Float
  """The minimum air temperature in Celsius from the past 24 hours."""
  minTemp24: Float
  """The precipitation in inches from since the last observation. 0.0005 in = trace precipitation"""
  precipitation: Float
  """The precipitation in inches from the past 3 hours. 0.0005 in = trace precipitation"""
  precipitation3: Float
  """The precipitation in inches from the past 6 hours. 0.0005 in = trace precipitation"""
  precipitation6: Float
  """The precipitation in inches from the past 24 hours. 0.0005 in = trace precipitation"""
  precipitation24: Float
  """The snow depth in inches."""
  snowDepth: Float
  """The vertical visibility in feet."""
  vertVis: Float
  metarType: MetarMetarType!
  airport: Airport
  skyConditions: [SkyCondition!]
}
"""MetarFlightCategory is enum for the field flight_category"""
enum MetarFlightCategory @goModel(model: "metar.gg/ent/metar.FlightCategory") {
  VFR
  MVFR
  IFR
  LIFR
}
"""MetarMetarType is enum for the field metar_type"""
enum MetarMetarType @goModel(model: "metar.gg/ent/metar.MetarType") {
  METAR
  SPECI
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
type Runway {
  id: ID!
  lastUpdated: Time!
  """Length of the runway in feet."""
  length: Int!
  """Width of the runway surface in feet."""
  width: Int!
  """Code for the runway surface type. This is not yet a controlled vocabulary, but probably will be soon. Some common values include "ASP" (asphalt), "TURF" (turf), "CON" (concrete), "GRS" (grass), "GRE" (gravel), "WATER" (water), and "UNK" (unknown)."""
  surface: String
  """Whether the runway is lighted at night or not."""
  lighted: Boolean!
  """Whether the runway is currently closed or not."""
  closed: Boolean!
  """Low numbered runway identifier, like 18R."""
  lowRunwayIdentifier: String!
  """Latitude of the low numbered runway end, in decimal degrees (positive is north)."""
  lowRunwayLatitude: Float
  """Longitude of the low numbered runway end, in decimal degrees (positive is east)."""
  lowRunwayLongitude: Float
  """Elevation of the low numbered runway end, in feet."""
  lowRunwayElevation: Int
  """True (not magnetic) heading of the lower numbered runway."""
  lowRunwayHeading: Float
  """Displaced threshold length of the lower numbered runway end, in feet."""
  lowRunwayDisplacedThreshold: Int
  """High numbered runway identifier, like 01L."""
  highRunwayIdentifier: String!
  """Latitude of the high numbered runway end, in decimal degrees (positive is north)."""
  highRunwayLatitude: Float
  """Longitude of the high numbered runway end, in decimal degrees (positive is east)."""
  highRunwayLongitude: Float
  """Elevation of the high numbered runway end, in feet."""
  highRunwayElevation: Int
  """True (not magnetic) heading of the higher numbered runway."""
  highRunwayHeading: Float
  """Displaced threshold length of the higher numbered runway end, in feet."""
  highRunwayDisplacedThreshold: Int
  airport: Airport
}
type SkyCondition {
  skyCover: SkyConditionSkyCover!
  """Cloud base in feet."""
  cloudBase: Int
  metar: Metar!
}
"""SkyConditionSkyCover is enum for the field sky_cover"""
enum SkyConditionSkyCover @goModel(model: "metar.gg/ent/skycondition.SkyCover") {
  SKC
  FEW
  SCT
  CLR
  BKN
  OVC
  OVX
  CAVOK
}
