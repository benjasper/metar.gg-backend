"""The cursor string to use for pagination"""
scalar Cursor

"""Time string, in RFC3339 format"""
scalar Time

type PageInfo {
    """Whether there is at least one more page"""
    hasNextPage: Boolean!
    """Whether there is a previous page"""
    hasPreviousPage: Boolean!
    """The cursor to the first element of the current page"""
    startCursor: Cursor
    """The cursor to the last element of the current page"""
    endCursor: Cursor
}

type AirportConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [AirportEdge!]!
}

type AirportEdge {
    node: Airport!
    cursor: Cursor!
}

type MetarConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [MetarEdge!]!
}

type MetarEdge {
    node: Metar!
    cursor: Cursor!
}

type TafConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [TafEdge!]!
}

type TafEdge {
    node: Taf!
    cursor: Cursor!
}

type WeatherStationConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [WeatherStationEdge!]!
}

type WeatherStationEdge {
    node: WeatherStation!
    cursor: Cursor!
}

type Query {
    """Search for airports by a variety of criteria."""
    getAirports(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        identifier: String
        icao: String,
        iata: String,
        hasWeather: Boolean
    ): AirportConnection!

    """Get a single airport by it's id, identifier, icao code or iata code."""
    getAirport(id: String, identifier: String, icao: String, iata: String,): Airport

    """Search for weather stations by it's identifier."""
    getStations(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        identifier: String
    ): WeatherStationConnection!

    """Get a single weather station by it's id or identifier."""
    getStation(id: String, identifier: String): WeatherStation
}

type StationWithDistance {
    """The distance in meters from the given location to the airport"""
    distance: Float!

    """The METAR for the station"""
    station: WeatherStation!
}

extend type Airport {
    """Returns all Runways for this Airport. They can be filtered with the closed parameter."""
    runways(closed: Boolean): [Runway!]! @goField(forceResolver: true)

    """Returns the closest weather stations to the airport, within the given radius (in km)."""
    stationsVicinity(first: Int = 1, radius: Float = 50.0): [StationWithDistance!]! @goField(forceResolver: true)
}

extend type WeatherStation {
    metars(after: Cursor, first: Int, before: Cursor, last: Int): MetarConnection!
    tafs(after: Cursor, first: Int, before: Cursor, last: Int): TafConnection!
}