scalar Cursor
scalar Time

type PageInfo {
    """Whether there is at least one more page"""
    hasNextPage: Boolean!
    """Whether there is a previous page"""
    hasPreviousPage: Boolean!
    """The cursor to the first element of the current page"""
    startCursor: Cursor
    """The cursor to the last element of the current page"""
    endCursor: Cursor
}

type AirportConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [AirportEdge!]!

    """A structured list of the edges without a cursor. Use this to quickly explore the API."""
    nodes: [Airport!]!
}

type AirportEdge {
    node: Airport!
    cursor: Cursor!
}

type MetarConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [MetarEdge!]!

    """A structured list of the edges without a cursor. Use this to quickly explore the API."""
    nodes: [Metar!]!
}

type MetarEdge {
    node: Metar!
    cursor: Cursor!
}

type Query {
    getAirports(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        identifier: String
        hasWeather: Boolean
    ): AirportConnection!
}

type MetarWithDistance {
    """The distance in meters from the given location to the airport"""
    distance: Float

    """The METAR for the station"""
    metar: Metar
}

extend type Airport {
    """Returns all Runways for this Airport. They can be filtered with the closed parameter."""
    runways(closed: Boolean): [Runway!]! @goField(forceResolver: true)
}

extend type Station {
    """Returns the closest METAR to the airport, within the given radius (in km). It's also the latest METAR for each station."""
    metarsVicinity(first: Int = 1, radius: Float = 50.0): [MetarWithDistance!]! @goField(forceResolver: true)
}