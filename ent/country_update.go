// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"metar.gg/ent/airport"
	"metar.gg/ent/country"
	"metar.gg/ent/predicate"
)

// CountryUpdate is the builder for updating Country entities.
type CountryUpdate struct {
	config
	hooks     []Hook
	mutation  *CountryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CountryUpdate builder.
func (cu *CountryUpdate) Where(ps ...predicate.Country) *CountryUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetImportID sets the "import_id" field.
func (cu *CountryUpdate) SetImportID(i int) *CountryUpdate {
	cu.mutation.ResetImportID()
	cu.mutation.SetImportID(i)
	return cu
}

// AddImportID adds i to the "import_id" field.
func (cu *CountryUpdate) AddImportID(i int) *CountryUpdate {
	cu.mutation.AddImportID(i)
	return cu
}

// SetHash sets the "hash" field.
func (cu *CountryUpdate) SetHash(s string) *CountryUpdate {
	cu.mutation.SetHash(s)
	return cu
}

// SetImportFlag sets the "import_flag" field.
func (cu *CountryUpdate) SetImportFlag(b bool) *CountryUpdate {
	cu.mutation.SetImportFlag(b)
	return cu
}

// SetNillableImportFlag sets the "import_flag" field if the given value is not nil.
func (cu *CountryUpdate) SetNillableImportFlag(b *bool) *CountryUpdate {
	if b != nil {
		cu.SetImportFlag(*b)
	}
	return cu
}

// SetLastUpdated sets the "last_updated" field.
func (cu *CountryUpdate) SetLastUpdated(t time.Time) *CountryUpdate {
	cu.mutation.SetLastUpdated(t)
	return cu
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (cu *CountryUpdate) SetNillableLastUpdated(t *time.Time) *CountryUpdate {
	if t != nil {
		cu.SetLastUpdated(*t)
	}
	return cu
}

// SetName sets the "name" field.
func (cu *CountryUpdate) SetName(s string) *CountryUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetContinent sets the "continent" field.
func (cu *CountryUpdate) SetContinent(c country.Continent) *CountryUpdate {
	cu.mutation.SetContinent(c)
	return cu
}

// SetWikipediaLink sets the "wikipedia_link" field.
func (cu *CountryUpdate) SetWikipediaLink(s string) *CountryUpdate {
	cu.mutation.SetWikipediaLink(s)
	return cu
}

// SetKeywords sets the "keywords" field.
func (cu *CountryUpdate) SetKeywords(s []string) *CountryUpdate {
	cu.mutation.SetKeywords(s)
	return cu
}

// AppendKeywords appends s to the "keywords" field.
func (cu *CountryUpdate) AppendKeywords(s []string) *CountryUpdate {
	cu.mutation.AppendKeywords(s)
	return cu
}

// AddAirportIDs adds the "airports" edge to the Airport entity by IDs.
func (cu *CountryUpdate) AddAirportIDs(ids ...uuid.UUID) *CountryUpdate {
	cu.mutation.AddAirportIDs(ids...)
	return cu
}

// AddAirports adds the "airports" edges to the Airport entity.
func (cu *CountryUpdate) AddAirports(a ...*Airport) *CountryUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddAirportIDs(ids...)
}

// Mutation returns the CountryMutation object of the builder.
func (cu *CountryUpdate) Mutation() *CountryMutation {
	return cu.mutation
}

// ClearAirports clears all "airports" edges to the Airport entity.
func (cu *CountryUpdate) ClearAirports() *CountryUpdate {
	cu.mutation.ClearAirports()
	return cu
}

// RemoveAirportIDs removes the "airports" edge to Airport entities by IDs.
func (cu *CountryUpdate) RemoveAirportIDs(ids ...uuid.UUID) *CountryUpdate {
	cu.mutation.RemoveAirportIDs(ids...)
	return cu
}

// RemoveAirports removes "airports" edges to Airport entities.
func (cu *CountryUpdate) RemoveAirports(a ...*Airport) *CountryUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveAirportIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CountryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CountryUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CountryUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CountryUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CountryUpdate) check() error {
	if v, ok := cu.mutation.Continent(); ok {
		if err := country.ContinentValidator(v); err != nil {
			return &ValidationError{Name: "continent", err: fmt.Errorf(`ent: validator failed for field "Country.continent": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CountryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CountryUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CountryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(country.Table, country.Columns, sqlgraph.NewFieldSpec(country.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.ImportID(); ok {
		_spec.SetField(country.FieldImportID, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedImportID(); ok {
		_spec.AddField(country.FieldImportID, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Hash(); ok {
		_spec.SetField(country.FieldHash, field.TypeString, value)
	}
	if value, ok := cu.mutation.ImportFlag(); ok {
		_spec.SetField(country.FieldImportFlag, field.TypeBool, value)
	}
	if value, ok := cu.mutation.LastUpdated(); ok {
		_spec.SetField(country.FieldLastUpdated, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(country.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Continent(); ok {
		_spec.SetField(country.FieldContinent, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.WikipediaLink(); ok {
		_spec.SetField(country.FieldWikipediaLink, field.TypeString, value)
	}
	if value, ok := cu.mutation.Keywords(); ok {
		_spec.SetField(country.FieldKeywords, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedKeywords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, country.FieldKeywords, value)
		})
	}
	if cu.mutation.AirportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.AirportsTable,
			Columns: []string{country.AirportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedAirportsIDs(); len(nodes) > 0 && !cu.mutation.AirportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.AirportsTable,
			Columns: []string{country.AirportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AirportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.AirportsTable,
			Columns: []string{country.AirportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{country.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CountryUpdateOne is the builder for updating a single Country entity.
type CountryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CountryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetImportID sets the "import_id" field.
func (cuo *CountryUpdateOne) SetImportID(i int) *CountryUpdateOne {
	cuo.mutation.ResetImportID()
	cuo.mutation.SetImportID(i)
	return cuo
}

// AddImportID adds i to the "import_id" field.
func (cuo *CountryUpdateOne) AddImportID(i int) *CountryUpdateOne {
	cuo.mutation.AddImportID(i)
	return cuo
}

// SetHash sets the "hash" field.
func (cuo *CountryUpdateOne) SetHash(s string) *CountryUpdateOne {
	cuo.mutation.SetHash(s)
	return cuo
}

// SetImportFlag sets the "import_flag" field.
func (cuo *CountryUpdateOne) SetImportFlag(b bool) *CountryUpdateOne {
	cuo.mutation.SetImportFlag(b)
	return cuo
}

// SetNillableImportFlag sets the "import_flag" field if the given value is not nil.
func (cuo *CountryUpdateOne) SetNillableImportFlag(b *bool) *CountryUpdateOne {
	if b != nil {
		cuo.SetImportFlag(*b)
	}
	return cuo
}

// SetLastUpdated sets the "last_updated" field.
func (cuo *CountryUpdateOne) SetLastUpdated(t time.Time) *CountryUpdateOne {
	cuo.mutation.SetLastUpdated(t)
	return cuo
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (cuo *CountryUpdateOne) SetNillableLastUpdated(t *time.Time) *CountryUpdateOne {
	if t != nil {
		cuo.SetLastUpdated(*t)
	}
	return cuo
}

// SetName sets the "name" field.
func (cuo *CountryUpdateOne) SetName(s string) *CountryUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetContinent sets the "continent" field.
func (cuo *CountryUpdateOne) SetContinent(c country.Continent) *CountryUpdateOne {
	cuo.mutation.SetContinent(c)
	return cuo
}

// SetWikipediaLink sets the "wikipedia_link" field.
func (cuo *CountryUpdateOne) SetWikipediaLink(s string) *CountryUpdateOne {
	cuo.mutation.SetWikipediaLink(s)
	return cuo
}

// SetKeywords sets the "keywords" field.
func (cuo *CountryUpdateOne) SetKeywords(s []string) *CountryUpdateOne {
	cuo.mutation.SetKeywords(s)
	return cuo
}

// AppendKeywords appends s to the "keywords" field.
func (cuo *CountryUpdateOne) AppendKeywords(s []string) *CountryUpdateOne {
	cuo.mutation.AppendKeywords(s)
	return cuo
}

// AddAirportIDs adds the "airports" edge to the Airport entity by IDs.
func (cuo *CountryUpdateOne) AddAirportIDs(ids ...uuid.UUID) *CountryUpdateOne {
	cuo.mutation.AddAirportIDs(ids...)
	return cuo
}

// AddAirports adds the "airports" edges to the Airport entity.
func (cuo *CountryUpdateOne) AddAirports(a ...*Airport) *CountryUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddAirportIDs(ids...)
}

// Mutation returns the CountryMutation object of the builder.
func (cuo *CountryUpdateOne) Mutation() *CountryMutation {
	return cuo.mutation
}

// ClearAirports clears all "airports" edges to the Airport entity.
func (cuo *CountryUpdateOne) ClearAirports() *CountryUpdateOne {
	cuo.mutation.ClearAirports()
	return cuo
}

// RemoveAirportIDs removes the "airports" edge to Airport entities by IDs.
func (cuo *CountryUpdateOne) RemoveAirportIDs(ids ...uuid.UUID) *CountryUpdateOne {
	cuo.mutation.RemoveAirportIDs(ids...)
	return cuo
}

// RemoveAirports removes "airports" edges to Airport entities.
func (cuo *CountryUpdateOne) RemoveAirports(a ...*Airport) *CountryUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveAirportIDs(ids...)
}

// Where appends a list predicates to the CountryUpdate builder.
func (cuo *CountryUpdateOne) Where(ps ...predicate.Country) *CountryUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CountryUpdateOne) Select(field string, fields ...string) *CountryUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Country entity.
func (cuo *CountryUpdateOne) Save(ctx context.Context) (*Country, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CountryUpdateOne) SaveX(ctx context.Context) *Country {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CountryUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CountryUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CountryUpdateOne) check() error {
	if v, ok := cuo.mutation.Continent(); ok {
		if err := country.ContinentValidator(v); err != nil {
			return &ValidationError{Name: "continent", err: fmt.Errorf(`ent: validator failed for field "Country.continent": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CountryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CountryUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CountryUpdateOne) sqlSave(ctx context.Context) (_node *Country, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(country.Table, country.Columns, sqlgraph.NewFieldSpec(country.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Country.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, country.FieldID)
		for _, f := range fields {
			if !country.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != country.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.ImportID(); ok {
		_spec.SetField(country.FieldImportID, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedImportID(); ok {
		_spec.AddField(country.FieldImportID, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Hash(); ok {
		_spec.SetField(country.FieldHash, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ImportFlag(); ok {
		_spec.SetField(country.FieldImportFlag, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.LastUpdated(); ok {
		_spec.SetField(country.FieldLastUpdated, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(country.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Continent(); ok {
		_spec.SetField(country.FieldContinent, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.WikipediaLink(); ok {
		_spec.SetField(country.FieldWikipediaLink, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Keywords(); ok {
		_spec.SetField(country.FieldKeywords, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedKeywords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, country.FieldKeywords, value)
		})
	}
	if cuo.mutation.AirportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.AirportsTable,
			Columns: []string{country.AirportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedAirportsIDs(); len(nodes) > 0 && !cuo.mutation.AirportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.AirportsTable,
			Columns: []string{country.AirportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AirportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.AirportsTable,
			Columns: []string{country.AirportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Country{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{country.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
