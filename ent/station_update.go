// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"metar.gg/ent/airport"
	"metar.gg/ent/metar"
	"metar.gg/ent/predicate"
	"metar.gg/ent/station"
	"metar.gg/ent/taf"
)

// StationUpdate is the builder for updating Station entities.
type StationUpdate struct {
	config
	hooks     []Hook
	mutation  *StationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the StationUpdate builder.
func (su *StationUpdate) Where(ps ...predicate.Station) *StationUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetLatitude sets the "latitude" field.
func (su *StationUpdate) SetLatitude(f float64) *StationUpdate {
	su.mutation.ResetLatitude()
	su.mutation.SetLatitude(f)
	return su
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (su *StationUpdate) SetNillableLatitude(f *float64) *StationUpdate {
	if f != nil {
		su.SetLatitude(*f)
	}
	return su
}

// AddLatitude adds f to the "latitude" field.
func (su *StationUpdate) AddLatitude(f float64) *StationUpdate {
	su.mutation.AddLatitude(f)
	return su
}

// ClearLatitude clears the value of the "latitude" field.
func (su *StationUpdate) ClearLatitude() *StationUpdate {
	su.mutation.ClearLatitude()
	return su
}

// SetLongitude sets the "longitude" field.
func (su *StationUpdate) SetLongitude(f float64) *StationUpdate {
	su.mutation.ResetLongitude()
	su.mutation.SetLongitude(f)
	return su
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (su *StationUpdate) SetNillableLongitude(f *float64) *StationUpdate {
	if f != nil {
		su.SetLongitude(*f)
	}
	return su
}

// AddLongitude adds f to the "longitude" field.
func (su *StationUpdate) AddLongitude(f float64) *StationUpdate {
	su.mutation.AddLongitude(f)
	return su
}

// ClearLongitude clears the value of the "longitude" field.
func (su *StationUpdate) ClearLongitude() *StationUpdate {
	su.mutation.ClearLongitude()
	return su
}

// SetElevation sets the "elevation" field.
func (su *StationUpdate) SetElevation(f float64) *StationUpdate {
	su.mutation.ResetElevation()
	su.mutation.SetElevation(f)
	return su
}

// SetNillableElevation sets the "elevation" field if the given value is not nil.
func (su *StationUpdate) SetNillableElevation(f *float64) *StationUpdate {
	if f != nil {
		su.SetElevation(*f)
	}
	return su
}

// AddElevation adds f to the "elevation" field.
func (su *StationUpdate) AddElevation(f float64) *StationUpdate {
	su.mutation.AddElevation(f)
	return su
}

// ClearElevation clears the value of the "elevation" field.
func (su *StationUpdate) ClearElevation() *StationUpdate {
	su.mutation.ClearElevation()
	return su
}

// SetHash sets the "hash" field.
func (su *StationUpdate) SetHash(s string) *StationUpdate {
	su.mutation.SetHash(s)
	return su
}

// SetAirportID sets the "airport" edge to the Airport entity by ID.
func (su *StationUpdate) SetAirportID(id int) *StationUpdate {
	su.mutation.SetAirportID(id)
	return su
}

// SetNillableAirportID sets the "airport" edge to the Airport entity by ID if the given value is not nil.
func (su *StationUpdate) SetNillableAirportID(id *int) *StationUpdate {
	if id != nil {
		su = su.SetAirportID(*id)
	}
	return su
}

// SetAirport sets the "airport" edge to the Airport entity.
func (su *StationUpdate) SetAirport(a *Airport) *StationUpdate {
	return su.SetAirportID(a.ID)
}

// AddMetarIDs adds the "metars" edge to the Metar entity by IDs.
func (su *StationUpdate) AddMetarIDs(ids ...int) *StationUpdate {
	su.mutation.AddMetarIDs(ids...)
	return su
}

// AddMetars adds the "metars" edges to the Metar entity.
func (su *StationUpdate) AddMetars(m ...*Metar) *StationUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return su.AddMetarIDs(ids...)
}

// AddTafIDs adds the "tafs" edge to the Taf entity by IDs.
func (su *StationUpdate) AddTafIDs(ids ...int) *StationUpdate {
	su.mutation.AddTafIDs(ids...)
	return su
}

// AddTafs adds the "tafs" edges to the Taf entity.
func (su *StationUpdate) AddTafs(t ...*Taf) *StationUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddTafIDs(ids...)
}

// Mutation returns the StationMutation object of the builder.
func (su *StationUpdate) Mutation() *StationMutation {
	return su.mutation
}

// ClearAirport clears the "airport" edge to the Airport entity.
func (su *StationUpdate) ClearAirport() *StationUpdate {
	su.mutation.ClearAirport()
	return su
}

// ClearMetars clears all "metars" edges to the Metar entity.
func (su *StationUpdate) ClearMetars() *StationUpdate {
	su.mutation.ClearMetars()
	return su
}

// RemoveMetarIDs removes the "metars" edge to Metar entities by IDs.
func (su *StationUpdate) RemoveMetarIDs(ids ...int) *StationUpdate {
	su.mutation.RemoveMetarIDs(ids...)
	return su
}

// RemoveMetars removes "metars" edges to Metar entities.
func (su *StationUpdate) RemoveMetars(m ...*Metar) *StationUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return su.RemoveMetarIDs(ids...)
}

// ClearTafs clears all "tafs" edges to the Taf entity.
func (su *StationUpdate) ClearTafs() *StationUpdate {
	su.mutation.ClearTafs()
	return su
}

// RemoveTafIDs removes the "tafs" edge to Taf entities by IDs.
func (su *StationUpdate) RemoveTafIDs(ids ...int) *StationUpdate {
	su.mutation.RemoveTafIDs(ids...)
	return su
}

// RemoveTafs removes "tafs" edges to Taf entities.
func (su *StationUpdate) RemoveTafs(t ...*Taf) *StationUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveTafIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StationUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StationUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StationUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *StationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StationUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *StationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   station.Table,
			Columns: station.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: station.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Latitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: station.FieldLatitude,
		})
	}
	if value, ok := su.mutation.AddedLatitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: station.FieldLatitude,
		})
	}
	if su.mutation.LatitudeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: station.FieldLatitude,
		})
	}
	if value, ok := su.mutation.Longitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: station.FieldLongitude,
		})
	}
	if value, ok := su.mutation.AddedLongitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: station.FieldLongitude,
		})
	}
	if su.mutation.LongitudeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: station.FieldLongitude,
		})
	}
	if value, ok := su.mutation.Elevation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: station.FieldElevation,
		})
	}
	if value, ok := su.mutation.AddedElevation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: station.FieldElevation,
		})
	}
	if su.mutation.ElevationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: station.FieldElevation,
		})
	}
	if value, ok := su.mutation.Hash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldHash,
		})
	}
	if su.mutation.AirportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   station.AirportTable,
			Columns: []string{station.AirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: airport.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AirportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   station.AirportTable,
			Columns: []string{station.AirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: airport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.MetarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.MetarsTable,
			Columns: []string{station.MetarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metar.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedMetarsIDs(); len(nodes) > 0 && !su.mutation.MetarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.MetarsTable,
			Columns: []string{station.MetarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metar.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.MetarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.MetarsTable,
			Columns: []string{station.MetarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metar.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.TafsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.TafsTable,
			Columns: []string{station.TafsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: taf.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedTafsIDs(); len(nodes) > 0 && !su.mutation.TafsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.TafsTable,
			Columns: []string{station.TafsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: taf.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TafsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.TafsTable,
			Columns: []string{station.TafsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: taf.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = su.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{station.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// StationUpdateOne is the builder for updating a single Station entity.
type StationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *StationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetLatitude sets the "latitude" field.
func (suo *StationUpdateOne) SetLatitude(f float64) *StationUpdateOne {
	suo.mutation.ResetLatitude()
	suo.mutation.SetLatitude(f)
	return suo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (suo *StationUpdateOne) SetNillableLatitude(f *float64) *StationUpdateOne {
	if f != nil {
		suo.SetLatitude(*f)
	}
	return suo
}

// AddLatitude adds f to the "latitude" field.
func (suo *StationUpdateOne) AddLatitude(f float64) *StationUpdateOne {
	suo.mutation.AddLatitude(f)
	return suo
}

// ClearLatitude clears the value of the "latitude" field.
func (suo *StationUpdateOne) ClearLatitude() *StationUpdateOne {
	suo.mutation.ClearLatitude()
	return suo
}

// SetLongitude sets the "longitude" field.
func (suo *StationUpdateOne) SetLongitude(f float64) *StationUpdateOne {
	suo.mutation.ResetLongitude()
	suo.mutation.SetLongitude(f)
	return suo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (suo *StationUpdateOne) SetNillableLongitude(f *float64) *StationUpdateOne {
	if f != nil {
		suo.SetLongitude(*f)
	}
	return suo
}

// AddLongitude adds f to the "longitude" field.
func (suo *StationUpdateOne) AddLongitude(f float64) *StationUpdateOne {
	suo.mutation.AddLongitude(f)
	return suo
}

// ClearLongitude clears the value of the "longitude" field.
func (suo *StationUpdateOne) ClearLongitude() *StationUpdateOne {
	suo.mutation.ClearLongitude()
	return suo
}

// SetElevation sets the "elevation" field.
func (suo *StationUpdateOne) SetElevation(f float64) *StationUpdateOne {
	suo.mutation.ResetElevation()
	suo.mutation.SetElevation(f)
	return suo
}

// SetNillableElevation sets the "elevation" field if the given value is not nil.
func (suo *StationUpdateOne) SetNillableElevation(f *float64) *StationUpdateOne {
	if f != nil {
		suo.SetElevation(*f)
	}
	return suo
}

// AddElevation adds f to the "elevation" field.
func (suo *StationUpdateOne) AddElevation(f float64) *StationUpdateOne {
	suo.mutation.AddElevation(f)
	return suo
}

// ClearElevation clears the value of the "elevation" field.
func (suo *StationUpdateOne) ClearElevation() *StationUpdateOne {
	suo.mutation.ClearElevation()
	return suo
}

// SetHash sets the "hash" field.
func (suo *StationUpdateOne) SetHash(s string) *StationUpdateOne {
	suo.mutation.SetHash(s)
	return suo
}

// SetAirportID sets the "airport" edge to the Airport entity by ID.
func (suo *StationUpdateOne) SetAirportID(id int) *StationUpdateOne {
	suo.mutation.SetAirportID(id)
	return suo
}

// SetNillableAirportID sets the "airport" edge to the Airport entity by ID if the given value is not nil.
func (suo *StationUpdateOne) SetNillableAirportID(id *int) *StationUpdateOne {
	if id != nil {
		suo = suo.SetAirportID(*id)
	}
	return suo
}

// SetAirport sets the "airport" edge to the Airport entity.
func (suo *StationUpdateOne) SetAirport(a *Airport) *StationUpdateOne {
	return suo.SetAirportID(a.ID)
}

// AddMetarIDs adds the "metars" edge to the Metar entity by IDs.
func (suo *StationUpdateOne) AddMetarIDs(ids ...int) *StationUpdateOne {
	suo.mutation.AddMetarIDs(ids...)
	return suo
}

// AddMetars adds the "metars" edges to the Metar entity.
func (suo *StationUpdateOne) AddMetars(m ...*Metar) *StationUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return suo.AddMetarIDs(ids...)
}

// AddTafIDs adds the "tafs" edge to the Taf entity by IDs.
func (suo *StationUpdateOne) AddTafIDs(ids ...int) *StationUpdateOne {
	suo.mutation.AddTafIDs(ids...)
	return suo
}

// AddTafs adds the "tafs" edges to the Taf entity.
func (suo *StationUpdateOne) AddTafs(t ...*Taf) *StationUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddTafIDs(ids...)
}

// Mutation returns the StationMutation object of the builder.
func (suo *StationUpdateOne) Mutation() *StationMutation {
	return suo.mutation
}

// ClearAirport clears the "airport" edge to the Airport entity.
func (suo *StationUpdateOne) ClearAirport() *StationUpdateOne {
	suo.mutation.ClearAirport()
	return suo
}

// ClearMetars clears all "metars" edges to the Metar entity.
func (suo *StationUpdateOne) ClearMetars() *StationUpdateOne {
	suo.mutation.ClearMetars()
	return suo
}

// RemoveMetarIDs removes the "metars" edge to Metar entities by IDs.
func (suo *StationUpdateOne) RemoveMetarIDs(ids ...int) *StationUpdateOne {
	suo.mutation.RemoveMetarIDs(ids...)
	return suo
}

// RemoveMetars removes "metars" edges to Metar entities.
func (suo *StationUpdateOne) RemoveMetars(m ...*Metar) *StationUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return suo.RemoveMetarIDs(ids...)
}

// ClearTafs clears all "tafs" edges to the Taf entity.
func (suo *StationUpdateOne) ClearTafs() *StationUpdateOne {
	suo.mutation.ClearTafs()
	return suo
}

// RemoveTafIDs removes the "tafs" edge to Taf entities by IDs.
func (suo *StationUpdateOne) RemoveTafIDs(ids ...int) *StationUpdateOne {
	suo.mutation.RemoveTafIDs(ids...)
	return suo
}

// RemoveTafs removes "tafs" edges to Taf entities.
func (suo *StationUpdateOne) RemoveTafs(t ...*Taf) *StationUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveTafIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StationUpdateOne) Select(field string, fields ...string) *StationUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Station entity.
func (suo *StationUpdateOne) Save(ctx context.Context) (*Station, error) {
	var (
		err  error
		node *Station
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, suo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Station)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from StationMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StationUpdateOne) SaveX(ctx context.Context) *Station {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StationUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StationUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *StationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StationUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *StationUpdateOne) sqlSave(ctx context.Context) (_node *Station, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   station.Table,
			Columns: station.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: station.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Station.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, station.FieldID)
		for _, f := range fields {
			if !station.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != station.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Latitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: station.FieldLatitude,
		})
	}
	if value, ok := suo.mutation.AddedLatitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: station.FieldLatitude,
		})
	}
	if suo.mutation.LatitudeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: station.FieldLatitude,
		})
	}
	if value, ok := suo.mutation.Longitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: station.FieldLongitude,
		})
	}
	if value, ok := suo.mutation.AddedLongitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: station.FieldLongitude,
		})
	}
	if suo.mutation.LongitudeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: station.FieldLongitude,
		})
	}
	if value, ok := suo.mutation.Elevation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: station.FieldElevation,
		})
	}
	if value, ok := suo.mutation.AddedElevation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: station.FieldElevation,
		})
	}
	if suo.mutation.ElevationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: station.FieldElevation,
		})
	}
	if value, ok := suo.mutation.Hash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldHash,
		})
	}
	if suo.mutation.AirportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   station.AirportTable,
			Columns: []string{station.AirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: airport.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AirportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   station.AirportTable,
			Columns: []string{station.AirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: airport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.MetarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.MetarsTable,
			Columns: []string{station.MetarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metar.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedMetarsIDs(); len(nodes) > 0 && !suo.mutation.MetarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.MetarsTable,
			Columns: []string{station.MetarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metar.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.MetarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.MetarsTable,
			Columns: []string{station.MetarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metar.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.TafsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.TafsTable,
			Columns: []string{station.TafsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: taf.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedTafsIDs(); len(nodes) > 0 && !suo.mutation.TafsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.TafsTable,
			Columns: []string{station.TafsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: taf.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TafsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.TafsTable,
			Columns: []string{station.TafsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: taf.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = suo.modifiers
	_node = &Station{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{station.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
