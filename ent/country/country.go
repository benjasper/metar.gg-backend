// Code generated by ent, DO NOT EDIT.

package country

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the country type in the database.
	Label = "country"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldImportID holds the string denoting the import_id field in the database.
	FieldImportID = "import_id"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// FieldImportFlag holds the string denoting the import_flag field in the database.
	FieldImportFlag = "import_flag"
	// FieldLastUpdated holds the string denoting the last_updated field in the database.
	FieldLastUpdated = "last_updated"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldContinent holds the string denoting the continent field in the database.
	FieldContinent = "continent"
	// FieldWikipediaLink holds the string denoting the wikipedia_link field in the database.
	FieldWikipediaLink = "wikipedia_link"
	// FieldKeywords holds the string denoting the keywords field in the database.
	FieldKeywords = "keywords"
	// EdgeAirports holds the string denoting the airports edge name in mutations.
	EdgeAirports = "airports"
	// Table holds the table name of the country in the database.
	Table = "countries"
	// AirportsTable is the table that holds the airports relation/edge.
	AirportsTable = "airports"
	// AirportsInverseTable is the table name for the Airport entity.
	// It exists in this package in order to avoid circular dependency with the "airport" package.
	AirportsInverseTable = "airports"
	// AirportsColumn is the table column denoting the airports relation/edge.
	AirportsColumn = "country_airports"
)

// Columns holds all SQL columns for country fields.
var Columns = []string{
	FieldID,
	FieldImportID,
	FieldHash,
	FieldImportFlag,
	FieldLastUpdated,
	FieldCode,
	FieldName,
	FieldContinent,
	FieldWikipediaLink,
	FieldKeywords,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultImportFlag holds the default value on creation for the "import_flag" field.
	DefaultImportFlag bool
	// DefaultLastUpdated holds the default value on creation for the "last_updated" field.
	DefaultLastUpdated func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Continent defines the type for the "continent" enum field.
type Continent string

// Continent values.
const (
	ContinentAfrica       Continent = "AF"
	ContinentAntarctica   Continent = "AN"
	ContinentAsia         Continent = "AS"
	ContinentEurope       Continent = "EU"
	ContinentNorthAmerica Continent = "NA"
	ContinentSouthAmerica Continent = "SA"
	ContinentOceania      Continent = "OC"
)

func (c Continent) String() string {
	return string(c)
}

// ContinentValidator is a validator for the "continent" field enum values. It is called by the builders before save.
func ContinentValidator(c Continent) error {
	switch c {
	case ContinentAfrica, ContinentAntarctica, ContinentAsia, ContinentEurope, ContinentNorthAmerica, ContinentSouthAmerica, ContinentOceania:
		return nil
	default:
		return fmt.Errorf("country: invalid enum value for continent field: %q", c)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Continent) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Continent) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Continent(str)
	if err := ContinentValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Continent", str)
	}
	return nil
}
