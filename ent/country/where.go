// Code generated by ent, DO NOT EDIT.

package country

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"metar.gg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Country {
	return predicate.Country(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Country {
	return predicate.Country(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Country {
	return predicate.Country(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Country {
	return predicate.Country(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Country {
	return predicate.Country(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Country {
	return predicate.Country(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Country {
	return predicate.Country(sql.FieldLTE(FieldID, id))
}

// ImportID applies equality check predicate on the "import_id" field. It's identical to ImportIDEQ.
func ImportID(v int) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldImportID, v))
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldHash, v))
}

// ImportFlag applies equality check predicate on the "import_flag" field. It's identical to ImportFlagEQ.
func ImportFlag(v bool) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldImportFlag, v))
}

// LastUpdated applies equality check predicate on the "last_updated" field. It's identical to LastUpdatedEQ.
func LastUpdated(v time.Time) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldLastUpdated, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldCode, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldName, v))
}

// WikipediaLink applies equality check predicate on the "wikipedia_link" field. It's identical to WikipediaLinkEQ.
func WikipediaLink(v string) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldWikipediaLink, v))
}

// ImportIDEQ applies the EQ predicate on the "import_id" field.
func ImportIDEQ(v int) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldImportID, v))
}

// ImportIDNEQ applies the NEQ predicate on the "import_id" field.
func ImportIDNEQ(v int) predicate.Country {
	return predicate.Country(sql.FieldNEQ(FieldImportID, v))
}

// ImportIDIn applies the In predicate on the "import_id" field.
func ImportIDIn(vs ...int) predicate.Country {
	return predicate.Country(sql.FieldIn(FieldImportID, vs...))
}

// ImportIDNotIn applies the NotIn predicate on the "import_id" field.
func ImportIDNotIn(vs ...int) predicate.Country {
	return predicate.Country(sql.FieldNotIn(FieldImportID, vs...))
}

// ImportIDGT applies the GT predicate on the "import_id" field.
func ImportIDGT(v int) predicate.Country {
	return predicate.Country(sql.FieldGT(FieldImportID, v))
}

// ImportIDGTE applies the GTE predicate on the "import_id" field.
func ImportIDGTE(v int) predicate.Country {
	return predicate.Country(sql.FieldGTE(FieldImportID, v))
}

// ImportIDLT applies the LT predicate on the "import_id" field.
func ImportIDLT(v int) predicate.Country {
	return predicate.Country(sql.FieldLT(FieldImportID, v))
}

// ImportIDLTE applies the LTE predicate on the "import_id" field.
func ImportIDLTE(v int) predicate.Country {
	return predicate.Country(sql.FieldLTE(FieldImportID, v))
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldHash, v))
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.Country {
	return predicate.Country(sql.FieldNEQ(FieldHash, v))
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.Country {
	return predicate.Country(sql.FieldIn(FieldHash, vs...))
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.Country {
	return predicate.Country(sql.FieldNotIn(FieldHash, vs...))
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.Country {
	return predicate.Country(sql.FieldGT(FieldHash, v))
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.Country {
	return predicate.Country(sql.FieldGTE(FieldHash, v))
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.Country {
	return predicate.Country(sql.FieldLT(FieldHash, v))
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.Country {
	return predicate.Country(sql.FieldLTE(FieldHash, v))
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.Country {
	return predicate.Country(sql.FieldContains(FieldHash, v))
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.Country {
	return predicate.Country(sql.FieldHasPrefix(FieldHash, v))
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.Country {
	return predicate.Country(sql.FieldHasSuffix(FieldHash, v))
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.Country {
	return predicate.Country(sql.FieldEqualFold(FieldHash, v))
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.Country {
	return predicate.Country(sql.FieldContainsFold(FieldHash, v))
}

// ImportFlagEQ applies the EQ predicate on the "import_flag" field.
func ImportFlagEQ(v bool) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldImportFlag, v))
}

// ImportFlagNEQ applies the NEQ predicate on the "import_flag" field.
func ImportFlagNEQ(v bool) predicate.Country {
	return predicate.Country(sql.FieldNEQ(FieldImportFlag, v))
}

// LastUpdatedEQ applies the EQ predicate on the "last_updated" field.
func LastUpdatedEQ(v time.Time) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldLastUpdated, v))
}

// LastUpdatedNEQ applies the NEQ predicate on the "last_updated" field.
func LastUpdatedNEQ(v time.Time) predicate.Country {
	return predicate.Country(sql.FieldNEQ(FieldLastUpdated, v))
}

// LastUpdatedIn applies the In predicate on the "last_updated" field.
func LastUpdatedIn(vs ...time.Time) predicate.Country {
	return predicate.Country(sql.FieldIn(FieldLastUpdated, vs...))
}

// LastUpdatedNotIn applies the NotIn predicate on the "last_updated" field.
func LastUpdatedNotIn(vs ...time.Time) predicate.Country {
	return predicate.Country(sql.FieldNotIn(FieldLastUpdated, vs...))
}

// LastUpdatedGT applies the GT predicate on the "last_updated" field.
func LastUpdatedGT(v time.Time) predicate.Country {
	return predicate.Country(sql.FieldGT(FieldLastUpdated, v))
}

// LastUpdatedGTE applies the GTE predicate on the "last_updated" field.
func LastUpdatedGTE(v time.Time) predicate.Country {
	return predicate.Country(sql.FieldGTE(FieldLastUpdated, v))
}

// LastUpdatedLT applies the LT predicate on the "last_updated" field.
func LastUpdatedLT(v time.Time) predicate.Country {
	return predicate.Country(sql.FieldLT(FieldLastUpdated, v))
}

// LastUpdatedLTE applies the LTE predicate on the "last_updated" field.
func LastUpdatedLTE(v time.Time) predicate.Country {
	return predicate.Country(sql.FieldLTE(FieldLastUpdated, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Country {
	return predicate.Country(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Country {
	return predicate.Country(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Country {
	return predicate.Country(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Country {
	return predicate.Country(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Country {
	return predicate.Country(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Country {
	return predicate.Country(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Country {
	return predicate.Country(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Country {
	return predicate.Country(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Country {
	return predicate.Country(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Country {
	return predicate.Country(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Country {
	return predicate.Country(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Country {
	return predicate.Country(sql.FieldContainsFold(FieldCode, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Country {
	return predicate.Country(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Country {
	return predicate.Country(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Country {
	return predicate.Country(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Country {
	return predicate.Country(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Country {
	return predicate.Country(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Country {
	return predicate.Country(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Country {
	return predicate.Country(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Country {
	return predicate.Country(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Country {
	return predicate.Country(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Country {
	return predicate.Country(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Country {
	return predicate.Country(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Country {
	return predicate.Country(sql.FieldContainsFold(FieldName, v))
}

// ContinentEQ applies the EQ predicate on the "continent" field.
func ContinentEQ(v Continent) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldContinent, v))
}

// ContinentNEQ applies the NEQ predicate on the "continent" field.
func ContinentNEQ(v Continent) predicate.Country {
	return predicate.Country(sql.FieldNEQ(FieldContinent, v))
}

// ContinentIn applies the In predicate on the "continent" field.
func ContinentIn(vs ...Continent) predicate.Country {
	return predicate.Country(sql.FieldIn(FieldContinent, vs...))
}

// ContinentNotIn applies the NotIn predicate on the "continent" field.
func ContinentNotIn(vs ...Continent) predicate.Country {
	return predicate.Country(sql.FieldNotIn(FieldContinent, vs...))
}

// WikipediaLinkEQ applies the EQ predicate on the "wikipedia_link" field.
func WikipediaLinkEQ(v string) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldWikipediaLink, v))
}

// WikipediaLinkNEQ applies the NEQ predicate on the "wikipedia_link" field.
func WikipediaLinkNEQ(v string) predicate.Country {
	return predicate.Country(sql.FieldNEQ(FieldWikipediaLink, v))
}

// WikipediaLinkIn applies the In predicate on the "wikipedia_link" field.
func WikipediaLinkIn(vs ...string) predicate.Country {
	return predicate.Country(sql.FieldIn(FieldWikipediaLink, vs...))
}

// WikipediaLinkNotIn applies the NotIn predicate on the "wikipedia_link" field.
func WikipediaLinkNotIn(vs ...string) predicate.Country {
	return predicate.Country(sql.FieldNotIn(FieldWikipediaLink, vs...))
}

// WikipediaLinkGT applies the GT predicate on the "wikipedia_link" field.
func WikipediaLinkGT(v string) predicate.Country {
	return predicate.Country(sql.FieldGT(FieldWikipediaLink, v))
}

// WikipediaLinkGTE applies the GTE predicate on the "wikipedia_link" field.
func WikipediaLinkGTE(v string) predicate.Country {
	return predicate.Country(sql.FieldGTE(FieldWikipediaLink, v))
}

// WikipediaLinkLT applies the LT predicate on the "wikipedia_link" field.
func WikipediaLinkLT(v string) predicate.Country {
	return predicate.Country(sql.FieldLT(FieldWikipediaLink, v))
}

// WikipediaLinkLTE applies the LTE predicate on the "wikipedia_link" field.
func WikipediaLinkLTE(v string) predicate.Country {
	return predicate.Country(sql.FieldLTE(FieldWikipediaLink, v))
}

// WikipediaLinkContains applies the Contains predicate on the "wikipedia_link" field.
func WikipediaLinkContains(v string) predicate.Country {
	return predicate.Country(sql.FieldContains(FieldWikipediaLink, v))
}

// WikipediaLinkHasPrefix applies the HasPrefix predicate on the "wikipedia_link" field.
func WikipediaLinkHasPrefix(v string) predicate.Country {
	return predicate.Country(sql.FieldHasPrefix(FieldWikipediaLink, v))
}

// WikipediaLinkHasSuffix applies the HasSuffix predicate on the "wikipedia_link" field.
func WikipediaLinkHasSuffix(v string) predicate.Country {
	return predicate.Country(sql.FieldHasSuffix(FieldWikipediaLink, v))
}

// WikipediaLinkEqualFold applies the EqualFold predicate on the "wikipedia_link" field.
func WikipediaLinkEqualFold(v string) predicate.Country {
	return predicate.Country(sql.FieldEqualFold(FieldWikipediaLink, v))
}

// WikipediaLinkContainsFold applies the ContainsFold predicate on the "wikipedia_link" field.
func WikipediaLinkContainsFold(v string) predicate.Country {
	return predicate.Country(sql.FieldContainsFold(FieldWikipediaLink, v))
}

// HasAirports applies the HasEdge predicate on the "airports" edge.
func HasAirports() predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AirportsTable, AirportsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAirportsWith applies the HasEdge predicate on the "airports" edge with a given conditions (other predicates).
func HasAirportsWith(preds ...predicate.Airport) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := newAirportsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Country) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Country) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Country) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		p(s.Not())
	})
}
