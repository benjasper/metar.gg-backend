// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"metar.gg/ent/airport"
)

// Airport is the model entity for the Airport schema.
type Airport struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash uint64 `json:"hash,omitempty"`
	// ImportFlag holds the value of the "import_flag" field.
	ImportFlag bool `json:"import_flag,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Identifier holds the value of the "identifier" field.
	Identifier string `json:"identifier,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Latitude holds the value of the "latitude" field.
	Latitude float64 `json:"latitude,omitempty"`
	// Longitude holds the value of the "longitude" field.
	Longitude float64 `json:"longitude,omitempty"`
	// Elevation holds the value of the "elevation" field.
	Elevation int `json:"elevation,omitempty"`
	// Continent holds the value of the "continent" field.
	Continent string `json:"continent,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// Region holds the value of the "region" field.
	Region string `json:"region,omitempty"`
	// Municipality holds the value of the "municipality" field.
	Municipality string `json:"municipality,omitempty"`
	// ScheduledService holds the value of the "scheduled_service" field.
	ScheduledService bool `json:"scheduled_service,omitempty"`
	// GpsCode holds the value of the "gps_code" field.
	GpsCode string `json:"gps_code,omitempty"`
	// IataCode holds the value of the "iata_code" field.
	IataCode string `json:"iata_code,omitempty"`
	// LocalCode holds the value of the "local_code" field.
	LocalCode string `json:"local_code,omitempty"`
	// Website holds the value of the "website" field.
	Website string `json:"website,omitempty"`
	// Wikipedia holds the value of the "wikipedia" field.
	Wikipedia string `json:"wikipedia,omitempty"`
	// Keywords holds the value of the "keywords" field.
	Keywords []string `json:"keywords,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AirportQuery when eager-loading is set.
	Edges AirportEdges `json:"edges"`
}

// AirportEdges holds the relations/edges for other nodes in the graph.
type AirportEdges struct {
	// Runways holds the value of the runways edge.
	Runways []*Runway `json:"runways,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RunwaysOrErr returns the Runways value or an error if the edge
// was not loaded in eager-loading.
func (e AirportEdges) RunwaysOrErr() ([]*Runway, error) {
	if e.loadedTypes[0] {
		return e.Runways, nil
	}
	return nil, &NotLoadedError{edge: "runways"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Airport) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case airport.FieldKeywords:
			values[i] = new([]byte)
		case airport.FieldImportFlag, airport.FieldScheduledService:
			values[i] = new(sql.NullBool)
		case airport.FieldLatitude, airport.FieldLongitude:
			values[i] = new(sql.NullFloat64)
		case airport.FieldID, airport.FieldHash, airport.FieldElevation:
			values[i] = new(sql.NullInt64)
		case airport.FieldIdentifier, airport.FieldType, airport.FieldName, airport.FieldContinent, airport.FieldCountry, airport.FieldRegion, airport.FieldMunicipality, airport.FieldGpsCode, airport.FieldIataCode, airport.FieldLocalCode, airport.FieldWebsite, airport.FieldWikipedia:
			values[i] = new(sql.NullString)
		case airport.FieldCreateTime, airport.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Airport", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Airport fields.
func (a *Airport) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case airport.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case airport.FieldHash:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				a.Hash = uint64(value.Int64)
			}
		case airport.FieldImportFlag:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field import_flag", values[i])
			} else if value.Valid {
				a.ImportFlag = value.Bool
			}
		case airport.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				a.CreateTime = value.Time
			}
		case airport.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				a.UpdateTime = value.Time
			}
		case airport.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value.Valid {
				a.Identifier = value.String
			}
		case airport.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				a.Type = value.String
			}
		case airport.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case airport.FieldLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				a.Latitude = value.Float64
			}
		case airport.FieldLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude", values[i])
			} else if value.Valid {
				a.Longitude = value.Float64
			}
		case airport.FieldElevation:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field elevation", values[i])
			} else if value.Valid {
				a.Elevation = int(value.Int64)
			}
		case airport.FieldContinent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field continent", values[i])
			} else if value.Valid {
				a.Continent = value.String
			}
		case airport.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				a.Country = value.String
			}
		case airport.FieldRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field region", values[i])
			} else if value.Valid {
				a.Region = value.String
			}
		case airport.FieldMunicipality:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field municipality", values[i])
			} else if value.Valid {
				a.Municipality = value.String
			}
		case airport.FieldScheduledService:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field scheduled_service", values[i])
			} else if value.Valid {
				a.ScheduledService = value.Bool
			}
		case airport.FieldGpsCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gps_code", values[i])
			} else if value.Valid {
				a.GpsCode = value.String
			}
		case airport.FieldIataCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field iata_code", values[i])
			} else if value.Valid {
				a.IataCode = value.String
			}
		case airport.FieldLocalCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_code", values[i])
			} else if value.Valid {
				a.LocalCode = value.String
			}
		case airport.FieldWebsite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field website", values[i])
			} else if value.Valid {
				a.Website = value.String
			}
		case airport.FieldWikipedia:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wikipedia", values[i])
			} else if value.Valid {
				a.Wikipedia = value.String
			}
		case airport.FieldKeywords:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field keywords", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Keywords); err != nil {
					return fmt.Errorf("unmarshal field keywords: %w", err)
				}
			}
		}
	}
	return nil
}

// QueryRunways queries the "runways" edge of the Airport entity.
func (a *Airport) QueryRunways() *RunwayQuery {
	return (&AirportClient{config: a.config}).QueryRunways(a)
}

// Update returns a builder for updating this Airport.
// Note that you need to call Airport.Unwrap() before calling this method if this Airport
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Airport) Update() *AirportUpdateOne {
	return (&AirportClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Airport entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Airport) Unwrap() *Airport {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Airport is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Airport) String() string {
	var builder strings.Builder
	builder.WriteString("Airport(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("hash=")
	builder.WriteString(fmt.Sprintf("%v", a.Hash))
	builder.WriteString(", ")
	builder.WriteString("import_flag=")
	builder.WriteString(fmt.Sprintf("%v", a.ImportFlag))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(a.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(a.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("identifier=")
	builder.WriteString(a.Identifier)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(a.Type)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("latitude=")
	builder.WriteString(fmt.Sprintf("%v", a.Latitude))
	builder.WriteString(", ")
	builder.WriteString("longitude=")
	builder.WriteString(fmt.Sprintf("%v", a.Longitude))
	builder.WriteString(", ")
	builder.WriteString("elevation=")
	builder.WriteString(fmt.Sprintf("%v", a.Elevation))
	builder.WriteString(", ")
	builder.WriteString("continent=")
	builder.WriteString(a.Continent)
	builder.WriteString(", ")
	builder.WriteString("country=")
	builder.WriteString(a.Country)
	builder.WriteString(", ")
	builder.WriteString("region=")
	builder.WriteString(a.Region)
	builder.WriteString(", ")
	builder.WriteString("municipality=")
	builder.WriteString(a.Municipality)
	builder.WriteString(", ")
	builder.WriteString("scheduled_service=")
	builder.WriteString(fmt.Sprintf("%v", a.ScheduledService))
	builder.WriteString(", ")
	builder.WriteString("gps_code=")
	builder.WriteString(a.GpsCode)
	builder.WriteString(", ")
	builder.WriteString("iata_code=")
	builder.WriteString(a.IataCode)
	builder.WriteString(", ")
	builder.WriteString("local_code=")
	builder.WriteString(a.LocalCode)
	builder.WriteString(", ")
	builder.WriteString("website=")
	builder.WriteString(a.Website)
	builder.WriteString(", ")
	builder.WriteString("wikipedia=")
	builder.WriteString(a.Wikipedia)
	builder.WriteString(", ")
	builder.WriteString("keywords=")
	builder.WriteString(fmt.Sprintf("%v", a.Keywords))
	builder.WriteByte(')')
	return builder.String()
}

// Airports is a parsable slice of Airport.
type Airports []*Airport

func (a Airports) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
