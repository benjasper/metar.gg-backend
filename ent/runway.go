// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"metar.gg/ent/airport"
	"metar.gg/ent/runway"
)

// Runway is the model entity for the Runway schema.
type Runway struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash uint64 `json:"hash,omitempty"`
	// ImportFlag holds the value of the "import_flag" field.
	ImportFlag bool `json:"import_flag,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// AirportIdentifier holds the value of the "airport_identifier" field.
	AirportIdentifier string `json:"airport_identifier,omitempty"`
	// Length holds the value of the "length" field.
	Length int `json:"length,omitempty"`
	// Width holds the value of the "width" field.
	Width int `json:"width,omitempty"`
	// Surface holds the value of the "surface" field.
	Surface string `json:"surface,omitempty"`
	// Lighted holds the value of the "lighted" field.
	Lighted bool `json:"lighted,omitempty"`
	// Closed holds the value of the "closed" field.
	Closed bool `json:"closed,omitempty"`
	// LowNumberedRunwayEndIdentifier holds the value of the "low_numbered_runway_end_identifier" field.
	LowNumberedRunwayEndIdentifier string `json:"low_numbered_runway_end_identifier,omitempty"`
	// LowNumberedRunwayEndLatitude holds the value of the "low_numbered_runway_end_latitude" field.
	LowNumberedRunwayEndLatitude float64 `json:"low_numbered_runway_end_latitude,omitempty"`
	// LowNumberedRunwayEndLongitude holds the value of the "low_numbered_runway_end_longitude" field.
	LowNumberedRunwayEndLongitude float64 `json:"low_numbered_runway_end_longitude,omitempty"`
	// LowNumberedRunwayEndElevation holds the value of the "low_numbered_runway_end_elevation" field.
	LowNumberedRunwayEndElevation int `json:"low_numbered_runway_end_elevation,omitempty"`
	// LowNumberedRunwayEndHeading holds the value of the "low_numbered_runway_end_heading" field.
	LowNumberedRunwayEndHeading int `json:"low_numbered_runway_end_heading,omitempty"`
	// LowNumberedRunwayEndDisplaced holds the value of the "low_numbered_runway_end_displaced" field.
	LowNumberedRunwayEndDisplaced int `json:"low_numbered_runway_end_displaced,omitempty"`
	// HighNumberedRunwayEndIdentifier holds the value of the "high_numbered_runway_end_identifier" field.
	HighNumberedRunwayEndIdentifier string `json:"high_numbered_runway_end_identifier,omitempty"`
	// HighNumberedRunwayEndLatitude holds the value of the "high_numbered_runway_end_latitude" field.
	HighNumberedRunwayEndLatitude float64 `json:"high_numbered_runway_end_latitude,omitempty"`
	// HighNumberedRunwayEndLongitude holds the value of the "high_numbered_runway_end_longitude" field.
	HighNumberedRunwayEndLongitude float64 `json:"high_numbered_runway_end_longitude,omitempty"`
	// HighNumberedRunwayEndElevation holds the value of the "high_numbered_runway_end_elevation" field.
	HighNumberedRunwayEndElevation int `json:"high_numbered_runway_end_elevation,omitempty"`
	// HighNumberedRunwayEndHeading holds the value of the "high_numbered_runway_end_heading" field.
	HighNumberedRunwayEndHeading int `json:"high_numbered_runway_end_heading,omitempty"`
	// HighNumberedRunwayEndDisplaced holds the value of the "high_numbered_runway_end_displaced" field.
	HighNumberedRunwayEndDisplaced int `json:"high_numbered_runway_end_displaced,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RunwayQuery when eager-loading is set.
	Edges           RunwayEdges `json:"edges"`
	airport_runways *int
}

// RunwayEdges holds the relations/edges for other nodes in the graph.
type RunwayEdges struct {
	// Airport holds the value of the airport edge.
	Airport *Airport `json:"airport,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AirportOrErr returns the Airport value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RunwayEdges) AirportOrErr() (*Airport, error) {
	if e.loadedTypes[0] {
		if e.Airport == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: airport.Label}
		}
		return e.Airport, nil
	}
	return nil, &NotLoadedError{edge: "airport"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Runway) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case runway.FieldImportFlag, runway.FieldLighted, runway.FieldClosed:
			values[i] = new(sql.NullBool)
		case runway.FieldLowNumberedRunwayEndLatitude, runway.FieldLowNumberedRunwayEndLongitude, runway.FieldHighNumberedRunwayEndLatitude, runway.FieldHighNumberedRunwayEndLongitude:
			values[i] = new(sql.NullFloat64)
		case runway.FieldID, runway.FieldHash, runway.FieldLength, runway.FieldWidth, runway.FieldLowNumberedRunwayEndElevation, runway.FieldLowNumberedRunwayEndHeading, runway.FieldLowNumberedRunwayEndDisplaced, runway.FieldHighNumberedRunwayEndElevation, runway.FieldHighNumberedRunwayEndHeading, runway.FieldHighNumberedRunwayEndDisplaced:
			values[i] = new(sql.NullInt64)
		case runway.FieldAirportIdentifier, runway.FieldSurface, runway.FieldLowNumberedRunwayEndIdentifier, runway.FieldHighNumberedRunwayEndIdentifier:
			values[i] = new(sql.NullString)
		case runway.FieldCreateTime, runway.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case runway.ForeignKeys[0]: // airport_runways
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Runway", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Runway fields.
func (r *Runway) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case runway.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case runway.FieldHash:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				r.Hash = uint64(value.Int64)
			}
		case runway.FieldImportFlag:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field import_flag", values[i])
			} else if value.Valid {
				r.ImportFlag = value.Bool
			}
		case runway.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				r.CreateTime = value.Time
			}
		case runway.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				r.UpdateTime = value.Time
			}
		case runway.FieldAirportIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field airport_identifier", values[i])
			} else if value.Valid {
				r.AirportIdentifier = value.String
			}
		case runway.FieldLength:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field length", values[i])
			} else if value.Valid {
				r.Length = int(value.Int64)
			}
		case runway.FieldWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[i])
			} else if value.Valid {
				r.Width = int(value.Int64)
			}
		case runway.FieldSurface:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field surface", values[i])
			} else if value.Valid {
				r.Surface = value.String
			}
		case runway.FieldLighted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field lighted", values[i])
			} else if value.Valid {
				r.Lighted = value.Bool
			}
		case runway.FieldClosed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field closed", values[i])
			} else if value.Valid {
				r.Closed = value.Bool
			}
		case runway.FieldLowNumberedRunwayEndIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field low_numbered_runway_end_identifier", values[i])
			} else if value.Valid {
				r.LowNumberedRunwayEndIdentifier = value.String
			}
		case runway.FieldLowNumberedRunwayEndLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field low_numbered_runway_end_latitude", values[i])
			} else if value.Valid {
				r.LowNumberedRunwayEndLatitude = value.Float64
			}
		case runway.FieldLowNumberedRunwayEndLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field low_numbered_runway_end_longitude", values[i])
			} else if value.Valid {
				r.LowNumberedRunwayEndLongitude = value.Float64
			}
		case runway.FieldLowNumberedRunwayEndElevation:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field low_numbered_runway_end_elevation", values[i])
			} else if value.Valid {
				r.LowNumberedRunwayEndElevation = int(value.Int64)
			}
		case runway.FieldLowNumberedRunwayEndHeading:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field low_numbered_runway_end_heading", values[i])
			} else if value.Valid {
				r.LowNumberedRunwayEndHeading = int(value.Int64)
			}
		case runway.FieldLowNumberedRunwayEndDisplaced:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field low_numbered_runway_end_displaced", values[i])
			} else if value.Valid {
				r.LowNumberedRunwayEndDisplaced = int(value.Int64)
			}
		case runway.FieldHighNumberedRunwayEndIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field high_numbered_runway_end_identifier", values[i])
			} else if value.Valid {
				r.HighNumberedRunwayEndIdentifier = value.String
			}
		case runway.FieldHighNumberedRunwayEndLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field high_numbered_runway_end_latitude", values[i])
			} else if value.Valid {
				r.HighNumberedRunwayEndLatitude = value.Float64
			}
		case runway.FieldHighNumberedRunwayEndLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field high_numbered_runway_end_longitude", values[i])
			} else if value.Valid {
				r.HighNumberedRunwayEndLongitude = value.Float64
			}
		case runway.FieldHighNumberedRunwayEndElevation:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field high_numbered_runway_end_elevation", values[i])
			} else if value.Valid {
				r.HighNumberedRunwayEndElevation = int(value.Int64)
			}
		case runway.FieldHighNumberedRunwayEndHeading:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field high_numbered_runway_end_heading", values[i])
			} else if value.Valid {
				r.HighNumberedRunwayEndHeading = int(value.Int64)
			}
		case runway.FieldHighNumberedRunwayEndDisplaced:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field high_numbered_runway_end_displaced", values[i])
			} else if value.Valid {
				r.HighNumberedRunwayEndDisplaced = int(value.Int64)
			}
		case runway.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field airport_runways", value)
			} else if value.Valid {
				r.airport_runways = new(int)
				*r.airport_runways = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAirport queries the "airport" edge of the Runway entity.
func (r *Runway) QueryAirport() *AirportQuery {
	return (&RunwayClient{config: r.config}).QueryAirport(r)
}

// Update returns a builder for updating this Runway.
// Note that you need to call Runway.Unwrap() before calling this method if this Runway
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Runway) Update() *RunwayUpdateOne {
	return (&RunwayClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Runway entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Runway) Unwrap() *Runway {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Runway is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Runway) String() string {
	var builder strings.Builder
	builder.WriteString("Runway(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("hash=")
	builder.WriteString(fmt.Sprintf("%v", r.Hash))
	builder.WriteString(", ")
	builder.WriteString("import_flag=")
	builder.WriteString(fmt.Sprintf("%v", r.ImportFlag))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(r.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(r.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("airport_identifier=")
	builder.WriteString(r.AirportIdentifier)
	builder.WriteString(", ")
	builder.WriteString("length=")
	builder.WriteString(fmt.Sprintf("%v", r.Length))
	builder.WriteString(", ")
	builder.WriteString("width=")
	builder.WriteString(fmt.Sprintf("%v", r.Width))
	builder.WriteString(", ")
	builder.WriteString("surface=")
	builder.WriteString(r.Surface)
	builder.WriteString(", ")
	builder.WriteString("lighted=")
	builder.WriteString(fmt.Sprintf("%v", r.Lighted))
	builder.WriteString(", ")
	builder.WriteString("closed=")
	builder.WriteString(fmt.Sprintf("%v", r.Closed))
	builder.WriteString(", ")
	builder.WriteString("low_numbered_runway_end_identifier=")
	builder.WriteString(r.LowNumberedRunwayEndIdentifier)
	builder.WriteString(", ")
	builder.WriteString("low_numbered_runway_end_latitude=")
	builder.WriteString(fmt.Sprintf("%v", r.LowNumberedRunwayEndLatitude))
	builder.WriteString(", ")
	builder.WriteString("low_numbered_runway_end_longitude=")
	builder.WriteString(fmt.Sprintf("%v", r.LowNumberedRunwayEndLongitude))
	builder.WriteString(", ")
	builder.WriteString("low_numbered_runway_end_elevation=")
	builder.WriteString(fmt.Sprintf("%v", r.LowNumberedRunwayEndElevation))
	builder.WriteString(", ")
	builder.WriteString("low_numbered_runway_end_heading=")
	builder.WriteString(fmt.Sprintf("%v", r.LowNumberedRunwayEndHeading))
	builder.WriteString(", ")
	builder.WriteString("low_numbered_runway_end_displaced=")
	builder.WriteString(fmt.Sprintf("%v", r.LowNumberedRunwayEndDisplaced))
	builder.WriteString(", ")
	builder.WriteString("high_numbered_runway_end_identifier=")
	builder.WriteString(r.HighNumberedRunwayEndIdentifier)
	builder.WriteString(", ")
	builder.WriteString("high_numbered_runway_end_latitude=")
	builder.WriteString(fmt.Sprintf("%v", r.HighNumberedRunwayEndLatitude))
	builder.WriteString(", ")
	builder.WriteString("high_numbered_runway_end_longitude=")
	builder.WriteString(fmt.Sprintf("%v", r.HighNumberedRunwayEndLongitude))
	builder.WriteString(", ")
	builder.WriteString("high_numbered_runway_end_elevation=")
	builder.WriteString(fmt.Sprintf("%v", r.HighNumberedRunwayEndElevation))
	builder.WriteString(", ")
	builder.WriteString("high_numbered_runway_end_heading=")
	builder.WriteString(fmt.Sprintf("%v", r.HighNumberedRunwayEndHeading))
	builder.WriteString(", ")
	builder.WriteString("high_numbered_runway_end_displaced=")
	builder.WriteString(fmt.Sprintf("%v", r.HighNumberedRunwayEndDisplaced))
	builder.WriteByte(')')
	return builder.String()
}

// Runways is a parsable slice of Runway.
type Runways []*Runway

func (r Runways) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
