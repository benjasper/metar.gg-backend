// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"metar.gg/ent/metar"
	"metar.gg/ent/skycondition"
	"metar.gg/ent/weatherstation"
)

// MetarCreate is the builder for creating a Metar entity.
type MetarCreate struct {
	config
	mutation *MetarMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRawText sets the "raw_text" field.
func (mc *MetarCreate) SetRawText(s string) *MetarCreate {
	mc.mutation.SetRawText(s)
	return mc
}

// SetObservationTime sets the "observation_time" field.
func (mc *MetarCreate) SetObservationTime(t time.Time) *MetarCreate {
	mc.mutation.SetObservationTime(t)
	return mc
}

// SetImportTime sets the "import_time" field.
func (mc *MetarCreate) SetImportTime(t time.Time) *MetarCreate {
	mc.mutation.SetImportTime(t)
	return mc
}

// SetNillableImportTime sets the "import_time" field if the given value is not nil.
func (mc *MetarCreate) SetNillableImportTime(t *time.Time) *MetarCreate {
	if t != nil {
		mc.SetImportTime(*t)
	}
	return mc
}

// SetNextImportTimePrediction sets the "next_import_time_prediction" field.
func (mc *MetarCreate) SetNextImportTimePrediction(t time.Time) *MetarCreate {
	mc.mutation.SetNextImportTimePrediction(t)
	return mc
}

// SetNillableNextImportTimePrediction sets the "next_import_time_prediction" field if the given value is not nil.
func (mc *MetarCreate) SetNillableNextImportTimePrediction(t *time.Time) *MetarCreate {
	if t != nil {
		mc.SetNextImportTimePrediction(*t)
	}
	return mc
}

// SetTemperature sets the "temperature" field.
func (mc *MetarCreate) SetTemperature(f float64) *MetarCreate {
	mc.mutation.SetTemperature(f)
	return mc
}

// SetDewpoint sets the "dewpoint" field.
func (mc *MetarCreate) SetDewpoint(f float64) *MetarCreate {
	mc.mutation.SetDewpoint(f)
	return mc
}

// SetWindSpeed sets the "wind_speed" field.
func (mc *MetarCreate) SetWindSpeed(i int) *MetarCreate {
	mc.mutation.SetWindSpeed(i)
	return mc
}

// SetWindGust sets the "wind_gust" field.
func (mc *MetarCreate) SetWindGust(i int) *MetarCreate {
	mc.mutation.SetWindGust(i)
	return mc
}

// SetWindDirection sets the "wind_direction" field.
func (mc *MetarCreate) SetWindDirection(i int) *MetarCreate {
	mc.mutation.SetWindDirection(i)
	return mc
}

// SetVisibility sets the "visibility" field.
func (mc *MetarCreate) SetVisibility(f float64) *MetarCreate {
	mc.mutation.SetVisibility(f)
	return mc
}

// SetAltimeter sets the "altimeter" field.
func (mc *MetarCreate) SetAltimeter(f float64) *MetarCreate {
	mc.mutation.SetAltimeter(f)
	return mc
}

// SetPresentWeather sets the "present_weather" field.
func (mc *MetarCreate) SetPresentWeather(s string) *MetarCreate {
	mc.mutation.SetPresentWeather(s)
	return mc
}

// SetNillablePresentWeather sets the "present_weather" field if the given value is not nil.
func (mc *MetarCreate) SetNillablePresentWeather(s *string) *MetarCreate {
	if s != nil {
		mc.SetPresentWeather(*s)
	}
	return mc
}

// SetFlightCategory sets the "flight_category" field.
func (mc *MetarCreate) SetFlightCategory(value metar.FlightCategory) *MetarCreate {
	mc.mutation.SetFlightCategory(value)
	return mc
}

// SetNillableFlightCategory sets the "flight_category" field if the given value is not nil.
func (mc *MetarCreate) SetNillableFlightCategory(value *metar.FlightCategory) *MetarCreate {
	if value != nil {
		mc.SetFlightCategory(*value)
	}
	return mc
}

// SetQualityControlCorrected sets the "quality_control_corrected" field.
func (mc *MetarCreate) SetQualityControlCorrected(b bool) *MetarCreate {
	mc.mutation.SetQualityControlCorrected(b)
	return mc
}

// SetNillableQualityControlCorrected sets the "quality_control_corrected" field if the given value is not nil.
func (mc *MetarCreate) SetNillableQualityControlCorrected(b *bool) *MetarCreate {
	if b != nil {
		mc.SetQualityControlCorrected(*b)
	}
	return mc
}

// SetQualityControlAutoStation sets the "quality_control_auto_station" field.
func (mc *MetarCreate) SetQualityControlAutoStation(b bool) *MetarCreate {
	mc.mutation.SetQualityControlAutoStation(b)
	return mc
}

// SetQualityControlMaintenanceIndicatorOn sets the "quality_control_maintenance_indicator_on" field.
func (mc *MetarCreate) SetQualityControlMaintenanceIndicatorOn(b bool) *MetarCreate {
	mc.mutation.SetQualityControlMaintenanceIndicatorOn(b)
	return mc
}

// SetQualityControlNoSignal sets the "quality_control_no_signal" field.
func (mc *MetarCreate) SetQualityControlNoSignal(b bool) *MetarCreate {
	mc.mutation.SetQualityControlNoSignal(b)
	return mc
}

// SetQualityControlLightningSensorOff sets the "quality_control_lightning_sensor_off" field.
func (mc *MetarCreate) SetQualityControlLightningSensorOff(b bool) *MetarCreate {
	mc.mutation.SetQualityControlLightningSensorOff(b)
	return mc
}

// SetQualityControlFreezingRainSensorOff sets the "quality_control_freezing_rain_sensor_off" field.
func (mc *MetarCreate) SetQualityControlFreezingRainSensorOff(b bool) *MetarCreate {
	mc.mutation.SetQualityControlFreezingRainSensorOff(b)
	return mc
}

// SetQualityControlPresentWeatherSensorOff sets the "quality_control_present_weather_sensor_off" field.
func (mc *MetarCreate) SetQualityControlPresentWeatherSensorOff(b bool) *MetarCreate {
	mc.mutation.SetQualityControlPresentWeatherSensorOff(b)
	return mc
}

// SetSeaLevelPressure sets the "sea_level_pressure" field.
func (mc *MetarCreate) SetSeaLevelPressure(f float64) *MetarCreate {
	mc.mutation.SetSeaLevelPressure(f)
	return mc
}

// SetNillableSeaLevelPressure sets the "sea_level_pressure" field if the given value is not nil.
func (mc *MetarCreate) SetNillableSeaLevelPressure(f *float64) *MetarCreate {
	if f != nil {
		mc.SetSeaLevelPressure(*f)
	}
	return mc
}

// SetPressureTendency sets the "pressure_tendency" field.
func (mc *MetarCreate) SetPressureTendency(f float64) *MetarCreate {
	mc.mutation.SetPressureTendency(f)
	return mc
}

// SetNillablePressureTendency sets the "pressure_tendency" field if the given value is not nil.
func (mc *MetarCreate) SetNillablePressureTendency(f *float64) *MetarCreate {
	if f != nil {
		mc.SetPressureTendency(*f)
	}
	return mc
}

// SetMaxTemp6 sets the "max_temp_6" field.
func (mc *MetarCreate) SetMaxTemp6(f float64) *MetarCreate {
	mc.mutation.SetMaxTemp6(f)
	return mc
}

// SetNillableMaxTemp6 sets the "max_temp_6" field if the given value is not nil.
func (mc *MetarCreate) SetNillableMaxTemp6(f *float64) *MetarCreate {
	if f != nil {
		mc.SetMaxTemp6(*f)
	}
	return mc
}

// SetMinTemp6 sets the "min_temp_6" field.
func (mc *MetarCreate) SetMinTemp6(f float64) *MetarCreate {
	mc.mutation.SetMinTemp6(f)
	return mc
}

// SetNillableMinTemp6 sets the "min_temp_6" field if the given value is not nil.
func (mc *MetarCreate) SetNillableMinTemp6(f *float64) *MetarCreate {
	if f != nil {
		mc.SetMinTemp6(*f)
	}
	return mc
}

// SetMaxTemp24 sets the "max_temp_24" field.
func (mc *MetarCreate) SetMaxTemp24(f float64) *MetarCreate {
	mc.mutation.SetMaxTemp24(f)
	return mc
}

// SetNillableMaxTemp24 sets the "max_temp_24" field if the given value is not nil.
func (mc *MetarCreate) SetNillableMaxTemp24(f *float64) *MetarCreate {
	if f != nil {
		mc.SetMaxTemp24(*f)
	}
	return mc
}

// SetMinTemp24 sets the "min_temp_24" field.
func (mc *MetarCreate) SetMinTemp24(f float64) *MetarCreate {
	mc.mutation.SetMinTemp24(f)
	return mc
}

// SetNillableMinTemp24 sets the "min_temp_24" field if the given value is not nil.
func (mc *MetarCreate) SetNillableMinTemp24(f *float64) *MetarCreate {
	if f != nil {
		mc.SetMinTemp24(*f)
	}
	return mc
}

// SetPrecipitation sets the "precipitation" field.
func (mc *MetarCreate) SetPrecipitation(f float64) *MetarCreate {
	mc.mutation.SetPrecipitation(f)
	return mc
}

// SetNillablePrecipitation sets the "precipitation" field if the given value is not nil.
func (mc *MetarCreate) SetNillablePrecipitation(f *float64) *MetarCreate {
	if f != nil {
		mc.SetPrecipitation(*f)
	}
	return mc
}

// SetPrecipitation3 sets the "precipitation_3" field.
func (mc *MetarCreate) SetPrecipitation3(f float64) *MetarCreate {
	mc.mutation.SetPrecipitation3(f)
	return mc
}

// SetNillablePrecipitation3 sets the "precipitation_3" field if the given value is not nil.
func (mc *MetarCreate) SetNillablePrecipitation3(f *float64) *MetarCreate {
	if f != nil {
		mc.SetPrecipitation3(*f)
	}
	return mc
}

// SetPrecipitation6 sets the "precipitation_6" field.
func (mc *MetarCreate) SetPrecipitation6(f float64) *MetarCreate {
	mc.mutation.SetPrecipitation6(f)
	return mc
}

// SetNillablePrecipitation6 sets the "precipitation_6" field if the given value is not nil.
func (mc *MetarCreate) SetNillablePrecipitation6(f *float64) *MetarCreate {
	if f != nil {
		mc.SetPrecipitation6(*f)
	}
	return mc
}

// SetPrecipitation24 sets the "precipitation_24" field.
func (mc *MetarCreate) SetPrecipitation24(f float64) *MetarCreate {
	mc.mutation.SetPrecipitation24(f)
	return mc
}

// SetNillablePrecipitation24 sets the "precipitation_24" field if the given value is not nil.
func (mc *MetarCreate) SetNillablePrecipitation24(f *float64) *MetarCreate {
	if f != nil {
		mc.SetPrecipitation24(*f)
	}
	return mc
}

// SetSnowDepth sets the "snow_depth" field.
func (mc *MetarCreate) SetSnowDepth(f float64) *MetarCreate {
	mc.mutation.SetSnowDepth(f)
	return mc
}

// SetNillableSnowDepth sets the "snow_depth" field if the given value is not nil.
func (mc *MetarCreate) SetNillableSnowDepth(f *float64) *MetarCreate {
	if f != nil {
		mc.SetSnowDepth(*f)
	}
	return mc
}

// SetVertVis sets the "vert_vis" field.
func (mc *MetarCreate) SetVertVis(f float64) *MetarCreate {
	mc.mutation.SetVertVis(f)
	return mc
}

// SetNillableVertVis sets the "vert_vis" field if the given value is not nil.
func (mc *MetarCreate) SetNillableVertVis(f *float64) *MetarCreate {
	if f != nil {
		mc.SetVertVis(*f)
	}
	return mc
}

// SetMetarType sets the "metar_type" field.
func (mc *MetarCreate) SetMetarType(mt metar.MetarType) *MetarCreate {
	mc.mutation.SetMetarType(mt)
	return mc
}

// SetHash sets the "hash" field.
func (mc *MetarCreate) SetHash(s string) *MetarCreate {
	mc.mutation.SetHash(s)
	return mc
}

// SetID sets the "id" field.
func (mc *MetarCreate) SetID(u uuid.UUID) *MetarCreate {
	mc.mutation.SetID(u)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *MetarCreate) SetNillableID(u *uuid.UUID) *MetarCreate {
	if u != nil {
		mc.SetID(*u)
	}
	return mc
}

// SetStationID sets the "station" edge to the WeatherStation entity by ID.
func (mc *MetarCreate) SetStationID(id uuid.UUID) *MetarCreate {
	mc.mutation.SetStationID(id)
	return mc
}

// SetStation sets the "station" edge to the WeatherStation entity.
func (mc *MetarCreate) SetStation(w *WeatherStation) *MetarCreate {
	return mc.SetStationID(w.ID)
}

// AddSkyConditionIDs adds the "sky_conditions" edge to the SkyCondition entity by IDs.
func (mc *MetarCreate) AddSkyConditionIDs(ids ...uuid.UUID) *MetarCreate {
	mc.mutation.AddSkyConditionIDs(ids...)
	return mc
}

// AddSkyConditions adds the "sky_conditions" edges to the SkyCondition entity.
func (mc *MetarCreate) AddSkyConditions(s ...*SkyCondition) *MetarCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mc.AddSkyConditionIDs(ids...)
}

// Mutation returns the MetarMutation object of the builder.
func (mc *MetarCreate) Mutation() *MetarMutation {
	return mc.mutation
}

// Save creates the Metar in the database.
func (mc *MetarCreate) Save(ctx context.Context) (*Metar, error) {
	var (
		err  error
		node *Metar
	)
	mc.defaults()
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MetarMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			if node, err = mc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			if mc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Metar)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MetarMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MetarCreate) SaveX(ctx context.Context) *Metar {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MetarCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MetarCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MetarCreate) defaults() {
	if _, ok := mc.mutation.ImportTime(); !ok {
		v := metar.DefaultImportTime()
		mc.mutation.SetImportTime(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		v := metar.DefaultID()
		mc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MetarCreate) check() error {
	if _, ok := mc.mutation.RawText(); !ok {
		return &ValidationError{Name: "raw_text", err: errors.New(`ent: missing required field "Metar.raw_text"`)}
	}
	if _, ok := mc.mutation.ObservationTime(); !ok {
		return &ValidationError{Name: "observation_time", err: errors.New(`ent: missing required field "Metar.observation_time"`)}
	}
	if _, ok := mc.mutation.ImportTime(); !ok {
		return &ValidationError{Name: "import_time", err: errors.New(`ent: missing required field "Metar.import_time"`)}
	}
	if _, ok := mc.mutation.Temperature(); !ok {
		return &ValidationError{Name: "temperature", err: errors.New(`ent: missing required field "Metar.temperature"`)}
	}
	if _, ok := mc.mutation.Dewpoint(); !ok {
		return &ValidationError{Name: "dewpoint", err: errors.New(`ent: missing required field "Metar.dewpoint"`)}
	}
	if _, ok := mc.mutation.WindSpeed(); !ok {
		return &ValidationError{Name: "wind_speed", err: errors.New(`ent: missing required field "Metar.wind_speed"`)}
	}
	if _, ok := mc.mutation.WindGust(); !ok {
		return &ValidationError{Name: "wind_gust", err: errors.New(`ent: missing required field "Metar.wind_gust"`)}
	}
	if _, ok := mc.mutation.WindDirection(); !ok {
		return &ValidationError{Name: "wind_direction", err: errors.New(`ent: missing required field "Metar.wind_direction"`)}
	}
	if _, ok := mc.mutation.Visibility(); !ok {
		return &ValidationError{Name: "visibility", err: errors.New(`ent: missing required field "Metar.visibility"`)}
	}
	if _, ok := mc.mutation.Altimeter(); !ok {
		return &ValidationError{Name: "altimeter", err: errors.New(`ent: missing required field "Metar.altimeter"`)}
	}
	if v, ok := mc.mutation.FlightCategory(); ok {
		if err := metar.FlightCategoryValidator(v); err != nil {
			return &ValidationError{Name: "flight_category", err: fmt.Errorf(`ent: validator failed for field "Metar.flight_category": %w`, err)}
		}
	}
	if _, ok := mc.mutation.QualityControlAutoStation(); !ok {
		return &ValidationError{Name: "quality_control_auto_station", err: errors.New(`ent: missing required field "Metar.quality_control_auto_station"`)}
	}
	if _, ok := mc.mutation.QualityControlMaintenanceIndicatorOn(); !ok {
		return &ValidationError{Name: "quality_control_maintenance_indicator_on", err: errors.New(`ent: missing required field "Metar.quality_control_maintenance_indicator_on"`)}
	}
	if _, ok := mc.mutation.QualityControlNoSignal(); !ok {
		return &ValidationError{Name: "quality_control_no_signal", err: errors.New(`ent: missing required field "Metar.quality_control_no_signal"`)}
	}
	if _, ok := mc.mutation.QualityControlLightningSensorOff(); !ok {
		return &ValidationError{Name: "quality_control_lightning_sensor_off", err: errors.New(`ent: missing required field "Metar.quality_control_lightning_sensor_off"`)}
	}
	if _, ok := mc.mutation.QualityControlFreezingRainSensorOff(); !ok {
		return &ValidationError{Name: "quality_control_freezing_rain_sensor_off", err: errors.New(`ent: missing required field "Metar.quality_control_freezing_rain_sensor_off"`)}
	}
	if _, ok := mc.mutation.QualityControlPresentWeatherSensorOff(); !ok {
		return &ValidationError{Name: "quality_control_present_weather_sensor_off", err: errors.New(`ent: missing required field "Metar.quality_control_present_weather_sensor_off"`)}
	}
	if _, ok := mc.mutation.MetarType(); !ok {
		return &ValidationError{Name: "metar_type", err: errors.New(`ent: missing required field "Metar.metar_type"`)}
	}
	if v, ok := mc.mutation.MetarType(); ok {
		if err := metar.MetarTypeValidator(v); err != nil {
			return &ValidationError{Name: "metar_type", err: fmt.Errorf(`ent: validator failed for field "Metar.metar_type": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "Metar.hash"`)}
	}
	if _, ok := mc.mutation.StationID(); !ok {
		return &ValidationError{Name: "station", err: errors.New(`ent: missing required edge "Metar.station"`)}
	}
	return nil
}

func (mc *MetarCreate) sqlSave(ctx context.Context) (*Metar, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (mc *MetarCreate) createSpec() (*Metar, *sqlgraph.CreateSpec) {
	var (
		_node = &Metar{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: metar.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: metar.FieldID,
			},
		}
	)
	_spec.OnConflict = mc.conflict
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mc.mutation.RawText(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metar.FieldRawText,
		})
		_node.RawText = value
	}
	if value, ok := mc.mutation.ObservationTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: metar.FieldObservationTime,
		})
		_node.ObservationTime = value
	}
	if value, ok := mc.mutation.ImportTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: metar.FieldImportTime,
		})
		_node.ImportTime = value
	}
	if value, ok := mc.mutation.NextImportTimePrediction(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: metar.FieldNextImportTimePrediction,
		})
		_node.NextImportTimePrediction = &value
	}
	if value, ok := mc.mutation.Temperature(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: metar.FieldTemperature,
		})
		_node.Temperature = value
	}
	if value, ok := mc.mutation.Dewpoint(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: metar.FieldDewpoint,
		})
		_node.Dewpoint = value
	}
	if value, ok := mc.mutation.WindSpeed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: metar.FieldWindSpeed,
		})
		_node.WindSpeed = value
	}
	if value, ok := mc.mutation.WindGust(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: metar.FieldWindGust,
		})
		_node.WindGust = value
	}
	if value, ok := mc.mutation.WindDirection(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: metar.FieldWindDirection,
		})
		_node.WindDirection = value
	}
	if value, ok := mc.mutation.Visibility(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: metar.FieldVisibility,
		})
		_node.Visibility = value
	}
	if value, ok := mc.mutation.Altimeter(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: metar.FieldAltimeter,
		})
		_node.Altimeter = value
	}
	if value, ok := mc.mutation.PresentWeather(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metar.FieldPresentWeather,
		})
		_node.PresentWeather = &value
	}
	if value, ok := mc.mutation.FlightCategory(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: metar.FieldFlightCategory,
		})
		_node.FlightCategory = &value
	}
	if value, ok := mc.mutation.QualityControlCorrected(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: metar.FieldQualityControlCorrected,
		})
		_node.QualityControlCorrected = &value
	}
	if value, ok := mc.mutation.QualityControlAutoStation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: metar.FieldQualityControlAutoStation,
		})
		_node.QualityControlAutoStation = value
	}
	if value, ok := mc.mutation.QualityControlMaintenanceIndicatorOn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: metar.FieldQualityControlMaintenanceIndicatorOn,
		})
		_node.QualityControlMaintenanceIndicatorOn = value
	}
	if value, ok := mc.mutation.QualityControlNoSignal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: metar.FieldQualityControlNoSignal,
		})
		_node.QualityControlNoSignal = value
	}
	if value, ok := mc.mutation.QualityControlLightningSensorOff(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: metar.FieldQualityControlLightningSensorOff,
		})
		_node.QualityControlLightningSensorOff = value
	}
	if value, ok := mc.mutation.QualityControlFreezingRainSensorOff(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: metar.FieldQualityControlFreezingRainSensorOff,
		})
		_node.QualityControlFreezingRainSensorOff = value
	}
	if value, ok := mc.mutation.QualityControlPresentWeatherSensorOff(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: metar.FieldQualityControlPresentWeatherSensorOff,
		})
		_node.QualityControlPresentWeatherSensorOff = value
	}
	if value, ok := mc.mutation.SeaLevelPressure(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: metar.FieldSeaLevelPressure,
		})
		_node.SeaLevelPressure = &value
	}
	if value, ok := mc.mutation.PressureTendency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: metar.FieldPressureTendency,
		})
		_node.PressureTendency = &value
	}
	if value, ok := mc.mutation.MaxTemp6(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: metar.FieldMaxTemp6,
		})
		_node.MaxTemp6 = &value
	}
	if value, ok := mc.mutation.MinTemp6(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: metar.FieldMinTemp6,
		})
		_node.MinTemp6 = &value
	}
	if value, ok := mc.mutation.MaxTemp24(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: metar.FieldMaxTemp24,
		})
		_node.MaxTemp24 = &value
	}
	if value, ok := mc.mutation.MinTemp24(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: metar.FieldMinTemp24,
		})
		_node.MinTemp24 = &value
	}
	if value, ok := mc.mutation.Precipitation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: metar.FieldPrecipitation,
		})
		_node.Precipitation = &value
	}
	if value, ok := mc.mutation.Precipitation3(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: metar.FieldPrecipitation3,
		})
		_node.Precipitation3 = &value
	}
	if value, ok := mc.mutation.Precipitation6(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: metar.FieldPrecipitation6,
		})
		_node.Precipitation6 = &value
	}
	if value, ok := mc.mutation.Precipitation24(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: metar.FieldPrecipitation24,
		})
		_node.Precipitation24 = &value
	}
	if value, ok := mc.mutation.SnowDepth(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: metar.FieldSnowDepth,
		})
		_node.SnowDepth = &value
	}
	if value, ok := mc.mutation.VertVis(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: metar.FieldVertVis,
		})
		_node.VertVis = &value
	}
	if value, ok := mc.mutation.MetarType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: metar.FieldMetarType,
		})
		_node.MetarType = value
	}
	if value, ok := mc.mutation.Hash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metar.FieldHash,
		})
		_node.Hash = value
	}
	if nodes := mc.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   metar.StationTable,
			Columns: []string{metar.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: weatherstation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.weather_station_metars = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.SkyConditionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metar.SkyConditionsTable,
			Columns: []string{metar.SkyConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: skycondition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Metar.Create().
//		SetRawText(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MetarUpsert) {
//			SetRawText(v+v).
//		}).
//		Exec(ctx)
func (mc *MetarCreate) OnConflict(opts ...sql.ConflictOption) *MetarUpsertOne {
	mc.conflict = opts
	return &MetarUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Metar.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MetarCreate) OnConflictColumns(columns ...string) *MetarUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MetarUpsertOne{
		create: mc,
	}
}

type (
	// MetarUpsertOne is the builder for "upsert"-ing
	//  one Metar node.
	MetarUpsertOne struct {
		create *MetarCreate
	}

	// MetarUpsert is the "OnConflict" setter.
	MetarUpsert struct {
		*sql.UpdateSet
	}
)

// SetRawText sets the "raw_text" field.
func (u *MetarUpsert) SetRawText(v string) *MetarUpsert {
	u.Set(metar.FieldRawText, v)
	return u
}

// UpdateRawText sets the "raw_text" field to the value that was provided on create.
func (u *MetarUpsert) UpdateRawText() *MetarUpsert {
	u.SetExcluded(metar.FieldRawText)
	return u
}

// SetObservationTime sets the "observation_time" field.
func (u *MetarUpsert) SetObservationTime(v time.Time) *MetarUpsert {
	u.Set(metar.FieldObservationTime, v)
	return u
}

// UpdateObservationTime sets the "observation_time" field to the value that was provided on create.
func (u *MetarUpsert) UpdateObservationTime() *MetarUpsert {
	u.SetExcluded(metar.FieldObservationTime)
	return u
}

// SetImportTime sets the "import_time" field.
func (u *MetarUpsert) SetImportTime(v time.Time) *MetarUpsert {
	u.Set(metar.FieldImportTime, v)
	return u
}

// UpdateImportTime sets the "import_time" field to the value that was provided on create.
func (u *MetarUpsert) UpdateImportTime() *MetarUpsert {
	u.SetExcluded(metar.FieldImportTime)
	return u
}

// SetNextImportTimePrediction sets the "next_import_time_prediction" field.
func (u *MetarUpsert) SetNextImportTimePrediction(v time.Time) *MetarUpsert {
	u.Set(metar.FieldNextImportTimePrediction, v)
	return u
}

// UpdateNextImportTimePrediction sets the "next_import_time_prediction" field to the value that was provided on create.
func (u *MetarUpsert) UpdateNextImportTimePrediction() *MetarUpsert {
	u.SetExcluded(metar.FieldNextImportTimePrediction)
	return u
}

// ClearNextImportTimePrediction clears the value of the "next_import_time_prediction" field.
func (u *MetarUpsert) ClearNextImportTimePrediction() *MetarUpsert {
	u.SetNull(metar.FieldNextImportTimePrediction)
	return u
}

// SetTemperature sets the "temperature" field.
func (u *MetarUpsert) SetTemperature(v float64) *MetarUpsert {
	u.Set(metar.FieldTemperature, v)
	return u
}

// UpdateTemperature sets the "temperature" field to the value that was provided on create.
func (u *MetarUpsert) UpdateTemperature() *MetarUpsert {
	u.SetExcluded(metar.FieldTemperature)
	return u
}

// AddTemperature adds v to the "temperature" field.
func (u *MetarUpsert) AddTemperature(v float64) *MetarUpsert {
	u.Add(metar.FieldTemperature, v)
	return u
}

// SetDewpoint sets the "dewpoint" field.
func (u *MetarUpsert) SetDewpoint(v float64) *MetarUpsert {
	u.Set(metar.FieldDewpoint, v)
	return u
}

// UpdateDewpoint sets the "dewpoint" field to the value that was provided on create.
func (u *MetarUpsert) UpdateDewpoint() *MetarUpsert {
	u.SetExcluded(metar.FieldDewpoint)
	return u
}

// AddDewpoint adds v to the "dewpoint" field.
func (u *MetarUpsert) AddDewpoint(v float64) *MetarUpsert {
	u.Add(metar.FieldDewpoint, v)
	return u
}

// SetWindSpeed sets the "wind_speed" field.
func (u *MetarUpsert) SetWindSpeed(v int) *MetarUpsert {
	u.Set(metar.FieldWindSpeed, v)
	return u
}

// UpdateWindSpeed sets the "wind_speed" field to the value that was provided on create.
func (u *MetarUpsert) UpdateWindSpeed() *MetarUpsert {
	u.SetExcluded(metar.FieldWindSpeed)
	return u
}

// AddWindSpeed adds v to the "wind_speed" field.
func (u *MetarUpsert) AddWindSpeed(v int) *MetarUpsert {
	u.Add(metar.FieldWindSpeed, v)
	return u
}

// SetWindGust sets the "wind_gust" field.
func (u *MetarUpsert) SetWindGust(v int) *MetarUpsert {
	u.Set(metar.FieldWindGust, v)
	return u
}

// UpdateWindGust sets the "wind_gust" field to the value that was provided on create.
func (u *MetarUpsert) UpdateWindGust() *MetarUpsert {
	u.SetExcluded(metar.FieldWindGust)
	return u
}

// AddWindGust adds v to the "wind_gust" field.
func (u *MetarUpsert) AddWindGust(v int) *MetarUpsert {
	u.Add(metar.FieldWindGust, v)
	return u
}

// SetWindDirection sets the "wind_direction" field.
func (u *MetarUpsert) SetWindDirection(v int) *MetarUpsert {
	u.Set(metar.FieldWindDirection, v)
	return u
}

// UpdateWindDirection sets the "wind_direction" field to the value that was provided on create.
func (u *MetarUpsert) UpdateWindDirection() *MetarUpsert {
	u.SetExcluded(metar.FieldWindDirection)
	return u
}

// AddWindDirection adds v to the "wind_direction" field.
func (u *MetarUpsert) AddWindDirection(v int) *MetarUpsert {
	u.Add(metar.FieldWindDirection, v)
	return u
}

// SetVisibility sets the "visibility" field.
func (u *MetarUpsert) SetVisibility(v float64) *MetarUpsert {
	u.Set(metar.FieldVisibility, v)
	return u
}

// UpdateVisibility sets the "visibility" field to the value that was provided on create.
func (u *MetarUpsert) UpdateVisibility() *MetarUpsert {
	u.SetExcluded(metar.FieldVisibility)
	return u
}

// AddVisibility adds v to the "visibility" field.
func (u *MetarUpsert) AddVisibility(v float64) *MetarUpsert {
	u.Add(metar.FieldVisibility, v)
	return u
}

// SetAltimeter sets the "altimeter" field.
func (u *MetarUpsert) SetAltimeter(v float64) *MetarUpsert {
	u.Set(metar.FieldAltimeter, v)
	return u
}

// UpdateAltimeter sets the "altimeter" field to the value that was provided on create.
func (u *MetarUpsert) UpdateAltimeter() *MetarUpsert {
	u.SetExcluded(metar.FieldAltimeter)
	return u
}

// AddAltimeter adds v to the "altimeter" field.
func (u *MetarUpsert) AddAltimeter(v float64) *MetarUpsert {
	u.Add(metar.FieldAltimeter, v)
	return u
}

// SetPresentWeather sets the "present_weather" field.
func (u *MetarUpsert) SetPresentWeather(v string) *MetarUpsert {
	u.Set(metar.FieldPresentWeather, v)
	return u
}

// UpdatePresentWeather sets the "present_weather" field to the value that was provided on create.
func (u *MetarUpsert) UpdatePresentWeather() *MetarUpsert {
	u.SetExcluded(metar.FieldPresentWeather)
	return u
}

// ClearPresentWeather clears the value of the "present_weather" field.
func (u *MetarUpsert) ClearPresentWeather() *MetarUpsert {
	u.SetNull(metar.FieldPresentWeather)
	return u
}

// SetFlightCategory sets the "flight_category" field.
func (u *MetarUpsert) SetFlightCategory(v metar.FlightCategory) *MetarUpsert {
	u.Set(metar.FieldFlightCategory, v)
	return u
}

// UpdateFlightCategory sets the "flight_category" field to the value that was provided on create.
func (u *MetarUpsert) UpdateFlightCategory() *MetarUpsert {
	u.SetExcluded(metar.FieldFlightCategory)
	return u
}

// ClearFlightCategory clears the value of the "flight_category" field.
func (u *MetarUpsert) ClearFlightCategory() *MetarUpsert {
	u.SetNull(metar.FieldFlightCategory)
	return u
}

// SetQualityControlCorrected sets the "quality_control_corrected" field.
func (u *MetarUpsert) SetQualityControlCorrected(v bool) *MetarUpsert {
	u.Set(metar.FieldQualityControlCorrected, v)
	return u
}

// UpdateQualityControlCorrected sets the "quality_control_corrected" field to the value that was provided on create.
func (u *MetarUpsert) UpdateQualityControlCorrected() *MetarUpsert {
	u.SetExcluded(metar.FieldQualityControlCorrected)
	return u
}

// ClearQualityControlCorrected clears the value of the "quality_control_corrected" field.
func (u *MetarUpsert) ClearQualityControlCorrected() *MetarUpsert {
	u.SetNull(metar.FieldQualityControlCorrected)
	return u
}

// SetQualityControlAutoStation sets the "quality_control_auto_station" field.
func (u *MetarUpsert) SetQualityControlAutoStation(v bool) *MetarUpsert {
	u.Set(metar.FieldQualityControlAutoStation, v)
	return u
}

// UpdateQualityControlAutoStation sets the "quality_control_auto_station" field to the value that was provided on create.
func (u *MetarUpsert) UpdateQualityControlAutoStation() *MetarUpsert {
	u.SetExcluded(metar.FieldQualityControlAutoStation)
	return u
}

// SetQualityControlMaintenanceIndicatorOn sets the "quality_control_maintenance_indicator_on" field.
func (u *MetarUpsert) SetQualityControlMaintenanceIndicatorOn(v bool) *MetarUpsert {
	u.Set(metar.FieldQualityControlMaintenanceIndicatorOn, v)
	return u
}

// UpdateQualityControlMaintenanceIndicatorOn sets the "quality_control_maintenance_indicator_on" field to the value that was provided on create.
func (u *MetarUpsert) UpdateQualityControlMaintenanceIndicatorOn() *MetarUpsert {
	u.SetExcluded(metar.FieldQualityControlMaintenanceIndicatorOn)
	return u
}

// SetQualityControlNoSignal sets the "quality_control_no_signal" field.
func (u *MetarUpsert) SetQualityControlNoSignal(v bool) *MetarUpsert {
	u.Set(metar.FieldQualityControlNoSignal, v)
	return u
}

// UpdateQualityControlNoSignal sets the "quality_control_no_signal" field to the value that was provided on create.
func (u *MetarUpsert) UpdateQualityControlNoSignal() *MetarUpsert {
	u.SetExcluded(metar.FieldQualityControlNoSignal)
	return u
}

// SetQualityControlLightningSensorOff sets the "quality_control_lightning_sensor_off" field.
func (u *MetarUpsert) SetQualityControlLightningSensorOff(v bool) *MetarUpsert {
	u.Set(metar.FieldQualityControlLightningSensorOff, v)
	return u
}

// UpdateQualityControlLightningSensorOff sets the "quality_control_lightning_sensor_off" field to the value that was provided on create.
func (u *MetarUpsert) UpdateQualityControlLightningSensorOff() *MetarUpsert {
	u.SetExcluded(metar.FieldQualityControlLightningSensorOff)
	return u
}

// SetQualityControlFreezingRainSensorOff sets the "quality_control_freezing_rain_sensor_off" field.
func (u *MetarUpsert) SetQualityControlFreezingRainSensorOff(v bool) *MetarUpsert {
	u.Set(metar.FieldQualityControlFreezingRainSensorOff, v)
	return u
}

// UpdateQualityControlFreezingRainSensorOff sets the "quality_control_freezing_rain_sensor_off" field to the value that was provided on create.
func (u *MetarUpsert) UpdateQualityControlFreezingRainSensorOff() *MetarUpsert {
	u.SetExcluded(metar.FieldQualityControlFreezingRainSensorOff)
	return u
}

// SetQualityControlPresentWeatherSensorOff sets the "quality_control_present_weather_sensor_off" field.
func (u *MetarUpsert) SetQualityControlPresentWeatherSensorOff(v bool) *MetarUpsert {
	u.Set(metar.FieldQualityControlPresentWeatherSensorOff, v)
	return u
}

// UpdateQualityControlPresentWeatherSensorOff sets the "quality_control_present_weather_sensor_off" field to the value that was provided on create.
func (u *MetarUpsert) UpdateQualityControlPresentWeatherSensorOff() *MetarUpsert {
	u.SetExcluded(metar.FieldQualityControlPresentWeatherSensorOff)
	return u
}

// SetSeaLevelPressure sets the "sea_level_pressure" field.
func (u *MetarUpsert) SetSeaLevelPressure(v float64) *MetarUpsert {
	u.Set(metar.FieldSeaLevelPressure, v)
	return u
}

// UpdateSeaLevelPressure sets the "sea_level_pressure" field to the value that was provided on create.
func (u *MetarUpsert) UpdateSeaLevelPressure() *MetarUpsert {
	u.SetExcluded(metar.FieldSeaLevelPressure)
	return u
}

// AddSeaLevelPressure adds v to the "sea_level_pressure" field.
func (u *MetarUpsert) AddSeaLevelPressure(v float64) *MetarUpsert {
	u.Add(metar.FieldSeaLevelPressure, v)
	return u
}

// ClearSeaLevelPressure clears the value of the "sea_level_pressure" field.
func (u *MetarUpsert) ClearSeaLevelPressure() *MetarUpsert {
	u.SetNull(metar.FieldSeaLevelPressure)
	return u
}

// SetPressureTendency sets the "pressure_tendency" field.
func (u *MetarUpsert) SetPressureTendency(v float64) *MetarUpsert {
	u.Set(metar.FieldPressureTendency, v)
	return u
}

// UpdatePressureTendency sets the "pressure_tendency" field to the value that was provided on create.
func (u *MetarUpsert) UpdatePressureTendency() *MetarUpsert {
	u.SetExcluded(metar.FieldPressureTendency)
	return u
}

// AddPressureTendency adds v to the "pressure_tendency" field.
func (u *MetarUpsert) AddPressureTendency(v float64) *MetarUpsert {
	u.Add(metar.FieldPressureTendency, v)
	return u
}

// ClearPressureTendency clears the value of the "pressure_tendency" field.
func (u *MetarUpsert) ClearPressureTendency() *MetarUpsert {
	u.SetNull(metar.FieldPressureTendency)
	return u
}

// SetMaxTemp6 sets the "max_temp_6" field.
func (u *MetarUpsert) SetMaxTemp6(v float64) *MetarUpsert {
	u.Set(metar.FieldMaxTemp6, v)
	return u
}

// UpdateMaxTemp6 sets the "max_temp_6" field to the value that was provided on create.
func (u *MetarUpsert) UpdateMaxTemp6() *MetarUpsert {
	u.SetExcluded(metar.FieldMaxTemp6)
	return u
}

// AddMaxTemp6 adds v to the "max_temp_6" field.
func (u *MetarUpsert) AddMaxTemp6(v float64) *MetarUpsert {
	u.Add(metar.FieldMaxTemp6, v)
	return u
}

// ClearMaxTemp6 clears the value of the "max_temp_6" field.
func (u *MetarUpsert) ClearMaxTemp6() *MetarUpsert {
	u.SetNull(metar.FieldMaxTemp6)
	return u
}

// SetMinTemp6 sets the "min_temp_6" field.
func (u *MetarUpsert) SetMinTemp6(v float64) *MetarUpsert {
	u.Set(metar.FieldMinTemp6, v)
	return u
}

// UpdateMinTemp6 sets the "min_temp_6" field to the value that was provided on create.
func (u *MetarUpsert) UpdateMinTemp6() *MetarUpsert {
	u.SetExcluded(metar.FieldMinTemp6)
	return u
}

// AddMinTemp6 adds v to the "min_temp_6" field.
func (u *MetarUpsert) AddMinTemp6(v float64) *MetarUpsert {
	u.Add(metar.FieldMinTemp6, v)
	return u
}

// ClearMinTemp6 clears the value of the "min_temp_6" field.
func (u *MetarUpsert) ClearMinTemp6() *MetarUpsert {
	u.SetNull(metar.FieldMinTemp6)
	return u
}

// SetMaxTemp24 sets the "max_temp_24" field.
func (u *MetarUpsert) SetMaxTemp24(v float64) *MetarUpsert {
	u.Set(metar.FieldMaxTemp24, v)
	return u
}

// UpdateMaxTemp24 sets the "max_temp_24" field to the value that was provided on create.
func (u *MetarUpsert) UpdateMaxTemp24() *MetarUpsert {
	u.SetExcluded(metar.FieldMaxTemp24)
	return u
}

// AddMaxTemp24 adds v to the "max_temp_24" field.
func (u *MetarUpsert) AddMaxTemp24(v float64) *MetarUpsert {
	u.Add(metar.FieldMaxTemp24, v)
	return u
}

// ClearMaxTemp24 clears the value of the "max_temp_24" field.
func (u *MetarUpsert) ClearMaxTemp24() *MetarUpsert {
	u.SetNull(metar.FieldMaxTemp24)
	return u
}

// SetMinTemp24 sets the "min_temp_24" field.
func (u *MetarUpsert) SetMinTemp24(v float64) *MetarUpsert {
	u.Set(metar.FieldMinTemp24, v)
	return u
}

// UpdateMinTemp24 sets the "min_temp_24" field to the value that was provided on create.
func (u *MetarUpsert) UpdateMinTemp24() *MetarUpsert {
	u.SetExcluded(metar.FieldMinTemp24)
	return u
}

// AddMinTemp24 adds v to the "min_temp_24" field.
func (u *MetarUpsert) AddMinTemp24(v float64) *MetarUpsert {
	u.Add(metar.FieldMinTemp24, v)
	return u
}

// ClearMinTemp24 clears the value of the "min_temp_24" field.
func (u *MetarUpsert) ClearMinTemp24() *MetarUpsert {
	u.SetNull(metar.FieldMinTemp24)
	return u
}

// SetPrecipitation sets the "precipitation" field.
func (u *MetarUpsert) SetPrecipitation(v float64) *MetarUpsert {
	u.Set(metar.FieldPrecipitation, v)
	return u
}

// UpdatePrecipitation sets the "precipitation" field to the value that was provided on create.
func (u *MetarUpsert) UpdatePrecipitation() *MetarUpsert {
	u.SetExcluded(metar.FieldPrecipitation)
	return u
}

// AddPrecipitation adds v to the "precipitation" field.
func (u *MetarUpsert) AddPrecipitation(v float64) *MetarUpsert {
	u.Add(metar.FieldPrecipitation, v)
	return u
}

// ClearPrecipitation clears the value of the "precipitation" field.
func (u *MetarUpsert) ClearPrecipitation() *MetarUpsert {
	u.SetNull(metar.FieldPrecipitation)
	return u
}

// SetPrecipitation3 sets the "precipitation_3" field.
func (u *MetarUpsert) SetPrecipitation3(v float64) *MetarUpsert {
	u.Set(metar.FieldPrecipitation3, v)
	return u
}

// UpdatePrecipitation3 sets the "precipitation_3" field to the value that was provided on create.
func (u *MetarUpsert) UpdatePrecipitation3() *MetarUpsert {
	u.SetExcluded(metar.FieldPrecipitation3)
	return u
}

// AddPrecipitation3 adds v to the "precipitation_3" field.
func (u *MetarUpsert) AddPrecipitation3(v float64) *MetarUpsert {
	u.Add(metar.FieldPrecipitation3, v)
	return u
}

// ClearPrecipitation3 clears the value of the "precipitation_3" field.
func (u *MetarUpsert) ClearPrecipitation3() *MetarUpsert {
	u.SetNull(metar.FieldPrecipitation3)
	return u
}

// SetPrecipitation6 sets the "precipitation_6" field.
func (u *MetarUpsert) SetPrecipitation6(v float64) *MetarUpsert {
	u.Set(metar.FieldPrecipitation6, v)
	return u
}

// UpdatePrecipitation6 sets the "precipitation_6" field to the value that was provided on create.
func (u *MetarUpsert) UpdatePrecipitation6() *MetarUpsert {
	u.SetExcluded(metar.FieldPrecipitation6)
	return u
}

// AddPrecipitation6 adds v to the "precipitation_6" field.
func (u *MetarUpsert) AddPrecipitation6(v float64) *MetarUpsert {
	u.Add(metar.FieldPrecipitation6, v)
	return u
}

// ClearPrecipitation6 clears the value of the "precipitation_6" field.
func (u *MetarUpsert) ClearPrecipitation6() *MetarUpsert {
	u.SetNull(metar.FieldPrecipitation6)
	return u
}

// SetPrecipitation24 sets the "precipitation_24" field.
func (u *MetarUpsert) SetPrecipitation24(v float64) *MetarUpsert {
	u.Set(metar.FieldPrecipitation24, v)
	return u
}

// UpdatePrecipitation24 sets the "precipitation_24" field to the value that was provided on create.
func (u *MetarUpsert) UpdatePrecipitation24() *MetarUpsert {
	u.SetExcluded(metar.FieldPrecipitation24)
	return u
}

// AddPrecipitation24 adds v to the "precipitation_24" field.
func (u *MetarUpsert) AddPrecipitation24(v float64) *MetarUpsert {
	u.Add(metar.FieldPrecipitation24, v)
	return u
}

// ClearPrecipitation24 clears the value of the "precipitation_24" field.
func (u *MetarUpsert) ClearPrecipitation24() *MetarUpsert {
	u.SetNull(metar.FieldPrecipitation24)
	return u
}

// SetSnowDepth sets the "snow_depth" field.
func (u *MetarUpsert) SetSnowDepth(v float64) *MetarUpsert {
	u.Set(metar.FieldSnowDepth, v)
	return u
}

// UpdateSnowDepth sets the "snow_depth" field to the value that was provided on create.
func (u *MetarUpsert) UpdateSnowDepth() *MetarUpsert {
	u.SetExcluded(metar.FieldSnowDepth)
	return u
}

// AddSnowDepth adds v to the "snow_depth" field.
func (u *MetarUpsert) AddSnowDepth(v float64) *MetarUpsert {
	u.Add(metar.FieldSnowDepth, v)
	return u
}

// ClearSnowDepth clears the value of the "snow_depth" field.
func (u *MetarUpsert) ClearSnowDepth() *MetarUpsert {
	u.SetNull(metar.FieldSnowDepth)
	return u
}

// SetVertVis sets the "vert_vis" field.
func (u *MetarUpsert) SetVertVis(v float64) *MetarUpsert {
	u.Set(metar.FieldVertVis, v)
	return u
}

// UpdateVertVis sets the "vert_vis" field to the value that was provided on create.
func (u *MetarUpsert) UpdateVertVis() *MetarUpsert {
	u.SetExcluded(metar.FieldVertVis)
	return u
}

// AddVertVis adds v to the "vert_vis" field.
func (u *MetarUpsert) AddVertVis(v float64) *MetarUpsert {
	u.Add(metar.FieldVertVis, v)
	return u
}

// ClearVertVis clears the value of the "vert_vis" field.
func (u *MetarUpsert) ClearVertVis() *MetarUpsert {
	u.SetNull(metar.FieldVertVis)
	return u
}

// SetMetarType sets the "metar_type" field.
func (u *MetarUpsert) SetMetarType(v metar.MetarType) *MetarUpsert {
	u.Set(metar.FieldMetarType, v)
	return u
}

// UpdateMetarType sets the "metar_type" field to the value that was provided on create.
func (u *MetarUpsert) UpdateMetarType() *MetarUpsert {
	u.SetExcluded(metar.FieldMetarType)
	return u
}

// SetHash sets the "hash" field.
func (u *MetarUpsert) SetHash(v string) *MetarUpsert {
	u.Set(metar.FieldHash, v)
	return u
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *MetarUpsert) UpdateHash() *MetarUpsert {
	u.SetExcluded(metar.FieldHash)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Metar.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(metar.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MetarUpsertOne) UpdateNewValues() *MetarUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(metar.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Metar.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MetarUpsertOne) Ignore() *MetarUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MetarUpsertOne) DoNothing() *MetarUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MetarCreate.OnConflict
// documentation for more info.
func (u *MetarUpsertOne) Update(set func(*MetarUpsert)) *MetarUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MetarUpsert{UpdateSet: update})
	}))
	return u
}

// SetRawText sets the "raw_text" field.
func (u *MetarUpsertOne) SetRawText(v string) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetRawText(v)
	})
}

// UpdateRawText sets the "raw_text" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateRawText() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateRawText()
	})
}

// SetObservationTime sets the "observation_time" field.
func (u *MetarUpsertOne) SetObservationTime(v time.Time) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetObservationTime(v)
	})
}

// UpdateObservationTime sets the "observation_time" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateObservationTime() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateObservationTime()
	})
}

// SetImportTime sets the "import_time" field.
func (u *MetarUpsertOne) SetImportTime(v time.Time) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetImportTime(v)
	})
}

// UpdateImportTime sets the "import_time" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateImportTime() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateImportTime()
	})
}

// SetNextImportTimePrediction sets the "next_import_time_prediction" field.
func (u *MetarUpsertOne) SetNextImportTimePrediction(v time.Time) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetNextImportTimePrediction(v)
	})
}

// UpdateNextImportTimePrediction sets the "next_import_time_prediction" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateNextImportTimePrediction() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateNextImportTimePrediction()
	})
}

// ClearNextImportTimePrediction clears the value of the "next_import_time_prediction" field.
func (u *MetarUpsertOne) ClearNextImportTimePrediction() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.ClearNextImportTimePrediction()
	})
}

// SetTemperature sets the "temperature" field.
func (u *MetarUpsertOne) SetTemperature(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetTemperature(v)
	})
}

// AddTemperature adds v to the "temperature" field.
func (u *MetarUpsertOne) AddTemperature(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.AddTemperature(v)
	})
}

// UpdateTemperature sets the "temperature" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateTemperature() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateTemperature()
	})
}

// SetDewpoint sets the "dewpoint" field.
func (u *MetarUpsertOne) SetDewpoint(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetDewpoint(v)
	})
}

// AddDewpoint adds v to the "dewpoint" field.
func (u *MetarUpsertOne) AddDewpoint(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.AddDewpoint(v)
	})
}

// UpdateDewpoint sets the "dewpoint" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateDewpoint() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateDewpoint()
	})
}

// SetWindSpeed sets the "wind_speed" field.
func (u *MetarUpsertOne) SetWindSpeed(v int) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetWindSpeed(v)
	})
}

// AddWindSpeed adds v to the "wind_speed" field.
func (u *MetarUpsertOne) AddWindSpeed(v int) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.AddWindSpeed(v)
	})
}

// UpdateWindSpeed sets the "wind_speed" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateWindSpeed() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateWindSpeed()
	})
}

// SetWindGust sets the "wind_gust" field.
func (u *MetarUpsertOne) SetWindGust(v int) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetWindGust(v)
	})
}

// AddWindGust adds v to the "wind_gust" field.
func (u *MetarUpsertOne) AddWindGust(v int) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.AddWindGust(v)
	})
}

// UpdateWindGust sets the "wind_gust" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateWindGust() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateWindGust()
	})
}

// SetWindDirection sets the "wind_direction" field.
func (u *MetarUpsertOne) SetWindDirection(v int) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetWindDirection(v)
	})
}

// AddWindDirection adds v to the "wind_direction" field.
func (u *MetarUpsertOne) AddWindDirection(v int) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.AddWindDirection(v)
	})
}

// UpdateWindDirection sets the "wind_direction" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateWindDirection() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateWindDirection()
	})
}

// SetVisibility sets the "visibility" field.
func (u *MetarUpsertOne) SetVisibility(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetVisibility(v)
	})
}

// AddVisibility adds v to the "visibility" field.
func (u *MetarUpsertOne) AddVisibility(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.AddVisibility(v)
	})
}

// UpdateVisibility sets the "visibility" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateVisibility() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateVisibility()
	})
}

// SetAltimeter sets the "altimeter" field.
func (u *MetarUpsertOne) SetAltimeter(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetAltimeter(v)
	})
}

// AddAltimeter adds v to the "altimeter" field.
func (u *MetarUpsertOne) AddAltimeter(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.AddAltimeter(v)
	})
}

// UpdateAltimeter sets the "altimeter" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateAltimeter() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateAltimeter()
	})
}

// SetPresentWeather sets the "present_weather" field.
func (u *MetarUpsertOne) SetPresentWeather(v string) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetPresentWeather(v)
	})
}

// UpdatePresentWeather sets the "present_weather" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdatePresentWeather() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdatePresentWeather()
	})
}

// ClearPresentWeather clears the value of the "present_weather" field.
func (u *MetarUpsertOne) ClearPresentWeather() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.ClearPresentWeather()
	})
}

// SetFlightCategory sets the "flight_category" field.
func (u *MetarUpsertOne) SetFlightCategory(v metar.FlightCategory) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetFlightCategory(v)
	})
}

// UpdateFlightCategory sets the "flight_category" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateFlightCategory() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateFlightCategory()
	})
}

// ClearFlightCategory clears the value of the "flight_category" field.
func (u *MetarUpsertOne) ClearFlightCategory() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.ClearFlightCategory()
	})
}

// SetQualityControlCorrected sets the "quality_control_corrected" field.
func (u *MetarUpsertOne) SetQualityControlCorrected(v bool) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetQualityControlCorrected(v)
	})
}

// UpdateQualityControlCorrected sets the "quality_control_corrected" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateQualityControlCorrected() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateQualityControlCorrected()
	})
}

// ClearQualityControlCorrected clears the value of the "quality_control_corrected" field.
func (u *MetarUpsertOne) ClearQualityControlCorrected() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.ClearQualityControlCorrected()
	})
}

// SetQualityControlAutoStation sets the "quality_control_auto_station" field.
func (u *MetarUpsertOne) SetQualityControlAutoStation(v bool) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetQualityControlAutoStation(v)
	})
}

// UpdateQualityControlAutoStation sets the "quality_control_auto_station" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateQualityControlAutoStation() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateQualityControlAutoStation()
	})
}

// SetQualityControlMaintenanceIndicatorOn sets the "quality_control_maintenance_indicator_on" field.
func (u *MetarUpsertOne) SetQualityControlMaintenanceIndicatorOn(v bool) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetQualityControlMaintenanceIndicatorOn(v)
	})
}

// UpdateQualityControlMaintenanceIndicatorOn sets the "quality_control_maintenance_indicator_on" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateQualityControlMaintenanceIndicatorOn() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateQualityControlMaintenanceIndicatorOn()
	})
}

// SetQualityControlNoSignal sets the "quality_control_no_signal" field.
func (u *MetarUpsertOne) SetQualityControlNoSignal(v bool) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetQualityControlNoSignal(v)
	})
}

// UpdateQualityControlNoSignal sets the "quality_control_no_signal" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateQualityControlNoSignal() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateQualityControlNoSignal()
	})
}

// SetQualityControlLightningSensorOff sets the "quality_control_lightning_sensor_off" field.
func (u *MetarUpsertOne) SetQualityControlLightningSensorOff(v bool) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetQualityControlLightningSensorOff(v)
	})
}

// UpdateQualityControlLightningSensorOff sets the "quality_control_lightning_sensor_off" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateQualityControlLightningSensorOff() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateQualityControlLightningSensorOff()
	})
}

// SetQualityControlFreezingRainSensorOff sets the "quality_control_freezing_rain_sensor_off" field.
func (u *MetarUpsertOne) SetQualityControlFreezingRainSensorOff(v bool) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetQualityControlFreezingRainSensorOff(v)
	})
}

// UpdateQualityControlFreezingRainSensorOff sets the "quality_control_freezing_rain_sensor_off" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateQualityControlFreezingRainSensorOff() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateQualityControlFreezingRainSensorOff()
	})
}

// SetQualityControlPresentWeatherSensorOff sets the "quality_control_present_weather_sensor_off" field.
func (u *MetarUpsertOne) SetQualityControlPresentWeatherSensorOff(v bool) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetQualityControlPresentWeatherSensorOff(v)
	})
}

// UpdateQualityControlPresentWeatherSensorOff sets the "quality_control_present_weather_sensor_off" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateQualityControlPresentWeatherSensorOff() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateQualityControlPresentWeatherSensorOff()
	})
}

// SetSeaLevelPressure sets the "sea_level_pressure" field.
func (u *MetarUpsertOne) SetSeaLevelPressure(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetSeaLevelPressure(v)
	})
}

// AddSeaLevelPressure adds v to the "sea_level_pressure" field.
func (u *MetarUpsertOne) AddSeaLevelPressure(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.AddSeaLevelPressure(v)
	})
}

// UpdateSeaLevelPressure sets the "sea_level_pressure" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateSeaLevelPressure() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateSeaLevelPressure()
	})
}

// ClearSeaLevelPressure clears the value of the "sea_level_pressure" field.
func (u *MetarUpsertOne) ClearSeaLevelPressure() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.ClearSeaLevelPressure()
	})
}

// SetPressureTendency sets the "pressure_tendency" field.
func (u *MetarUpsertOne) SetPressureTendency(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetPressureTendency(v)
	})
}

// AddPressureTendency adds v to the "pressure_tendency" field.
func (u *MetarUpsertOne) AddPressureTendency(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.AddPressureTendency(v)
	})
}

// UpdatePressureTendency sets the "pressure_tendency" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdatePressureTendency() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdatePressureTendency()
	})
}

// ClearPressureTendency clears the value of the "pressure_tendency" field.
func (u *MetarUpsertOne) ClearPressureTendency() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.ClearPressureTendency()
	})
}

// SetMaxTemp6 sets the "max_temp_6" field.
func (u *MetarUpsertOne) SetMaxTemp6(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetMaxTemp6(v)
	})
}

// AddMaxTemp6 adds v to the "max_temp_6" field.
func (u *MetarUpsertOne) AddMaxTemp6(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.AddMaxTemp6(v)
	})
}

// UpdateMaxTemp6 sets the "max_temp_6" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateMaxTemp6() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateMaxTemp6()
	})
}

// ClearMaxTemp6 clears the value of the "max_temp_6" field.
func (u *MetarUpsertOne) ClearMaxTemp6() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.ClearMaxTemp6()
	})
}

// SetMinTemp6 sets the "min_temp_6" field.
func (u *MetarUpsertOne) SetMinTemp6(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetMinTemp6(v)
	})
}

// AddMinTemp6 adds v to the "min_temp_6" field.
func (u *MetarUpsertOne) AddMinTemp6(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.AddMinTemp6(v)
	})
}

// UpdateMinTemp6 sets the "min_temp_6" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateMinTemp6() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateMinTemp6()
	})
}

// ClearMinTemp6 clears the value of the "min_temp_6" field.
func (u *MetarUpsertOne) ClearMinTemp6() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.ClearMinTemp6()
	})
}

// SetMaxTemp24 sets the "max_temp_24" field.
func (u *MetarUpsertOne) SetMaxTemp24(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetMaxTemp24(v)
	})
}

// AddMaxTemp24 adds v to the "max_temp_24" field.
func (u *MetarUpsertOne) AddMaxTemp24(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.AddMaxTemp24(v)
	})
}

// UpdateMaxTemp24 sets the "max_temp_24" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateMaxTemp24() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateMaxTemp24()
	})
}

// ClearMaxTemp24 clears the value of the "max_temp_24" field.
func (u *MetarUpsertOne) ClearMaxTemp24() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.ClearMaxTemp24()
	})
}

// SetMinTemp24 sets the "min_temp_24" field.
func (u *MetarUpsertOne) SetMinTemp24(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetMinTemp24(v)
	})
}

// AddMinTemp24 adds v to the "min_temp_24" field.
func (u *MetarUpsertOne) AddMinTemp24(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.AddMinTemp24(v)
	})
}

// UpdateMinTemp24 sets the "min_temp_24" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateMinTemp24() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateMinTemp24()
	})
}

// ClearMinTemp24 clears the value of the "min_temp_24" field.
func (u *MetarUpsertOne) ClearMinTemp24() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.ClearMinTemp24()
	})
}

// SetPrecipitation sets the "precipitation" field.
func (u *MetarUpsertOne) SetPrecipitation(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetPrecipitation(v)
	})
}

// AddPrecipitation adds v to the "precipitation" field.
func (u *MetarUpsertOne) AddPrecipitation(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.AddPrecipitation(v)
	})
}

// UpdatePrecipitation sets the "precipitation" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdatePrecipitation() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdatePrecipitation()
	})
}

// ClearPrecipitation clears the value of the "precipitation" field.
func (u *MetarUpsertOne) ClearPrecipitation() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.ClearPrecipitation()
	})
}

// SetPrecipitation3 sets the "precipitation_3" field.
func (u *MetarUpsertOne) SetPrecipitation3(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetPrecipitation3(v)
	})
}

// AddPrecipitation3 adds v to the "precipitation_3" field.
func (u *MetarUpsertOne) AddPrecipitation3(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.AddPrecipitation3(v)
	})
}

// UpdatePrecipitation3 sets the "precipitation_3" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdatePrecipitation3() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdatePrecipitation3()
	})
}

// ClearPrecipitation3 clears the value of the "precipitation_3" field.
func (u *MetarUpsertOne) ClearPrecipitation3() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.ClearPrecipitation3()
	})
}

// SetPrecipitation6 sets the "precipitation_6" field.
func (u *MetarUpsertOne) SetPrecipitation6(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetPrecipitation6(v)
	})
}

// AddPrecipitation6 adds v to the "precipitation_6" field.
func (u *MetarUpsertOne) AddPrecipitation6(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.AddPrecipitation6(v)
	})
}

// UpdatePrecipitation6 sets the "precipitation_6" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdatePrecipitation6() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdatePrecipitation6()
	})
}

// ClearPrecipitation6 clears the value of the "precipitation_6" field.
func (u *MetarUpsertOne) ClearPrecipitation6() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.ClearPrecipitation6()
	})
}

// SetPrecipitation24 sets the "precipitation_24" field.
func (u *MetarUpsertOne) SetPrecipitation24(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetPrecipitation24(v)
	})
}

// AddPrecipitation24 adds v to the "precipitation_24" field.
func (u *MetarUpsertOne) AddPrecipitation24(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.AddPrecipitation24(v)
	})
}

// UpdatePrecipitation24 sets the "precipitation_24" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdatePrecipitation24() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdatePrecipitation24()
	})
}

// ClearPrecipitation24 clears the value of the "precipitation_24" field.
func (u *MetarUpsertOne) ClearPrecipitation24() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.ClearPrecipitation24()
	})
}

// SetSnowDepth sets the "snow_depth" field.
func (u *MetarUpsertOne) SetSnowDepth(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetSnowDepth(v)
	})
}

// AddSnowDepth adds v to the "snow_depth" field.
func (u *MetarUpsertOne) AddSnowDepth(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.AddSnowDepth(v)
	})
}

// UpdateSnowDepth sets the "snow_depth" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateSnowDepth() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateSnowDepth()
	})
}

// ClearSnowDepth clears the value of the "snow_depth" field.
func (u *MetarUpsertOne) ClearSnowDepth() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.ClearSnowDepth()
	})
}

// SetVertVis sets the "vert_vis" field.
func (u *MetarUpsertOne) SetVertVis(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetVertVis(v)
	})
}

// AddVertVis adds v to the "vert_vis" field.
func (u *MetarUpsertOne) AddVertVis(v float64) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.AddVertVis(v)
	})
}

// UpdateVertVis sets the "vert_vis" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateVertVis() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateVertVis()
	})
}

// ClearVertVis clears the value of the "vert_vis" field.
func (u *MetarUpsertOne) ClearVertVis() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.ClearVertVis()
	})
}

// SetMetarType sets the "metar_type" field.
func (u *MetarUpsertOne) SetMetarType(v metar.MetarType) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetMetarType(v)
	})
}

// UpdateMetarType sets the "metar_type" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateMetarType() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateMetarType()
	})
}

// SetHash sets the "hash" field.
func (u *MetarUpsertOne) SetHash(v string) *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *MetarUpsertOne) UpdateHash() *MetarUpsertOne {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateHash()
	})
}

// Exec executes the query.
func (u *MetarUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MetarCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MetarUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MetarUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MetarUpsertOne.ID is not supported by MySQL driver. Use MetarUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MetarUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MetarCreateBulk is the builder for creating many Metar entities in bulk.
type MetarCreateBulk struct {
	config
	builders []*MetarCreate
	conflict []sql.ConflictOption
}

// Save creates the Metar entities in the database.
func (mcb *MetarCreateBulk) Save(ctx context.Context) ([]*Metar, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Metar, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MetarMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MetarCreateBulk) SaveX(ctx context.Context) []*Metar {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MetarCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MetarCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Metar.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MetarUpsert) {
//			SetRawText(v+v).
//		}).
//		Exec(ctx)
func (mcb *MetarCreateBulk) OnConflict(opts ...sql.ConflictOption) *MetarUpsertBulk {
	mcb.conflict = opts
	return &MetarUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Metar.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MetarCreateBulk) OnConflictColumns(columns ...string) *MetarUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MetarUpsertBulk{
		create: mcb,
	}
}

// MetarUpsertBulk is the builder for "upsert"-ing
// a bulk of Metar nodes.
type MetarUpsertBulk struct {
	create *MetarCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Metar.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(metar.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MetarUpsertBulk) UpdateNewValues() *MetarUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(metar.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Metar.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MetarUpsertBulk) Ignore() *MetarUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MetarUpsertBulk) DoNothing() *MetarUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MetarCreateBulk.OnConflict
// documentation for more info.
func (u *MetarUpsertBulk) Update(set func(*MetarUpsert)) *MetarUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MetarUpsert{UpdateSet: update})
	}))
	return u
}

// SetRawText sets the "raw_text" field.
func (u *MetarUpsertBulk) SetRawText(v string) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetRawText(v)
	})
}

// UpdateRawText sets the "raw_text" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateRawText() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateRawText()
	})
}

// SetObservationTime sets the "observation_time" field.
func (u *MetarUpsertBulk) SetObservationTime(v time.Time) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetObservationTime(v)
	})
}

// UpdateObservationTime sets the "observation_time" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateObservationTime() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateObservationTime()
	})
}

// SetImportTime sets the "import_time" field.
func (u *MetarUpsertBulk) SetImportTime(v time.Time) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetImportTime(v)
	})
}

// UpdateImportTime sets the "import_time" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateImportTime() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateImportTime()
	})
}

// SetNextImportTimePrediction sets the "next_import_time_prediction" field.
func (u *MetarUpsertBulk) SetNextImportTimePrediction(v time.Time) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetNextImportTimePrediction(v)
	})
}

// UpdateNextImportTimePrediction sets the "next_import_time_prediction" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateNextImportTimePrediction() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateNextImportTimePrediction()
	})
}

// ClearNextImportTimePrediction clears the value of the "next_import_time_prediction" field.
func (u *MetarUpsertBulk) ClearNextImportTimePrediction() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.ClearNextImportTimePrediction()
	})
}

// SetTemperature sets the "temperature" field.
func (u *MetarUpsertBulk) SetTemperature(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetTemperature(v)
	})
}

// AddTemperature adds v to the "temperature" field.
func (u *MetarUpsertBulk) AddTemperature(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.AddTemperature(v)
	})
}

// UpdateTemperature sets the "temperature" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateTemperature() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateTemperature()
	})
}

// SetDewpoint sets the "dewpoint" field.
func (u *MetarUpsertBulk) SetDewpoint(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetDewpoint(v)
	})
}

// AddDewpoint adds v to the "dewpoint" field.
func (u *MetarUpsertBulk) AddDewpoint(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.AddDewpoint(v)
	})
}

// UpdateDewpoint sets the "dewpoint" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateDewpoint() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateDewpoint()
	})
}

// SetWindSpeed sets the "wind_speed" field.
func (u *MetarUpsertBulk) SetWindSpeed(v int) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetWindSpeed(v)
	})
}

// AddWindSpeed adds v to the "wind_speed" field.
func (u *MetarUpsertBulk) AddWindSpeed(v int) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.AddWindSpeed(v)
	})
}

// UpdateWindSpeed sets the "wind_speed" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateWindSpeed() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateWindSpeed()
	})
}

// SetWindGust sets the "wind_gust" field.
func (u *MetarUpsertBulk) SetWindGust(v int) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetWindGust(v)
	})
}

// AddWindGust adds v to the "wind_gust" field.
func (u *MetarUpsertBulk) AddWindGust(v int) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.AddWindGust(v)
	})
}

// UpdateWindGust sets the "wind_gust" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateWindGust() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateWindGust()
	})
}

// SetWindDirection sets the "wind_direction" field.
func (u *MetarUpsertBulk) SetWindDirection(v int) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetWindDirection(v)
	})
}

// AddWindDirection adds v to the "wind_direction" field.
func (u *MetarUpsertBulk) AddWindDirection(v int) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.AddWindDirection(v)
	})
}

// UpdateWindDirection sets the "wind_direction" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateWindDirection() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateWindDirection()
	})
}

// SetVisibility sets the "visibility" field.
func (u *MetarUpsertBulk) SetVisibility(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetVisibility(v)
	})
}

// AddVisibility adds v to the "visibility" field.
func (u *MetarUpsertBulk) AddVisibility(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.AddVisibility(v)
	})
}

// UpdateVisibility sets the "visibility" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateVisibility() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateVisibility()
	})
}

// SetAltimeter sets the "altimeter" field.
func (u *MetarUpsertBulk) SetAltimeter(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetAltimeter(v)
	})
}

// AddAltimeter adds v to the "altimeter" field.
func (u *MetarUpsertBulk) AddAltimeter(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.AddAltimeter(v)
	})
}

// UpdateAltimeter sets the "altimeter" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateAltimeter() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateAltimeter()
	})
}

// SetPresentWeather sets the "present_weather" field.
func (u *MetarUpsertBulk) SetPresentWeather(v string) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetPresentWeather(v)
	})
}

// UpdatePresentWeather sets the "present_weather" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdatePresentWeather() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdatePresentWeather()
	})
}

// ClearPresentWeather clears the value of the "present_weather" field.
func (u *MetarUpsertBulk) ClearPresentWeather() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.ClearPresentWeather()
	})
}

// SetFlightCategory sets the "flight_category" field.
func (u *MetarUpsertBulk) SetFlightCategory(v metar.FlightCategory) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetFlightCategory(v)
	})
}

// UpdateFlightCategory sets the "flight_category" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateFlightCategory() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateFlightCategory()
	})
}

// ClearFlightCategory clears the value of the "flight_category" field.
func (u *MetarUpsertBulk) ClearFlightCategory() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.ClearFlightCategory()
	})
}

// SetQualityControlCorrected sets the "quality_control_corrected" field.
func (u *MetarUpsertBulk) SetQualityControlCorrected(v bool) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetQualityControlCorrected(v)
	})
}

// UpdateQualityControlCorrected sets the "quality_control_corrected" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateQualityControlCorrected() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateQualityControlCorrected()
	})
}

// ClearQualityControlCorrected clears the value of the "quality_control_corrected" field.
func (u *MetarUpsertBulk) ClearQualityControlCorrected() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.ClearQualityControlCorrected()
	})
}

// SetQualityControlAutoStation sets the "quality_control_auto_station" field.
func (u *MetarUpsertBulk) SetQualityControlAutoStation(v bool) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetQualityControlAutoStation(v)
	})
}

// UpdateQualityControlAutoStation sets the "quality_control_auto_station" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateQualityControlAutoStation() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateQualityControlAutoStation()
	})
}

// SetQualityControlMaintenanceIndicatorOn sets the "quality_control_maintenance_indicator_on" field.
func (u *MetarUpsertBulk) SetQualityControlMaintenanceIndicatorOn(v bool) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetQualityControlMaintenanceIndicatorOn(v)
	})
}

// UpdateQualityControlMaintenanceIndicatorOn sets the "quality_control_maintenance_indicator_on" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateQualityControlMaintenanceIndicatorOn() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateQualityControlMaintenanceIndicatorOn()
	})
}

// SetQualityControlNoSignal sets the "quality_control_no_signal" field.
func (u *MetarUpsertBulk) SetQualityControlNoSignal(v bool) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetQualityControlNoSignal(v)
	})
}

// UpdateQualityControlNoSignal sets the "quality_control_no_signal" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateQualityControlNoSignal() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateQualityControlNoSignal()
	})
}

// SetQualityControlLightningSensorOff sets the "quality_control_lightning_sensor_off" field.
func (u *MetarUpsertBulk) SetQualityControlLightningSensorOff(v bool) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetQualityControlLightningSensorOff(v)
	})
}

// UpdateQualityControlLightningSensorOff sets the "quality_control_lightning_sensor_off" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateQualityControlLightningSensorOff() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateQualityControlLightningSensorOff()
	})
}

// SetQualityControlFreezingRainSensorOff sets the "quality_control_freezing_rain_sensor_off" field.
func (u *MetarUpsertBulk) SetQualityControlFreezingRainSensorOff(v bool) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetQualityControlFreezingRainSensorOff(v)
	})
}

// UpdateQualityControlFreezingRainSensorOff sets the "quality_control_freezing_rain_sensor_off" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateQualityControlFreezingRainSensorOff() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateQualityControlFreezingRainSensorOff()
	})
}

// SetQualityControlPresentWeatherSensorOff sets the "quality_control_present_weather_sensor_off" field.
func (u *MetarUpsertBulk) SetQualityControlPresentWeatherSensorOff(v bool) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetQualityControlPresentWeatherSensorOff(v)
	})
}

// UpdateQualityControlPresentWeatherSensorOff sets the "quality_control_present_weather_sensor_off" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateQualityControlPresentWeatherSensorOff() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateQualityControlPresentWeatherSensorOff()
	})
}

// SetSeaLevelPressure sets the "sea_level_pressure" field.
func (u *MetarUpsertBulk) SetSeaLevelPressure(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetSeaLevelPressure(v)
	})
}

// AddSeaLevelPressure adds v to the "sea_level_pressure" field.
func (u *MetarUpsertBulk) AddSeaLevelPressure(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.AddSeaLevelPressure(v)
	})
}

// UpdateSeaLevelPressure sets the "sea_level_pressure" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateSeaLevelPressure() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateSeaLevelPressure()
	})
}

// ClearSeaLevelPressure clears the value of the "sea_level_pressure" field.
func (u *MetarUpsertBulk) ClearSeaLevelPressure() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.ClearSeaLevelPressure()
	})
}

// SetPressureTendency sets the "pressure_tendency" field.
func (u *MetarUpsertBulk) SetPressureTendency(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetPressureTendency(v)
	})
}

// AddPressureTendency adds v to the "pressure_tendency" field.
func (u *MetarUpsertBulk) AddPressureTendency(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.AddPressureTendency(v)
	})
}

// UpdatePressureTendency sets the "pressure_tendency" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdatePressureTendency() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdatePressureTendency()
	})
}

// ClearPressureTendency clears the value of the "pressure_tendency" field.
func (u *MetarUpsertBulk) ClearPressureTendency() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.ClearPressureTendency()
	})
}

// SetMaxTemp6 sets the "max_temp_6" field.
func (u *MetarUpsertBulk) SetMaxTemp6(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetMaxTemp6(v)
	})
}

// AddMaxTemp6 adds v to the "max_temp_6" field.
func (u *MetarUpsertBulk) AddMaxTemp6(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.AddMaxTemp6(v)
	})
}

// UpdateMaxTemp6 sets the "max_temp_6" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateMaxTemp6() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateMaxTemp6()
	})
}

// ClearMaxTemp6 clears the value of the "max_temp_6" field.
func (u *MetarUpsertBulk) ClearMaxTemp6() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.ClearMaxTemp6()
	})
}

// SetMinTemp6 sets the "min_temp_6" field.
func (u *MetarUpsertBulk) SetMinTemp6(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetMinTemp6(v)
	})
}

// AddMinTemp6 adds v to the "min_temp_6" field.
func (u *MetarUpsertBulk) AddMinTemp6(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.AddMinTemp6(v)
	})
}

// UpdateMinTemp6 sets the "min_temp_6" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateMinTemp6() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateMinTemp6()
	})
}

// ClearMinTemp6 clears the value of the "min_temp_6" field.
func (u *MetarUpsertBulk) ClearMinTemp6() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.ClearMinTemp6()
	})
}

// SetMaxTemp24 sets the "max_temp_24" field.
func (u *MetarUpsertBulk) SetMaxTemp24(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetMaxTemp24(v)
	})
}

// AddMaxTemp24 adds v to the "max_temp_24" field.
func (u *MetarUpsertBulk) AddMaxTemp24(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.AddMaxTemp24(v)
	})
}

// UpdateMaxTemp24 sets the "max_temp_24" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateMaxTemp24() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateMaxTemp24()
	})
}

// ClearMaxTemp24 clears the value of the "max_temp_24" field.
func (u *MetarUpsertBulk) ClearMaxTemp24() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.ClearMaxTemp24()
	})
}

// SetMinTemp24 sets the "min_temp_24" field.
func (u *MetarUpsertBulk) SetMinTemp24(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetMinTemp24(v)
	})
}

// AddMinTemp24 adds v to the "min_temp_24" field.
func (u *MetarUpsertBulk) AddMinTemp24(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.AddMinTemp24(v)
	})
}

// UpdateMinTemp24 sets the "min_temp_24" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateMinTemp24() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateMinTemp24()
	})
}

// ClearMinTemp24 clears the value of the "min_temp_24" field.
func (u *MetarUpsertBulk) ClearMinTemp24() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.ClearMinTemp24()
	})
}

// SetPrecipitation sets the "precipitation" field.
func (u *MetarUpsertBulk) SetPrecipitation(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetPrecipitation(v)
	})
}

// AddPrecipitation adds v to the "precipitation" field.
func (u *MetarUpsertBulk) AddPrecipitation(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.AddPrecipitation(v)
	})
}

// UpdatePrecipitation sets the "precipitation" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdatePrecipitation() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdatePrecipitation()
	})
}

// ClearPrecipitation clears the value of the "precipitation" field.
func (u *MetarUpsertBulk) ClearPrecipitation() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.ClearPrecipitation()
	})
}

// SetPrecipitation3 sets the "precipitation_3" field.
func (u *MetarUpsertBulk) SetPrecipitation3(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetPrecipitation3(v)
	})
}

// AddPrecipitation3 adds v to the "precipitation_3" field.
func (u *MetarUpsertBulk) AddPrecipitation3(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.AddPrecipitation3(v)
	})
}

// UpdatePrecipitation3 sets the "precipitation_3" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdatePrecipitation3() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdatePrecipitation3()
	})
}

// ClearPrecipitation3 clears the value of the "precipitation_3" field.
func (u *MetarUpsertBulk) ClearPrecipitation3() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.ClearPrecipitation3()
	})
}

// SetPrecipitation6 sets the "precipitation_6" field.
func (u *MetarUpsertBulk) SetPrecipitation6(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetPrecipitation6(v)
	})
}

// AddPrecipitation6 adds v to the "precipitation_6" field.
func (u *MetarUpsertBulk) AddPrecipitation6(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.AddPrecipitation6(v)
	})
}

// UpdatePrecipitation6 sets the "precipitation_6" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdatePrecipitation6() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdatePrecipitation6()
	})
}

// ClearPrecipitation6 clears the value of the "precipitation_6" field.
func (u *MetarUpsertBulk) ClearPrecipitation6() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.ClearPrecipitation6()
	})
}

// SetPrecipitation24 sets the "precipitation_24" field.
func (u *MetarUpsertBulk) SetPrecipitation24(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetPrecipitation24(v)
	})
}

// AddPrecipitation24 adds v to the "precipitation_24" field.
func (u *MetarUpsertBulk) AddPrecipitation24(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.AddPrecipitation24(v)
	})
}

// UpdatePrecipitation24 sets the "precipitation_24" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdatePrecipitation24() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdatePrecipitation24()
	})
}

// ClearPrecipitation24 clears the value of the "precipitation_24" field.
func (u *MetarUpsertBulk) ClearPrecipitation24() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.ClearPrecipitation24()
	})
}

// SetSnowDepth sets the "snow_depth" field.
func (u *MetarUpsertBulk) SetSnowDepth(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetSnowDepth(v)
	})
}

// AddSnowDepth adds v to the "snow_depth" field.
func (u *MetarUpsertBulk) AddSnowDepth(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.AddSnowDepth(v)
	})
}

// UpdateSnowDepth sets the "snow_depth" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateSnowDepth() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateSnowDepth()
	})
}

// ClearSnowDepth clears the value of the "snow_depth" field.
func (u *MetarUpsertBulk) ClearSnowDepth() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.ClearSnowDepth()
	})
}

// SetVertVis sets the "vert_vis" field.
func (u *MetarUpsertBulk) SetVertVis(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetVertVis(v)
	})
}

// AddVertVis adds v to the "vert_vis" field.
func (u *MetarUpsertBulk) AddVertVis(v float64) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.AddVertVis(v)
	})
}

// UpdateVertVis sets the "vert_vis" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateVertVis() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateVertVis()
	})
}

// ClearVertVis clears the value of the "vert_vis" field.
func (u *MetarUpsertBulk) ClearVertVis() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.ClearVertVis()
	})
}

// SetMetarType sets the "metar_type" field.
func (u *MetarUpsertBulk) SetMetarType(v metar.MetarType) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetMetarType(v)
	})
}

// UpdateMetarType sets the "metar_type" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateMetarType() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateMetarType()
	})
}

// SetHash sets the "hash" field.
func (u *MetarUpsertBulk) SetHash(v string) *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *MetarUpsertBulk) UpdateHash() *MetarUpsertBulk {
	return u.Update(func(s *MetarUpsert) {
		s.UpdateHash()
	})
}

// Exec executes the query.
func (u *MetarUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MetarCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MetarCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MetarUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
