// Code generated by ent, DO NOT EDIT.

package forecast

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the forecast type in the database.
	Label = "forecast"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFromTime holds the string denoting the from_time field in the database.
	FieldFromTime = "from_time"
	// FieldToTime holds the string denoting the to_time field in the database.
	FieldToTime = "to_time"
	// FieldChangeIndicator holds the string denoting the change_indicator field in the database.
	FieldChangeIndicator = "change_indicator"
	// FieldChangeTime holds the string denoting the change_time field in the database.
	FieldChangeTime = "change_time"
	// FieldChangeProbability holds the string denoting the change_probability field in the database.
	FieldChangeProbability = "change_probability"
	// FieldWindDirection holds the string denoting the wind_direction field in the database.
	FieldWindDirection = "wind_direction"
	// FieldWindDirectionVariable holds the string denoting the wind_direction_variable field in the database.
	FieldWindDirectionVariable = "wind_direction_variable"
	// FieldWindSpeed holds the string denoting the wind_speed field in the database.
	FieldWindSpeed = "wind_speed"
	// FieldWindGust holds the string denoting the wind_gust field in the database.
	FieldWindGust = "wind_gust"
	// FieldWindShearHeight holds the string denoting the wind_shear_height field in the database.
	FieldWindShearHeight = "wind_shear_height"
	// FieldWindShearDirection holds the string denoting the wind_shear_direction field in the database.
	FieldWindShearDirection = "wind_shear_direction"
	// FieldWindShearSpeed holds the string denoting the wind_shear_speed field in the database.
	FieldWindShearSpeed = "wind_shear_speed"
	// FieldVisibilityHorizontal holds the string denoting the visibility_horizontal field in the database.
	FieldVisibilityHorizontal = "visibility_horizontal"
	// FieldVisibilityHorizontalIsMoreThan holds the string denoting the visibility_horizontal_is_more_than field in the database.
	FieldVisibilityHorizontalIsMoreThan = "visibility_horizontal_is_more_than"
	// FieldVisibilityVertical holds the string denoting the visibility_vertical field in the database.
	FieldVisibilityVertical = "visibility_vertical"
	// FieldAltimeter holds the string denoting the altimeter field in the database.
	FieldAltimeter = "altimeter"
	// FieldWeather holds the string denoting the weather field in the database.
	FieldWeather = "weather"
	// FieldNotDecoded holds the string denoting the not_decoded field in the database.
	FieldNotDecoded = "not_decoded"
	// EdgeSkyConditions holds the string denoting the sky_conditions edge name in mutations.
	EdgeSkyConditions = "sky_conditions"
	// EdgeTurbulenceConditions holds the string denoting the turbulence_conditions edge name in mutations.
	EdgeTurbulenceConditions = "turbulence_conditions"
	// EdgeIcingConditions holds the string denoting the icing_conditions edge name in mutations.
	EdgeIcingConditions = "icing_conditions"
	// EdgeTemperatureData holds the string denoting the temperature_data edge name in mutations.
	EdgeTemperatureData = "temperature_data"
	// Table holds the table name of the forecast in the database.
	Table = "forecasts"
	// SkyConditionsTable is the table that holds the sky_conditions relation/edge.
	SkyConditionsTable = "sky_conditions"
	// SkyConditionsInverseTable is the table name for the SkyCondition entity.
	// It exists in this package in order to avoid circular dependency with the "skycondition" package.
	SkyConditionsInverseTable = "sky_conditions"
	// SkyConditionsColumn is the table column denoting the sky_conditions relation/edge.
	SkyConditionsColumn = "forecast_sky_conditions"
	// TurbulenceConditionsTable is the table that holds the turbulence_conditions relation/edge.
	TurbulenceConditionsTable = "turbulence_conditions"
	// TurbulenceConditionsInverseTable is the table name for the TurbulenceCondition entity.
	// It exists in this package in order to avoid circular dependency with the "turbulencecondition" package.
	TurbulenceConditionsInverseTable = "turbulence_conditions"
	// TurbulenceConditionsColumn is the table column denoting the turbulence_conditions relation/edge.
	TurbulenceConditionsColumn = "forecast_turbulence_conditions"
	// IcingConditionsTable is the table that holds the icing_conditions relation/edge.
	IcingConditionsTable = "icing_conditions"
	// IcingConditionsInverseTable is the table name for the IcingCondition entity.
	// It exists in this package in order to avoid circular dependency with the "icingcondition" package.
	IcingConditionsInverseTable = "icing_conditions"
	// IcingConditionsColumn is the table column denoting the icing_conditions relation/edge.
	IcingConditionsColumn = "forecast_icing_conditions"
	// TemperatureDataTable is the table that holds the temperature_data relation/edge.
	TemperatureDataTable = "temperature_data"
	// TemperatureDataInverseTable is the table name for the TemperatureData entity.
	// It exists in this package in order to avoid circular dependency with the "temperaturedata" package.
	TemperatureDataInverseTable = "temperature_data"
	// TemperatureDataColumn is the table column denoting the temperature_data relation/edge.
	TemperatureDataColumn = "forecast_temperature_data"
)

// Columns holds all SQL columns for forecast fields.
var Columns = []string{
	FieldID,
	FieldFromTime,
	FieldToTime,
	FieldChangeIndicator,
	FieldChangeTime,
	FieldChangeProbability,
	FieldWindDirection,
	FieldWindDirectionVariable,
	FieldWindSpeed,
	FieldWindGust,
	FieldWindShearHeight,
	FieldWindShearDirection,
	FieldWindShearSpeed,
	FieldVisibilityHorizontal,
	FieldVisibilityHorizontalIsMoreThan,
	FieldVisibilityVertical,
	FieldAltimeter,
	FieldWeather,
	FieldNotDecoded,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "forecasts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"taf_forecast",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// ChangeIndicator defines the type for the "change_indicator" enum field.
type ChangeIndicator string

// ChangeIndicator values.
const (
	ChangeIndicatorBECMG ChangeIndicator = "BECMG"
	ChangeIndicatorFM    ChangeIndicator = "FM"
	ChangeIndicatorTEMPO ChangeIndicator = "TEMPO"
	ChangeIndicatorPROB  ChangeIndicator = "PROB"
)

func (ci ChangeIndicator) String() string {
	return string(ci)
}

// ChangeIndicatorValidator is a validator for the "change_indicator" field enum values. It is called by the builders before save.
func ChangeIndicatorValidator(ci ChangeIndicator) error {
	switch ci {
	case ChangeIndicatorBECMG, ChangeIndicatorFM, ChangeIndicatorTEMPO, ChangeIndicatorPROB:
		return nil
	default:
		return fmt.Errorf("forecast: invalid enum value for change_indicator field: %q", ci)
	}
}

// OrderOption defines the ordering options for the Forecast queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFromTime orders the results by the from_time field.
func ByFromTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromTime, opts...).ToFunc()
}

// ByToTime orders the results by the to_time field.
func ByToTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToTime, opts...).ToFunc()
}

// ByChangeIndicator orders the results by the change_indicator field.
func ByChangeIndicator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChangeIndicator, opts...).ToFunc()
}

// ByChangeTime orders the results by the change_time field.
func ByChangeTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChangeTime, opts...).ToFunc()
}

// ByChangeProbability orders the results by the change_probability field.
func ByChangeProbability(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChangeProbability, opts...).ToFunc()
}

// ByWindDirection orders the results by the wind_direction field.
func ByWindDirection(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWindDirection, opts...).ToFunc()
}

// ByWindDirectionVariable orders the results by the wind_direction_variable field.
func ByWindDirectionVariable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWindDirectionVariable, opts...).ToFunc()
}

// ByWindSpeed orders the results by the wind_speed field.
func ByWindSpeed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWindSpeed, opts...).ToFunc()
}

// ByWindGust orders the results by the wind_gust field.
func ByWindGust(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWindGust, opts...).ToFunc()
}

// ByWindShearHeight orders the results by the wind_shear_height field.
func ByWindShearHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWindShearHeight, opts...).ToFunc()
}

// ByWindShearDirection orders the results by the wind_shear_direction field.
func ByWindShearDirection(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWindShearDirection, opts...).ToFunc()
}

// ByWindShearSpeed orders the results by the wind_shear_speed field.
func ByWindShearSpeed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWindShearSpeed, opts...).ToFunc()
}

// ByVisibilityHorizontal orders the results by the visibility_horizontal field.
func ByVisibilityHorizontal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVisibilityHorizontal, opts...).ToFunc()
}

// ByVisibilityHorizontalIsMoreThan orders the results by the visibility_horizontal_is_more_than field.
func ByVisibilityHorizontalIsMoreThan(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVisibilityHorizontalIsMoreThan, opts...).ToFunc()
}

// ByVisibilityVertical orders the results by the visibility_vertical field.
func ByVisibilityVertical(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVisibilityVertical, opts...).ToFunc()
}

// ByAltimeter orders the results by the altimeter field.
func ByAltimeter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAltimeter, opts...).ToFunc()
}

// ByWeather orders the results by the weather field.
func ByWeather(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeather, opts...).ToFunc()
}

// ByNotDecoded orders the results by the not_decoded field.
func ByNotDecoded(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotDecoded, opts...).ToFunc()
}

// BySkyConditionsCount orders the results by sky_conditions count.
func BySkyConditionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSkyConditionsStep(), opts...)
	}
}

// BySkyConditions orders the results by sky_conditions terms.
func BySkyConditions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSkyConditionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTurbulenceConditionsCount orders the results by turbulence_conditions count.
func ByTurbulenceConditionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTurbulenceConditionsStep(), opts...)
	}
}

// ByTurbulenceConditions orders the results by turbulence_conditions terms.
func ByTurbulenceConditions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTurbulenceConditionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIcingConditionsCount orders the results by icing_conditions count.
func ByIcingConditionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIcingConditionsStep(), opts...)
	}
}

// ByIcingConditions orders the results by icing_conditions terms.
func ByIcingConditions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIcingConditionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTemperatureDataCount orders the results by temperature_data count.
func ByTemperatureDataCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTemperatureDataStep(), opts...)
	}
}

// ByTemperatureData orders the results by temperature_data terms.
func ByTemperatureData(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTemperatureDataStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSkyConditionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SkyConditionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SkyConditionsTable, SkyConditionsColumn),
	)
}
func newTurbulenceConditionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TurbulenceConditionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TurbulenceConditionsTable, TurbulenceConditionsColumn),
	)
}
func newIcingConditionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IcingConditionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IcingConditionsTable, IcingConditionsColumn),
	)
}
func newTemperatureDataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TemperatureDataInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TemperatureDataTable, TemperatureDataColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e ChangeIndicator) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *ChangeIndicator) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = ChangeIndicator(str)
	if err := ChangeIndicatorValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid ChangeIndicator", str)
	}
	return nil
}
