// Code generated by ent, DO NOT EDIT.

package forecast

import (
	"fmt"
	"io"
	"strconv"
)

const (
	// Label holds the string label denoting the forecast type in the database.
	Label = "forecast"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFromTime holds the string denoting the from_time field in the database.
	FieldFromTime = "from_time"
	// FieldToTime holds the string denoting the to_time field in the database.
	FieldToTime = "to_time"
	// FieldChangeIndicator holds the string denoting the change_indicator field in the database.
	FieldChangeIndicator = "change_indicator"
	// FieldChangeTime holds the string denoting the change_time field in the database.
	FieldChangeTime = "change_time"
	// FieldChangeProbability holds the string denoting the change_probability field in the database.
	FieldChangeProbability = "change_probability"
	// FieldWindDirection holds the string denoting the wind_direction field in the database.
	FieldWindDirection = "wind_direction"
	// FieldWindSpeed holds the string denoting the wind_speed field in the database.
	FieldWindSpeed = "wind_speed"
	// FieldWindGust holds the string denoting the wind_gust field in the database.
	FieldWindGust = "wind_gust"
	// FieldWindShearHeight holds the string denoting the wind_shear_height field in the database.
	FieldWindShearHeight = "wind_shear_height"
	// FieldWindShearDirection holds the string denoting the wind_shear_direction field in the database.
	FieldWindShearDirection = "wind_shear_direction"
	// FieldWindShearSpeed holds the string denoting the wind_shear_speed field in the database.
	FieldWindShearSpeed = "wind_shear_speed"
	// FieldVisibilityHorizontal holds the string denoting the visibility_horizontal field in the database.
	FieldVisibilityHorizontal = "visibility_horizontal"
	// FieldVisibilityVertical holds the string denoting the visibility_vertical field in the database.
	FieldVisibilityVertical = "visibility_vertical"
	// FieldAltimeter holds the string denoting the altimeter field in the database.
	FieldAltimeter = "altimeter"
	// FieldWeather holds the string denoting the weather field in the database.
	FieldWeather = "weather"
	// FieldNotDecoded holds the string denoting the not_decoded field in the database.
	FieldNotDecoded = "not_decoded"
	// EdgeSkyConditions holds the string denoting the sky_conditions edge name in mutations.
	EdgeSkyConditions = "sky_conditions"
	// EdgeTurbulenceConditions holds the string denoting the turbulence_conditions edge name in mutations.
	EdgeTurbulenceConditions = "turbulence_conditions"
	// EdgeIcingConditions holds the string denoting the icing_conditions edge name in mutations.
	EdgeIcingConditions = "icing_conditions"
	// EdgeTemperatureData holds the string denoting the temperature_data edge name in mutations.
	EdgeTemperatureData = "temperature_data"
	// Table holds the table name of the forecast in the database.
	Table = "forecasts"
	// SkyConditionsTable is the table that holds the sky_conditions relation/edge.
	SkyConditionsTable = "sky_conditions"
	// SkyConditionsInverseTable is the table name for the SkyCondition entity.
	// It exists in this package in order to avoid circular dependency with the "skycondition" package.
	SkyConditionsInverseTable = "sky_conditions"
	// SkyConditionsColumn is the table column denoting the sky_conditions relation/edge.
	SkyConditionsColumn = "forecast_sky_conditions"
	// TurbulenceConditionsTable is the table that holds the turbulence_conditions relation/edge.
	TurbulenceConditionsTable = "turbulence_conditions"
	// TurbulenceConditionsInverseTable is the table name for the TurbulenceCondition entity.
	// It exists in this package in order to avoid circular dependency with the "turbulencecondition" package.
	TurbulenceConditionsInverseTable = "turbulence_conditions"
	// TurbulenceConditionsColumn is the table column denoting the turbulence_conditions relation/edge.
	TurbulenceConditionsColumn = "forecast_turbulence_conditions"
	// IcingConditionsTable is the table that holds the icing_conditions relation/edge.
	IcingConditionsTable = "icing_conditions"
	// IcingConditionsInverseTable is the table name for the IcingCondition entity.
	// It exists in this package in order to avoid circular dependency with the "icingcondition" package.
	IcingConditionsInverseTable = "icing_conditions"
	// IcingConditionsColumn is the table column denoting the icing_conditions relation/edge.
	IcingConditionsColumn = "forecast_icing_conditions"
	// TemperatureDataTable is the table that holds the temperature_data relation/edge.
	TemperatureDataTable = "temperature_data"
	// TemperatureDataInverseTable is the table name for the TemperatureData entity.
	// It exists in this package in order to avoid circular dependency with the "temperaturedata" package.
	TemperatureDataInverseTable = "temperature_data"
	// TemperatureDataColumn is the table column denoting the temperature_data relation/edge.
	TemperatureDataColumn = "forecast_temperature_data"
)

// Columns holds all SQL columns for forecast fields.
var Columns = []string{
	FieldID,
	FieldFromTime,
	FieldToTime,
	FieldChangeIndicator,
	FieldChangeTime,
	FieldChangeProbability,
	FieldWindDirection,
	FieldWindSpeed,
	FieldWindGust,
	FieldWindShearHeight,
	FieldWindShearDirection,
	FieldWindShearSpeed,
	FieldVisibilityHorizontal,
	FieldVisibilityVertical,
	FieldAltimeter,
	FieldWeather,
	FieldNotDecoded,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "forecasts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"taf_forecast",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// ChangeIndicator defines the type for the "change_indicator" enum field.
type ChangeIndicator string

// ChangeIndicator values.
const (
	ChangeIndicatorBECMG ChangeIndicator = "BECMG"
	ChangeIndicatorFM    ChangeIndicator = "FM"
	ChangeIndicatorTEMPO ChangeIndicator = "TEMPO"
	ChangeIndicatorPROB  ChangeIndicator = "PROB"
)

func (ci ChangeIndicator) String() string {
	return string(ci)
}

// ChangeIndicatorValidator is a validator for the "change_indicator" field enum values. It is called by the builders before save.
func ChangeIndicatorValidator(ci ChangeIndicator) error {
	switch ci {
	case ChangeIndicatorBECMG, ChangeIndicatorFM, ChangeIndicatorTEMPO, ChangeIndicatorPROB:
		return nil
	default:
		return fmt.Errorf("forecast: invalid enum value for change_indicator field: %q", ci)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e ChangeIndicator) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *ChangeIndicator) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = ChangeIndicator(str)
	if err := ChangeIndicatorValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid ChangeIndicator", str)
	}
	return nil
}
