// Code generated by ent, DO NOT EDIT.

package forecast

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"metar.gg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// FromTime applies equality check predicate on the "from_time" field. It's identical to FromTimeEQ.
func FromTime(v time.Time) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFromTime), v))
	})
}

// ToTime applies equality check predicate on the "to_time" field. It's identical to ToTimeEQ.
func ToTime(v time.Time) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldToTime), v))
	})
}

// ChangeTime applies equality check predicate on the "change_time" field. It's identical to ChangeTimeEQ.
func ChangeTime(v time.Time) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChangeTime), v))
	})
}

// ChangeProbability applies equality check predicate on the "change_probability" field. It's identical to ChangeProbabilityEQ.
func ChangeProbability(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChangeProbability), v))
	})
}

// WindDirection applies equality check predicate on the "wind_direction" field. It's identical to WindDirectionEQ.
func WindDirection(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWindDirection), v))
	})
}

// WindSpeed applies equality check predicate on the "wind_speed" field. It's identical to WindSpeedEQ.
func WindSpeed(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWindSpeed), v))
	})
}

// WindGust applies equality check predicate on the "wind_gust" field. It's identical to WindGustEQ.
func WindGust(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWindGust), v))
	})
}

// WindShearHeight applies equality check predicate on the "wind_shear_height" field. It's identical to WindShearHeightEQ.
func WindShearHeight(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWindShearHeight), v))
	})
}

// WindShearDirection applies equality check predicate on the "wind_shear_direction" field. It's identical to WindShearDirectionEQ.
func WindShearDirection(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWindShearDirection), v))
	})
}

// WindShearSpeed applies equality check predicate on the "wind_shear_speed" field. It's identical to WindShearSpeedEQ.
func WindShearSpeed(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWindShearSpeed), v))
	})
}

// VisibilityHorizontal applies equality check predicate on the "visibility_horizontal" field. It's identical to VisibilityHorizontalEQ.
func VisibilityHorizontal(v float64) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVisibilityHorizontal), v))
	})
}

// VisibilityVertical applies equality check predicate on the "visibility_vertical" field. It's identical to VisibilityVerticalEQ.
func VisibilityVertical(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVisibilityVertical), v))
	})
}

// Altimeter applies equality check predicate on the "altimeter" field. It's identical to AltimeterEQ.
func Altimeter(v float64) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAltimeter), v))
	})
}

// Weather applies equality check predicate on the "weather" field. It's identical to WeatherEQ.
func Weather(v string) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeather), v))
	})
}

// NotDecoded applies equality check predicate on the "not_decoded" field. It's identical to NotDecodedEQ.
func NotDecoded(v string) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotDecoded), v))
	})
}

// FromTimeEQ applies the EQ predicate on the "from_time" field.
func FromTimeEQ(v time.Time) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFromTime), v))
	})
}

// FromTimeNEQ applies the NEQ predicate on the "from_time" field.
func FromTimeNEQ(v time.Time) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFromTime), v))
	})
}

// FromTimeIn applies the In predicate on the "from_time" field.
func FromTimeIn(vs ...time.Time) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFromTime), v...))
	})
}

// FromTimeNotIn applies the NotIn predicate on the "from_time" field.
func FromTimeNotIn(vs ...time.Time) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFromTime), v...))
	})
}

// FromTimeGT applies the GT predicate on the "from_time" field.
func FromTimeGT(v time.Time) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFromTime), v))
	})
}

// FromTimeGTE applies the GTE predicate on the "from_time" field.
func FromTimeGTE(v time.Time) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFromTime), v))
	})
}

// FromTimeLT applies the LT predicate on the "from_time" field.
func FromTimeLT(v time.Time) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFromTime), v))
	})
}

// FromTimeLTE applies the LTE predicate on the "from_time" field.
func FromTimeLTE(v time.Time) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFromTime), v))
	})
}

// ToTimeEQ applies the EQ predicate on the "to_time" field.
func ToTimeEQ(v time.Time) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldToTime), v))
	})
}

// ToTimeNEQ applies the NEQ predicate on the "to_time" field.
func ToTimeNEQ(v time.Time) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldToTime), v))
	})
}

// ToTimeIn applies the In predicate on the "to_time" field.
func ToTimeIn(vs ...time.Time) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldToTime), v...))
	})
}

// ToTimeNotIn applies the NotIn predicate on the "to_time" field.
func ToTimeNotIn(vs ...time.Time) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldToTime), v...))
	})
}

// ToTimeGT applies the GT predicate on the "to_time" field.
func ToTimeGT(v time.Time) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldToTime), v))
	})
}

// ToTimeGTE applies the GTE predicate on the "to_time" field.
func ToTimeGTE(v time.Time) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldToTime), v))
	})
}

// ToTimeLT applies the LT predicate on the "to_time" field.
func ToTimeLT(v time.Time) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldToTime), v))
	})
}

// ToTimeLTE applies the LTE predicate on the "to_time" field.
func ToTimeLTE(v time.Time) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldToTime), v))
	})
}

// ChangeIndicatorEQ applies the EQ predicate on the "change_indicator" field.
func ChangeIndicatorEQ(v ChangeIndicator) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChangeIndicator), v))
	})
}

// ChangeIndicatorNEQ applies the NEQ predicate on the "change_indicator" field.
func ChangeIndicatorNEQ(v ChangeIndicator) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChangeIndicator), v))
	})
}

// ChangeIndicatorIn applies the In predicate on the "change_indicator" field.
func ChangeIndicatorIn(vs ...ChangeIndicator) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChangeIndicator), v...))
	})
}

// ChangeIndicatorNotIn applies the NotIn predicate on the "change_indicator" field.
func ChangeIndicatorNotIn(vs ...ChangeIndicator) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChangeIndicator), v...))
	})
}

// ChangeIndicatorIsNil applies the IsNil predicate on the "change_indicator" field.
func ChangeIndicatorIsNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChangeIndicator)))
	})
}

// ChangeIndicatorNotNil applies the NotNil predicate on the "change_indicator" field.
func ChangeIndicatorNotNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChangeIndicator)))
	})
}

// ChangeTimeEQ applies the EQ predicate on the "change_time" field.
func ChangeTimeEQ(v time.Time) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChangeTime), v))
	})
}

// ChangeTimeNEQ applies the NEQ predicate on the "change_time" field.
func ChangeTimeNEQ(v time.Time) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChangeTime), v))
	})
}

// ChangeTimeIn applies the In predicate on the "change_time" field.
func ChangeTimeIn(vs ...time.Time) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChangeTime), v...))
	})
}

// ChangeTimeNotIn applies the NotIn predicate on the "change_time" field.
func ChangeTimeNotIn(vs ...time.Time) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChangeTime), v...))
	})
}

// ChangeTimeGT applies the GT predicate on the "change_time" field.
func ChangeTimeGT(v time.Time) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChangeTime), v))
	})
}

// ChangeTimeGTE applies the GTE predicate on the "change_time" field.
func ChangeTimeGTE(v time.Time) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChangeTime), v))
	})
}

// ChangeTimeLT applies the LT predicate on the "change_time" field.
func ChangeTimeLT(v time.Time) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChangeTime), v))
	})
}

// ChangeTimeLTE applies the LTE predicate on the "change_time" field.
func ChangeTimeLTE(v time.Time) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChangeTime), v))
	})
}

// ChangeTimeIsNil applies the IsNil predicate on the "change_time" field.
func ChangeTimeIsNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChangeTime)))
	})
}

// ChangeTimeNotNil applies the NotNil predicate on the "change_time" field.
func ChangeTimeNotNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChangeTime)))
	})
}

// ChangeProbabilityEQ applies the EQ predicate on the "change_probability" field.
func ChangeProbabilityEQ(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChangeProbability), v))
	})
}

// ChangeProbabilityNEQ applies the NEQ predicate on the "change_probability" field.
func ChangeProbabilityNEQ(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChangeProbability), v))
	})
}

// ChangeProbabilityIn applies the In predicate on the "change_probability" field.
func ChangeProbabilityIn(vs ...int) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChangeProbability), v...))
	})
}

// ChangeProbabilityNotIn applies the NotIn predicate on the "change_probability" field.
func ChangeProbabilityNotIn(vs ...int) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChangeProbability), v...))
	})
}

// ChangeProbabilityGT applies the GT predicate on the "change_probability" field.
func ChangeProbabilityGT(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChangeProbability), v))
	})
}

// ChangeProbabilityGTE applies the GTE predicate on the "change_probability" field.
func ChangeProbabilityGTE(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChangeProbability), v))
	})
}

// ChangeProbabilityLT applies the LT predicate on the "change_probability" field.
func ChangeProbabilityLT(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChangeProbability), v))
	})
}

// ChangeProbabilityLTE applies the LTE predicate on the "change_probability" field.
func ChangeProbabilityLTE(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChangeProbability), v))
	})
}

// ChangeProbabilityIsNil applies the IsNil predicate on the "change_probability" field.
func ChangeProbabilityIsNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChangeProbability)))
	})
}

// ChangeProbabilityNotNil applies the NotNil predicate on the "change_probability" field.
func ChangeProbabilityNotNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChangeProbability)))
	})
}

// WindDirectionEQ applies the EQ predicate on the "wind_direction" field.
func WindDirectionEQ(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWindDirection), v))
	})
}

// WindDirectionNEQ applies the NEQ predicate on the "wind_direction" field.
func WindDirectionNEQ(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWindDirection), v))
	})
}

// WindDirectionIn applies the In predicate on the "wind_direction" field.
func WindDirectionIn(vs ...int) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWindDirection), v...))
	})
}

// WindDirectionNotIn applies the NotIn predicate on the "wind_direction" field.
func WindDirectionNotIn(vs ...int) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWindDirection), v...))
	})
}

// WindDirectionGT applies the GT predicate on the "wind_direction" field.
func WindDirectionGT(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWindDirection), v))
	})
}

// WindDirectionGTE applies the GTE predicate on the "wind_direction" field.
func WindDirectionGTE(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWindDirection), v))
	})
}

// WindDirectionLT applies the LT predicate on the "wind_direction" field.
func WindDirectionLT(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWindDirection), v))
	})
}

// WindDirectionLTE applies the LTE predicate on the "wind_direction" field.
func WindDirectionLTE(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWindDirection), v))
	})
}

// WindDirectionIsNil applies the IsNil predicate on the "wind_direction" field.
func WindDirectionIsNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWindDirection)))
	})
}

// WindDirectionNotNil applies the NotNil predicate on the "wind_direction" field.
func WindDirectionNotNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWindDirection)))
	})
}

// WindSpeedEQ applies the EQ predicate on the "wind_speed" field.
func WindSpeedEQ(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWindSpeed), v))
	})
}

// WindSpeedNEQ applies the NEQ predicate on the "wind_speed" field.
func WindSpeedNEQ(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWindSpeed), v))
	})
}

// WindSpeedIn applies the In predicate on the "wind_speed" field.
func WindSpeedIn(vs ...int) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWindSpeed), v...))
	})
}

// WindSpeedNotIn applies the NotIn predicate on the "wind_speed" field.
func WindSpeedNotIn(vs ...int) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWindSpeed), v...))
	})
}

// WindSpeedGT applies the GT predicate on the "wind_speed" field.
func WindSpeedGT(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWindSpeed), v))
	})
}

// WindSpeedGTE applies the GTE predicate on the "wind_speed" field.
func WindSpeedGTE(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWindSpeed), v))
	})
}

// WindSpeedLT applies the LT predicate on the "wind_speed" field.
func WindSpeedLT(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWindSpeed), v))
	})
}

// WindSpeedLTE applies the LTE predicate on the "wind_speed" field.
func WindSpeedLTE(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWindSpeed), v))
	})
}

// WindSpeedIsNil applies the IsNil predicate on the "wind_speed" field.
func WindSpeedIsNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWindSpeed)))
	})
}

// WindSpeedNotNil applies the NotNil predicate on the "wind_speed" field.
func WindSpeedNotNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWindSpeed)))
	})
}

// WindGustEQ applies the EQ predicate on the "wind_gust" field.
func WindGustEQ(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWindGust), v))
	})
}

// WindGustNEQ applies the NEQ predicate on the "wind_gust" field.
func WindGustNEQ(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWindGust), v))
	})
}

// WindGustIn applies the In predicate on the "wind_gust" field.
func WindGustIn(vs ...int) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWindGust), v...))
	})
}

// WindGustNotIn applies the NotIn predicate on the "wind_gust" field.
func WindGustNotIn(vs ...int) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWindGust), v...))
	})
}

// WindGustGT applies the GT predicate on the "wind_gust" field.
func WindGustGT(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWindGust), v))
	})
}

// WindGustGTE applies the GTE predicate on the "wind_gust" field.
func WindGustGTE(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWindGust), v))
	})
}

// WindGustLT applies the LT predicate on the "wind_gust" field.
func WindGustLT(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWindGust), v))
	})
}

// WindGustLTE applies the LTE predicate on the "wind_gust" field.
func WindGustLTE(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWindGust), v))
	})
}

// WindGustIsNil applies the IsNil predicate on the "wind_gust" field.
func WindGustIsNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWindGust)))
	})
}

// WindGustNotNil applies the NotNil predicate on the "wind_gust" field.
func WindGustNotNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWindGust)))
	})
}

// WindShearHeightEQ applies the EQ predicate on the "wind_shear_height" field.
func WindShearHeightEQ(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWindShearHeight), v))
	})
}

// WindShearHeightNEQ applies the NEQ predicate on the "wind_shear_height" field.
func WindShearHeightNEQ(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWindShearHeight), v))
	})
}

// WindShearHeightIn applies the In predicate on the "wind_shear_height" field.
func WindShearHeightIn(vs ...int) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWindShearHeight), v...))
	})
}

// WindShearHeightNotIn applies the NotIn predicate on the "wind_shear_height" field.
func WindShearHeightNotIn(vs ...int) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWindShearHeight), v...))
	})
}

// WindShearHeightGT applies the GT predicate on the "wind_shear_height" field.
func WindShearHeightGT(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWindShearHeight), v))
	})
}

// WindShearHeightGTE applies the GTE predicate on the "wind_shear_height" field.
func WindShearHeightGTE(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWindShearHeight), v))
	})
}

// WindShearHeightLT applies the LT predicate on the "wind_shear_height" field.
func WindShearHeightLT(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWindShearHeight), v))
	})
}

// WindShearHeightLTE applies the LTE predicate on the "wind_shear_height" field.
func WindShearHeightLTE(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWindShearHeight), v))
	})
}

// WindShearHeightIsNil applies the IsNil predicate on the "wind_shear_height" field.
func WindShearHeightIsNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWindShearHeight)))
	})
}

// WindShearHeightNotNil applies the NotNil predicate on the "wind_shear_height" field.
func WindShearHeightNotNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWindShearHeight)))
	})
}

// WindShearDirectionEQ applies the EQ predicate on the "wind_shear_direction" field.
func WindShearDirectionEQ(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWindShearDirection), v))
	})
}

// WindShearDirectionNEQ applies the NEQ predicate on the "wind_shear_direction" field.
func WindShearDirectionNEQ(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWindShearDirection), v))
	})
}

// WindShearDirectionIn applies the In predicate on the "wind_shear_direction" field.
func WindShearDirectionIn(vs ...int) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWindShearDirection), v...))
	})
}

// WindShearDirectionNotIn applies the NotIn predicate on the "wind_shear_direction" field.
func WindShearDirectionNotIn(vs ...int) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWindShearDirection), v...))
	})
}

// WindShearDirectionGT applies the GT predicate on the "wind_shear_direction" field.
func WindShearDirectionGT(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWindShearDirection), v))
	})
}

// WindShearDirectionGTE applies the GTE predicate on the "wind_shear_direction" field.
func WindShearDirectionGTE(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWindShearDirection), v))
	})
}

// WindShearDirectionLT applies the LT predicate on the "wind_shear_direction" field.
func WindShearDirectionLT(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWindShearDirection), v))
	})
}

// WindShearDirectionLTE applies the LTE predicate on the "wind_shear_direction" field.
func WindShearDirectionLTE(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWindShearDirection), v))
	})
}

// WindShearDirectionIsNil applies the IsNil predicate on the "wind_shear_direction" field.
func WindShearDirectionIsNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWindShearDirection)))
	})
}

// WindShearDirectionNotNil applies the NotNil predicate on the "wind_shear_direction" field.
func WindShearDirectionNotNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWindShearDirection)))
	})
}

// WindShearSpeedEQ applies the EQ predicate on the "wind_shear_speed" field.
func WindShearSpeedEQ(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWindShearSpeed), v))
	})
}

// WindShearSpeedNEQ applies the NEQ predicate on the "wind_shear_speed" field.
func WindShearSpeedNEQ(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWindShearSpeed), v))
	})
}

// WindShearSpeedIn applies the In predicate on the "wind_shear_speed" field.
func WindShearSpeedIn(vs ...int) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWindShearSpeed), v...))
	})
}

// WindShearSpeedNotIn applies the NotIn predicate on the "wind_shear_speed" field.
func WindShearSpeedNotIn(vs ...int) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWindShearSpeed), v...))
	})
}

// WindShearSpeedGT applies the GT predicate on the "wind_shear_speed" field.
func WindShearSpeedGT(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWindShearSpeed), v))
	})
}

// WindShearSpeedGTE applies the GTE predicate on the "wind_shear_speed" field.
func WindShearSpeedGTE(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWindShearSpeed), v))
	})
}

// WindShearSpeedLT applies the LT predicate on the "wind_shear_speed" field.
func WindShearSpeedLT(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWindShearSpeed), v))
	})
}

// WindShearSpeedLTE applies the LTE predicate on the "wind_shear_speed" field.
func WindShearSpeedLTE(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWindShearSpeed), v))
	})
}

// WindShearSpeedIsNil applies the IsNil predicate on the "wind_shear_speed" field.
func WindShearSpeedIsNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWindShearSpeed)))
	})
}

// WindShearSpeedNotNil applies the NotNil predicate on the "wind_shear_speed" field.
func WindShearSpeedNotNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWindShearSpeed)))
	})
}

// VisibilityHorizontalEQ applies the EQ predicate on the "visibility_horizontal" field.
func VisibilityHorizontalEQ(v float64) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVisibilityHorizontal), v))
	})
}

// VisibilityHorizontalNEQ applies the NEQ predicate on the "visibility_horizontal" field.
func VisibilityHorizontalNEQ(v float64) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVisibilityHorizontal), v))
	})
}

// VisibilityHorizontalIn applies the In predicate on the "visibility_horizontal" field.
func VisibilityHorizontalIn(vs ...float64) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVisibilityHorizontal), v...))
	})
}

// VisibilityHorizontalNotIn applies the NotIn predicate on the "visibility_horizontal" field.
func VisibilityHorizontalNotIn(vs ...float64) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVisibilityHorizontal), v...))
	})
}

// VisibilityHorizontalGT applies the GT predicate on the "visibility_horizontal" field.
func VisibilityHorizontalGT(v float64) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVisibilityHorizontal), v))
	})
}

// VisibilityHorizontalGTE applies the GTE predicate on the "visibility_horizontal" field.
func VisibilityHorizontalGTE(v float64) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVisibilityHorizontal), v))
	})
}

// VisibilityHorizontalLT applies the LT predicate on the "visibility_horizontal" field.
func VisibilityHorizontalLT(v float64) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVisibilityHorizontal), v))
	})
}

// VisibilityHorizontalLTE applies the LTE predicate on the "visibility_horizontal" field.
func VisibilityHorizontalLTE(v float64) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVisibilityHorizontal), v))
	})
}

// VisibilityHorizontalIsNil applies the IsNil predicate on the "visibility_horizontal" field.
func VisibilityHorizontalIsNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVisibilityHorizontal)))
	})
}

// VisibilityHorizontalNotNil applies the NotNil predicate on the "visibility_horizontal" field.
func VisibilityHorizontalNotNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVisibilityHorizontal)))
	})
}

// VisibilityVerticalEQ applies the EQ predicate on the "visibility_vertical" field.
func VisibilityVerticalEQ(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVisibilityVertical), v))
	})
}

// VisibilityVerticalNEQ applies the NEQ predicate on the "visibility_vertical" field.
func VisibilityVerticalNEQ(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVisibilityVertical), v))
	})
}

// VisibilityVerticalIn applies the In predicate on the "visibility_vertical" field.
func VisibilityVerticalIn(vs ...int) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVisibilityVertical), v...))
	})
}

// VisibilityVerticalNotIn applies the NotIn predicate on the "visibility_vertical" field.
func VisibilityVerticalNotIn(vs ...int) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVisibilityVertical), v...))
	})
}

// VisibilityVerticalGT applies the GT predicate on the "visibility_vertical" field.
func VisibilityVerticalGT(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVisibilityVertical), v))
	})
}

// VisibilityVerticalGTE applies the GTE predicate on the "visibility_vertical" field.
func VisibilityVerticalGTE(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVisibilityVertical), v))
	})
}

// VisibilityVerticalLT applies the LT predicate on the "visibility_vertical" field.
func VisibilityVerticalLT(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVisibilityVertical), v))
	})
}

// VisibilityVerticalLTE applies the LTE predicate on the "visibility_vertical" field.
func VisibilityVerticalLTE(v int) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVisibilityVertical), v))
	})
}

// VisibilityVerticalIsNil applies the IsNil predicate on the "visibility_vertical" field.
func VisibilityVerticalIsNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVisibilityVertical)))
	})
}

// VisibilityVerticalNotNil applies the NotNil predicate on the "visibility_vertical" field.
func VisibilityVerticalNotNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVisibilityVertical)))
	})
}

// AltimeterEQ applies the EQ predicate on the "altimeter" field.
func AltimeterEQ(v float64) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAltimeter), v))
	})
}

// AltimeterNEQ applies the NEQ predicate on the "altimeter" field.
func AltimeterNEQ(v float64) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAltimeter), v))
	})
}

// AltimeterIn applies the In predicate on the "altimeter" field.
func AltimeterIn(vs ...float64) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAltimeter), v...))
	})
}

// AltimeterNotIn applies the NotIn predicate on the "altimeter" field.
func AltimeterNotIn(vs ...float64) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAltimeter), v...))
	})
}

// AltimeterGT applies the GT predicate on the "altimeter" field.
func AltimeterGT(v float64) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAltimeter), v))
	})
}

// AltimeterGTE applies the GTE predicate on the "altimeter" field.
func AltimeterGTE(v float64) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAltimeter), v))
	})
}

// AltimeterLT applies the LT predicate on the "altimeter" field.
func AltimeterLT(v float64) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAltimeter), v))
	})
}

// AltimeterLTE applies the LTE predicate on the "altimeter" field.
func AltimeterLTE(v float64) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAltimeter), v))
	})
}

// AltimeterIsNil applies the IsNil predicate on the "altimeter" field.
func AltimeterIsNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAltimeter)))
	})
}

// AltimeterNotNil applies the NotNil predicate on the "altimeter" field.
func AltimeterNotNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAltimeter)))
	})
}

// WeatherEQ applies the EQ predicate on the "weather" field.
func WeatherEQ(v string) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeather), v))
	})
}

// WeatherNEQ applies the NEQ predicate on the "weather" field.
func WeatherNEQ(v string) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWeather), v))
	})
}

// WeatherIn applies the In predicate on the "weather" field.
func WeatherIn(vs ...string) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWeather), v...))
	})
}

// WeatherNotIn applies the NotIn predicate on the "weather" field.
func WeatherNotIn(vs ...string) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWeather), v...))
	})
}

// WeatherGT applies the GT predicate on the "weather" field.
func WeatherGT(v string) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWeather), v))
	})
}

// WeatherGTE applies the GTE predicate on the "weather" field.
func WeatherGTE(v string) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWeather), v))
	})
}

// WeatherLT applies the LT predicate on the "weather" field.
func WeatherLT(v string) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWeather), v))
	})
}

// WeatherLTE applies the LTE predicate on the "weather" field.
func WeatherLTE(v string) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWeather), v))
	})
}

// WeatherContains applies the Contains predicate on the "weather" field.
func WeatherContains(v string) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWeather), v))
	})
}

// WeatherHasPrefix applies the HasPrefix predicate on the "weather" field.
func WeatherHasPrefix(v string) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWeather), v))
	})
}

// WeatherHasSuffix applies the HasSuffix predicate on the "weather" field.
func WeatherHasSuffix(v string) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWeather), v))
	})
}

// WeatherIsNil applies the IsNil predicate on the "weather" field.
func WeatherIsNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWeather)))
	})
}

// WeatherNotNil applies the NotNil predicate on the "weather" field.
func WeatherNotNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWeather)))
	})
}

// WeatherEqualFold applies the EqualFold predicate on the "weather" field.
func WeatherEqualFold(v string) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWeather), v))
	})
}

// WeatherContainsFold applies the ContainsFold predicate on the "weather" field.
func WeatherContainsFold(v string) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWeather), v))
	})
}

// NotDecodedEQ applies the EQ predicate on the "not_decoded" field.
func NotDecodedEQ(v string) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotDecoded), v))
	})
}

// NotDecodedNEQ applies the NEQ predicate on the "not_decoded" field.
func NotDecodedNEQ(v string) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNotDecoded), v))
	})
}

// NotDecodedIn applies the In predicate on the "not_decoded" field.
func NotDecodedIn(vs ...string) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNotDecoded), v...))
	})
}

// NotDecodedNotIn applies the NotIn predicate on the "not_decoded" field.
func NotDecodedNotIn(vs ...string) predicate.Forecast {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNotDecoded), v...))
	})
}

// NotDecodedGT applies the GT predicate on the "not_decoded" field.
func NotDecodedGT(v string) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNotDecoded), v))
	})
}

// NotDecodedGTE applies the GTE predicate on the "not_decoded" field.
func NotDecodedGTE(v string) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNotDecoded), v))
	})
}

// NotDecodedLT applies the LT predicate on the "not_decoded" field.
func NotDecodedLT(v string) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNotDecoded), v))
	})
}

// NotDecodedLTE applies the LTE predicate on the "not_decoded" field.
func NotDecodedLTE(v string) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNotDecoded), v))
	})
}

// NotDecodedContains applies the Contains predicate on the "not_decoded" field.
func NotDecodedContains(v string) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNotDecoded), v))
	})
}

// NotDecodedHasPrefix applies the HasPrefix predicate on the "not_decoded" field.
func NotDecodedHasPrefix(v string) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNotDecoded), v))
	})
}

// NotDecodedHasSuffix applies the HasSuffix predicate on the "not_decoded" field.
func NotDecodedHasSuffix(v string) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNotDecoded), v))
	})
}

// NotDecodedIsNil applies the IsNil predicate on the "not_decoded" field.
func NotDecodedIsNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNotDecoded)))
	})
}

// NotDecodedNotNil applies the NotNil predicate on the "not_decoded" field.
func NotDecodedNotNil() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNotDecoded)))
	})
}

// NotDecodedEqualFold applies the EqualFold predicate on the "not_decoded" field.
func NotDecodedEqualFold(v string) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNotDecoded), v))
	})
}

// NotDecodedContainsFold applies the ContainsFold predicate on the "not_decoded" field.
func NotDecodedContainsFold(v string) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNotDecoded), v))
	})
}

// HasSkyConditions applies the HasEdge predicate on the "sky_conditions" edge.
func HasSkyConditions() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SkyConditionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SkyConditionsTable, SkyConditionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSkyConditionsWith applies the HasEdge predicate on the "sky_conditions" edge with a given conditions (other predicates).
func HasSkyConditionsWith(preds ...predicate.SkyCondition) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SkyConditionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SkyConditionsTable, SkyConditionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTurbulenceConditions applies the HasEdge predicate on the "turbulence_conditions" edge.
func HasTurbulenceConditions() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TurbulenceConditionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TurbulenceConditionsTable, TurbulenceConditionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTurbulenceConditionsWith applies the HasEdge predicate on the "turbulence_conditions" edge with a given conditions (other predicates).
func HasTurbulenceConditionsWith(preds ...predicate.TurbulenceCondition) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TurbulenceConditionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TurbulenceConditionsTable, TurbulenceConditionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIcingConditions applies the HasEdge predicate on the "icing_conditions" edge.
func HasIcingConditions() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(IcingConditionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IcingConditionsTable, IcingConditionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIcingConditionsWith applies the HasEdge predicate on the "icing_conditions" edge with a given conditions (other predicates).
func HasIcingConditionsWith(preds ...predicate.IcingCondition) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(IcingConditionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IcingConditionsTable, IcingConditionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTemperatureData applies the HasEdge predicate on the "temperature_data" edge.
func HasTemperatureData() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TemperatureDataTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TemperatureDataTable, TemperatureDataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTemperatureDataWith applies the HasEdge predicate on the "temperature_data" edge with a given conditions (other predicates).
func HasTemperatureDataWith(preds ...predicate.TemperatureData) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TemperatureDataInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TemperatureDataTable, TemperatureDataColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Forecast) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Forecast) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Forecast) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		p(s.Not())
	})
}
