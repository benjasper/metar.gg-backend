// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"metar.gg/ent/airport"
	"metar.gg/ent/runway"
)

// RunwayCreate is the builder for creating a Runway entity.
type RunwayCreate struct {
	config
	mutation *RunwayMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetHash sets the "hash" field.
func (rc *RunwayCreate) SetHash(u uint64) *RunwayCreate {
	rc.mutation.SetHash(u)
	return rc
}

// SetImportFlag sets the "import_flag" field.
func (rc *RunwayCreate) SetImportFlag(b bool) *RunwayCreate {
	rc.mutation.SetImportFlag(b)
	return rc
}

// SetNillableImportFlag sets the "import_flag" field if the given value is not nil.
func (rc *RunwayCreate) SetNillableImportFlag(b *bool) *RunwayCreate {
	if b != nil {
		rc.SetImportFlag(*b)
	}
	return rc
}

// SetCreateTime sets the "create_time" field.
func (rc *RunwayCreate) SetCreateTime(t time.Time) *RunwayCreate {
	rc.mutation.SetCreateTime(t)
	return rc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rc *RunwayCreate) SetNillableCreateTime(t *time.Time) *RunwayCreate {
	if t != nil {
		rc.SetCreateTime(*t)
	}
	return rc
}

// SetUpdateTime sets the "update_time" field.
func (rc *RunwayCreate) SetUpdateTime(t time.Time) *RunwayCreate {
	rc.mutation.SetUpdateTime(t)
	return rc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (rc *RunwayCreate) SetNillableUpdateTime(t *time.Time) *RunwayCreate {
	if t != nil {
		rc.SetUpdateTime(*t)
	}
	return rc
}

// SetAirportIdentifier sets the "airport_identifier" field.
func (rc *RunwayCreate) SetAirportIdentifier(s string) *RunwayCreate {
	rc.mutation.SetAirportIdentifier(s)
	return rc
}

// SetLength sets the "length" field.
func (rc *RunwayCreate) SetLength(i int) *RunwayCreate {
	rc.mutation.SetLength(i)
	return rc
}

// SetWidth sets the "width" field.
func (rc *RunwayCreate) SetWidth(i int) *RunwayCreate {
	rc.mutation.SetWidth(i)
	return rc
}

// SetSurface sets the "surface" field.
func (rc *RunwayCreate) SetSurface(s string) *RunwayCreate {
	rc.mutation.SetSurface(s)
	return rc
}

// SetLighted sets the "lighted" field.
func (rc *RunwayCreate) SetLighted(b bool) *RunwayCreate {
	rc.mutation.SetLighted(b)
	return rc
}

// SetClosed sets the "closed" field.
func (rc *RunwayCreate) SetClosed(b bool) *RunwayCreate {
	rc.mutation.SetClosed(b)
	return rc
}

// SetLowNumberedRunwayEndIdentifier sets the "low_numbered_runway_end_identifier" field.
func (rc *RunwayCreate) SetLowNumberedRunwayEndIdentifier(s string) *RunwayCreate {
	rc.mutation.SetLowNumberedRunwayEndIdentifier(s)
	return rc
}

// SetLowNumberedRunwayEndLatitude sets the "low_numbered_runway_end_latitude" field.
func (rc *RunwayCreate) SetLowNumberedRunwayEndLatitude(f float64) *RunwayCreate {
	rc.mutation.SetLowNumberedRunwayEndLatitude(f)
	return rc
}

// SetLowNumberedRunwayEndLongitude sets the "low_numbered_runway_end_longitude" field.
func (rc *RunwayCreate) SetLowNumberedRunwayEndLongitude(f float64) *RunwayCreate {
	rc.mutation.SetLowNumberedRunwayEndLongitude(f)
	return rc
}

// SetLowNumberedRunwayEndElevation sets the "low_numbered_runway_end_elevation" field.
func (rc *RunwayCreate) SetLowNumberedRunwayEndElevation(i int) *RunwayCreate {
	rc.mutation.SetLowNumberedRunwayEndElevation(i)
	return rc
}

// SetLowNumberedRunwayEndHeading sets the "low_numbered_runway_end_heading" field.
func (rc *RunwayCreate) SetLowNumberedRunwayEndHeading(i int) *RunwayCreate {
	rc.mutation.SetLowNumberedRunwayEndHeading(i)
	return rc
}

// SetLowNumberedRunwayEndDisplaced sets the "low_numbered_runway_end_displaced" field.
func (rc *RunwayCreate) SetLowNumberedRunwayEndDisplaced(i int) *RunwayCreate {
	rc.mutation.SetLowNumberedRunwayEndDisplaced(i)
	return rc
}

// SetHighNumberedRunwayEndIdentifier sets the "high_numbered_runway_end_identifier" field.
func (rc *RunwayCreate) SetHighNumberedRunwayEndIdentifier(s string) *RunwayCreate {
	rc.mutation.SetHighNumberedRunwayEndIdentifier(s)
	return rc
}

// SetHighNumberedRunwayEndLatitude sets the "high_numbered_runway_end_latitude" field.
func (rc *RunwayCreate) SetHighNumberedRunwayEndLatitude(f float64) *RunwayCreate {
	rc.mutation.SetHighNumberedRunwayEndLatitude(f)
	return rc
}

// SetHighNumberedRunwayEndLongitude sets the "high_numbered_runway_end_longitude" field.
func (rc *RunwayCreate) SetHighNumberedRunwayEndLongitude(f float64) *RunwayCreate {
	rc.mutation.SetHighNumberedRunwayEndLongitude(f)
	return rc
}

// SetHighNumberedRunwayEndElevation sets the "high_numbered_runway_end_elevation" field.
func (rc *RunwayCreate) SetHighNumberedRunwayEndElevation(i int) *RunwayCreate {
	rc.mutation.SetHighNumberedRunwayEndElevation(i)
	return rc
}

// SetHighNumberedRunwayEndHeading sets the "high_numbered_runway_end_heading" field.
func (rc *RunwayCreate) SetHighNumberedRunwayEndHeading(i int) *RunwayCreate {
	rc.mutation.SetHighNumberedRunwayEndHeading(i)
	return rc
}

// SetHighNumberedRunwayEndDisplaced sets the "high_numbered_runway_end_displaced" field.
func (rc *RunwayCreate) SetHighNumberedRunwayEndDisplaced(i int) *RunwayCreate {
	rc.mutation.SetHighNumberedRunwayEndDisplaced(i)
	return rc
}

// SetID sets the "id" field.
func (rc *RunwayCreate) SetID(i int) *RunwayCreate {
	rc.mutation.SetID(i)
	return rc
}

// SetAirportID sets the "airport" edge to the Airport entity by ID.
func (rc *RunwayCreate) SetAirportID(id int) *RunwayCreate {
	rc.mutation.SetAirportID(id)
	return rc
}

// SetNillableAirportID sets the "airport" edge to the Airport entity by ID if the given value is not nil.
func (rc *RunwayCreate) SetNillableAirportID(id *int) *RunwayCreate {
	if id != nil {
		rc = rc.SetAirportID(*id)
	}
	return rc
}

// SetAirport sets the "airport" edge to the Airport entity.
func (rc *RunwayCreate) SetAirport(a *Airport) *RunwayCreate {
	return rc.SetAirportID(a.ID)
}

// Mutation returns the RunwayMutation object of the builder.
func (rc *RunwayCreate) Mutation() *RunwayMutation {
	return rc.mutation
}

// Save creates the Runway in the database.
func (rc *RunwayCreate) Save(ctx context.Context) (*Runway, error) {
	var (
		err  error
		node *Runway
	)
	rc.defaults()
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RunwayMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Runway)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RunwayMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RunwayCreate) SaveX(ctx context.Context) *Runway {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RunwayCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RunwayCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RunwayCreate) defaults() {
	if _, ok := rc.mutation.ImportFlag(); !ok {
		v := runway.DefaultImportFlag
		rc.mutation.SetImportFlag(v)
	}
	if _, ok := rc.mutation.CreateTime(); !ok {
		v := runway.DefaultCreateTime()
		rc.mutation.SetCreateTime(v)
	}
	if _, ok := rc.mutation.UpdateTime(); !ok {
		v := runway.DefaultUpdateTime()
		rc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RunwayCreate) check() error {
	if _, ok := rc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "Runway.hash"`)}
	}
	if _, ok := rc.mutation.ImportFlag(); !ok {
		return &ValidationError{Name: "import_flag", err: errors.New(`ent: missing required field "Runway.import_flag"`)}
	}
	if _, ok := rc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Runway.create_time"`)}
	}
	if _, ok := rc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Runway.update_time"`)}
	}
	if _, ok := rc.mutation.AirportIdentifier(); !ok {
		return &ValidationError{Name: "airport_identifier", err: errors.New(`ent: missing required field "Runway.airport_identifier"`)}
	}
	if _, ok := rc.mutation.Length(); !ok {
		return &ValidationError{Name: "length", err: errors.New(`ent: missing required field "Runway.length"`)}
	}
	if _, ok := rc.mutation.Width(); !ok {
		return &ValidationError{Name: "width", err: errors.New(`ent: missing required field "Runway.width"`)}
	}
	if _, ok := rc.mutation.Surface(); !ok {
		return &ValidationError{Name: "surface", err: errors.New(`ent: missing required field "Runway.surface"`)}
	}
	if _, ok := rc.mutation.Lighted(); !ok {
		return &ValidationError{Name: "lighted", err: errors.New(`ent: missing required field "Runway.lighted"`)}
	}
	if _, ok := rc.mutation.Closed(); !ok {
		return &ValidationError{Name: "closed", err: errors.New(`ent: missing required field "Runway.closed"`)}
	}
	if _, ok := rc.mutation.LowNumberedRunwayEndIdentifier(); !ok {
		return &ValidationError{Name: "low_numbered_runway_end_identifier", err: errors.New(`ent: missing required field "Runway.low_numbered_runway_end_identifier"`)}
	}
	if _, ok := rc.mutation.LowNumberedRunwayEndLatitude(); !ok {
		return &ValidationError{Name: "low_numbered_runway_end_latitude", err: errors.New(`ent: missing required field "Runway.low_numbered_runway_end_latitude"`)}
	}
	if _, ok := rc.mutation.LowNumberedRunwayEndLongitude(); !ok {
		return &ValidationError{Name: "low_numbered_runway_end_longitude", err: errors.New(`ent: missing required field "Runway.low_numbered_runway_end_longitude"`)}
	}
	if _, ok := rc.mutation.LowNumberedRunwayEndElevation(); !ok {
		return &ValidationError{Name: "low_numbered_runway_end_elevation", err: errors.New(`ent: missing required field "Runway.low_numbered_runway_end_elevation"`)}
	}
	if _, ok := rc.mutation.LowNumberedRunwayEndHeading(); !ok {
		return &ValidationError{Name: "low_numbered_runway_end_heading", err: errors.New(`ent: missing required field "Runway.low_numbered_runway_end_heading"`)}
	}
	if _, ok := rc.mutation.LowNumberedRunwayEndDisplaced(); !ok {
		return &ValidationError{Name: "low_numbered_runway_end_displaced", err: errors.New(`ent: missing required field "Runway.low_numbered_runway_end_displaced"`)}
	}
	if _, ok := rc.mutation.HighNumberedRunwayEndIdentifier(); !ok {
		return &ValidationError{Name: "high_numbered_runway_end_identifier", err: errors.New(`ent: missing required field "Runway.high_numbered_runway_end_identifier"`)}
	}
	if _, ok := rc.mutation.HighNumberedRunwayEndLatitude(); !ok {
		return &ValidationError{Name: "high_numbered_runway_end_latitude", err: errors.New(`ent: missing required field "Runway.high_numbered_runway_end_latitude"`)}
	}
	if _, ok := rc.mutation.HighNumberedRunwayEndLongitude(); !ok {
		return &ValidationError{Name: "high_numbered_runway_end_longitude", err: errors.New(`ent: missing required field "Runway.high_numbered_runway_end_longitude"`)}
	}
	if _, ok := rc.mutation.HighNumberedRunwayEndElevation(); !ok {
		return &ValidationError{Name: "high_numbered_runway_end_elevation", err: errors.New(`ent: missing required field "Runway.high_numbered_runway_end_elevation"`)}
	}
	if _, ok := rc.mutation.HighNumberedRunwayEndHeading(); !ok {
		return &ValidationError{Name: "high_numbered_runway_end_heading", err: errors.New(`ent: missing required field "Runway.high_numbered_runway_end_heading"`)}
	}
	if _, ok := rc.mutation.HighNumberedRunwayEndDisplaced(); !ok {
		return &ValidationError{Name: "high_numbered_runway_end_displaced", err: errors.New(`ent: missing required field "Runway.high_numbered_runway_end_displaced"`)}
	}
	return nil
}

func (rc *RunwayCreate) sqlSave(ctx context.Context) (*Runway, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (rc *RunwayCreate) createSpec() (*Runway, *sqlgraph.CreateSpec) {
	var (
		_node = &Runway{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: runway.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: runway.FieldID,
			},
		}
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.Hash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: runway.FieldHash,
		})
		_node.Hash = value
	}
	if value, ok := rc.mutation.ImportFlag(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: runway.FieldImportFlag,
		})
		_node.ImportFlag = value
	}
	if value, ok := rc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: runway.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := rc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: runway.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := rc.mutation.AirportIdentifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: runway.FieldAirportIdentifier,
		})
		_node.AirportIdentifier = value
	}
	if value, ok := rc.mutation.Length(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldLength,
		})
		_node.Length = value
	}
	if value, ok := rc.mutation.Width(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldWidth,
		})
		_node.Width = value
	}
	if value, ok := rc.mutation.Surface(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: runway.FieldSurface,
		})
		_node.Surface = value
	}
	if value, ok := rc.mutation.Lighted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: runway.FieldLighted,
		})
		_node.Lighted = value
	}
	if value, ok := rc.mutation.Closed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: runway.FieldClosed,
		})
		_node.Closed = value
	}
	if value, ok := rc.mutation.LowNumberedRunwayEndIdentifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndIdentifier,
		})
		_node.LowNumberedRunwayEndIdentifier = value
	}
	if value, ok := rc.mutation.LowNumberedRunwayEndLatitude(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndLatitude,
		})
		_node.LowNumberedRunwayEndLatitude = value
	}
	if value, ok := rc.mutation.LowNumberedRunwayEndLongitude(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndLongitude,
		})
		_node.LowNumberedRunwayEndLongitude = value
	}
	if value, ok := rc.mutation.LowNumberedRunwayEndElevation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndElevation,
		})
		_node.LowNumberedRunwayEndElevation = value
	}
	if value, ok := rc.mutation.LowNumberedRunwayEndHeading(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndHeading,
		})
		_node.LowNumberedRunwayEndHeading = value
	}
	if value, ok := rc.mutation.LowNumberedRunwayEndDisplaced(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndDisplaced,
		})
		_node.LowNumberedRunwayEndDisplaced = value
	}
	if value, ok := rc.mutation.HighNumberedRunwayEndIdentifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndIdentifier,
		})
		_node.HighNumberedRunwayEndIdentifier = value
	}
	if value, ok := rc.mutation.HighNumberedRunwayEndLatitude(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndLatitude,
		})
		_node.HighNumberedRunwayEndLatitude = value
	}
	if value, ok := rc.mutation.HighNumberedRunwayEndLongitude(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndLongitude,
		})
		_node.HighNumberedRunwayEndLongitude = value
	}
	if value, ok := rc.mutation.HighNumberedRunwayEndElevation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndElevation,
		})
		_node.HighNumberedRunwayEndElevation = value
	}
	if value, ok := rc.mutation.HighNumberedRunwayEndHeading(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndHeading,
		})
		_node.HighNumberedRunwayEndHeading = value
	}
	if value, ok := rc.mutation.HighNumberedRunwayEndDisplaced(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndDisplaced,
		})
		_node.HighNumberedRunwayEndDisplaced = value
	}
	if nodes := rc.mutation.AirportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   runway.AirportTable,
			Columns: []string{runway.AirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: airport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.airport_runways = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Runway.Create().
//		SetHash(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RunwayUpsert) {
//			SetHash(v+v).
//		}).
//		Exec(ctx)
//
func (rc *RunwayCreate) OnConflict(opts ...sql.ConflictOption) *RunwayUpsertOne {
	rc.conflict = opts
	return &RunwayUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Runway.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rc *RunwayCreate) OnConflictColumns(columns ...string) *RunwayUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RunwayUpsertOne{
		create: rc,
	}
}

type (
	// RunwayUpsertOne is the builder for "upsert"-ing
	//  one Runway node.
	RunwayUpsertOne struct {
		create *RunwayCreate
	}

	// RunwayUpsert is the "OnConflict" setter.
	RunwayUpsert struct {
		*sql.UpdateSet
	}
)

// SetHash sets the "hash" field.
func (u *RunwayUpsert) SetHash(v uint64) *RunwayUpsert {
	u.Set(runway.FieldHash, v)
	return u
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateHash() *RunwayUpsert {
	u.SetExcluded(runway.FieldHash)
	return u
}

// AddHash adds v to the "hash" field.
func (u *RunwayUpsert) AddHash(v uint64) *RunwayUpsert {
	u.Add(runway.FieldHash, v)
	return u
}

// SetImportFlag sets the "import_flag" field.
func (u *RunwayUpsert) SetImportFlag(v bool) *RunwayUpsert {
	u.Set(runway.FieldImportFlag, v)
	return u
}

// UpdateImportFlag sets the "import_flag" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateImportFlag() *RunwayUpsert {
	u.SetExcluded(runway.FieldImportFlag)
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *RunwayUpsert) SetCreateTime(v time.Time) *RunwayUpsert {
	u.Set(runway.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateCreateTime() *RunwayUpsert {
	u.SetExcluded(runway.FieldCreateTime)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *RunwayUpsert) SetUpdateTime(v time.Time) *RunwayUpsert {
	u.Set(runway.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateUpdateTime() *RunwayUpsert {
	u.SetExcluded(runway.FieldUpdateTime)
	return u
}

// SetAirportIdentifier sets the "airport_identifier" field.
func (u *RunwayUpsert) SetAirportIdentifier(v string) *RunwayUpsert {
	u.Set(runway.FieldAirportIdentifier, v)
	return u
}

// UpdateAirportIdentifier sets the "airport_identifier" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateAirportIdentifier() *RunwayUpsert {
	u.SetExcluded(runway.FieldAirportIdentifier)
	return u
}

// SetLength sets the "length" field.
func (u *RunwayUpsert) SetLength(v int) *RunwayUpsert {
	u.Set(runway.FieldLength, v)
	return u
}

// UpdateLength sets the "length" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateLength() *RunwayUpsert {
	u.SetExcluded(runway.FieldLength)
	return u
}

// AddLength adds v to the "length" field.
func (u *RunwayUpsert) AddLength(v int) *RunwayUpsert {
	u.Add(runway.FieldLength, v)
	return u
}

// SetWidth sets the "width" field.
func (u *RunwayUpsert) SetWidth(v int) *RunwayUpsert {
	u.Set(runway.FieldWidth, v)
	return u
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateWidth() *RunwayUpsert {
	u.SetExcluded(runway.FieldWidth)
	return u
}

// AddWidth adds v to the "width" field.
func (u *RunwayUpsert) AddWidth(v int) *RunwayUpsert {
	u.Add(runway.FieldWidth, v)
	return u
}

// SetSurface sets the "surface" field.
func (u *RunwayUpsert) SetSurface(v string) *RunwayUpsert {
	u.Set(runway.FieldSurface, v)
	return u
}

// UpdateSurface sets the "surface" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateSurface() *RunwayUpsert {
	u.SetExcluded(runway.FieldSurface)
	return u
}

// SetLighted sets the "lighted" field.
func (u *RunwayUpsert) SetLighted(v bool) *RunwayUpsert {
	u.Set(runway.FieldLighted, v)
	return u
}

// UpdateLighted sets the "lighted" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateLighted() *RunwayUpsert {
	u.SetExcluded(runway.FieldLighted)
	return u
}

// SetClosed sets the "closed" field.
func (u *RunwayUpsert) SetClosed(v bool) *RunwayUpsert {
	u.Set(runway.FieldClosed, v)
	return u
}

// UpdateClosed sets the "closed" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateClosed() *RunwayUpsert {
	u.SetExcluded(runway.FieldClosed)
	return u
}

// SetLowNumberedRunwayEndIdentifier sets the "low_numbered_runway_end_identifier" field.
func (u *RunwayUpsert) SetLowNumberedRunwayEndIdentifier(v string) *RunwayUpsert {
	u.Set(runway.FieldLowNumberedRunwayEndIdentifier, v)
	return u
}

// UpdateLowNumberedRunwayEndIdentifier sets the "low_numbered_runway_end_identifier" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateLowNumberedRunwayEndIdentifier() *RunwayUpsert {
	u.SetExcluded(runway.FieldLowNumberedRunwayEndIdentifier)
	return u
}

// SetLowNumberedRunwayEndLatitude sets the "low_numbered_runway_end_latitude" field.
func (u *RunwayUpsert) SetLowNumberedRunwayEndLatitude(v float64) *RunwayUpsert {
	u.Set(runway.FieldLowNumberedRunwayEndLatitude, v)
	return u
}

// UpdateLowNumberedRunwayEndLatitude sets the "low_numbered_runway_end_latitude" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateLowNumberedRunwayEndLatitude() *RunwayUpsert {
	u.SetExcluded(runway.FieldLowNumberedRunwayEndLatitude)
	return u
}

// AddLowNumberedRunwayEndLatitude adds v to the "low_numbered_runway_end_latitude" field.
func (u *RunwayUpsert) AddLowNumberedRunwayEndLatitude(v float64) *RunwayUpsert {
	u.Add(runway.FieldLowNumberedRunwayEndLatitude, v)
	return u
}

// SetLowNumberedRunwayEndLongitude sets the "low_numbered_runway_end_longitude" field.
func (u *RunwayUpsert) SetLowNumberedRunwayEndLongitude(v float64) *RunwayUpsert {
	u.Set(runway.FieldLowNumberedRunwayEndLongitude, v)
	return u
}

// UpdateLowNumberedRunwayEndLongitude sets the "low_numbered_runway_end_longitude" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateLowNumberedRunwayEndLongitude() *RunwayUpsert {
	u.SetExcluded(runway.FieldLowNumberedRunwayEndLongitude)
	return u
}

// AddLowNumberedRunwayEndLongitude adds v to the "low_numbered_runway_end_longitude" field.
func (u *RunwayUpsert) AddLowNumberedRunwayEndLongitude(v float64) *RunwayUpsert {
	u.Add(runway.FieldLowNumberedRunwayEndLongitude, v)
	return u
}

// SetLowNumberedRunwayEndElevation sets the "low_numbered_runway_end_elevation" field.
func (u *RunwayUpsert) SetLowNumberedRunwayEndElevation(v int) *RunwayUpsert {
	u.Set(runway.FieldLowNumberedRunwayEndElevation, v)
	return u
}

// UpdateLowNumberedRunwayEndElevation sets the "low_numbered_runway_end_elevation" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateLowNumberedRunwayEndElevation() *RunwayUpsert {
	u.SetExcluded(runway.FieldLowNumberedRunwayEndElevation)
	return u
}

// AddLowNumberedRunwayEndElevation adds v to the "low_numbered_runway_end_elevation" field.
func (u *RunwayUpsert) AddLowNumberedRunwayEndElevation(v int) *RunwayUpsert {
	u.Add(runway.FieldLowNumberedRunwayEndElevation, v)
	return u
}

// SetLowNumberedRunwayEndHeading sets the "low_numbered_runway_end_heading" field.
func (u *RunwayUpsert) SetLowNumberedRunwayEndHeading(v int) *RunwayUpsert {
	u.Set(runway.FieldLowNumberedRunwayEndHeading, v)
	return u
}

// UpdateLowNumberedRunwayEndHeading sets the "low_numbered_runway_end_heading" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateLowNumberedRunwayEndHeading() *RunwayUpsert {
	u.SetExcluded(runway.FieldLowNumberedRunwayEndHeading)
	return u
}

// AddLowNumberedRunwayEndHeading adds v to the "low_numbered_runway_end_heading" field.
func (u *RunwayUpsert) AddLowNumberedRunwayEndHeading(v int) *RunwayUpsert {
	u.Add(runway.FieldLowNumberedRunwayEndHeading, v)
	return u
}

// SetLowNumberedRunwayEndDisplaced sets the "low_numbered_runway_end_displaced" field.
func (u *RunwayUpsert) SetLowNumberedRunwayEndDisplaced(v int) *RunwayUpsert {
	u.Set(runway.FieldLowNumberedRunwayEndDisplaced, v)
	return u
}

// UpdateLowNumberedRunwayEndDisplaced sets the "low_numbered_runway_end_displaced" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateLowNumberedRunwayEndDisplaced() *RunwayUpsert {
	u.SetExcluded(runway.FieldLowNumberedRunwayEndDisplaced)
	return u
}

// AddLowNumberedRunwayEndDisplaced adds v to the "low_numbered_runway_end_displaced" field.
func (u *RunwayUpsert) AddLowNumberedRunwayEndDisplaced(v int) *RunwayUpsert {
	u.Add(runway.FieldLowNumberedRunwayEndDisplaced, v)
	return u
}

// SetHighNumberedRunwayEndIdentifier sets the "high_numbered_runway_end_identifier" field.
func (u *RunwayUpsert) SetHighNumberedRunwayEndIdentifier(v string) *RunwayUpsert {
	u.Set(runway.FieldHighNumberedRunwayEndIdentifier, v)
	return u
}

// UpdateHighNumberedRunwayEndIdentifier sets the "high_numbered_runway_end_identifier" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateHighNumberedRunwayEndIdentifier() *RunwayUpsert {
	u.SetExcluded(runway.FieldHighNumberedRunwayEndIdentifier)
	return u
}

// SetHighNumberedRunwayEndLatitude sets the "high_numbered_runway_end_latitude" field.
func (u *RunwayUpsert) SetHighNumberedRunwayEndLatitude(v float64) *RunwayUpsert {
	u.Set(runway.FieldHighNumberedRunwayEndLatitude, v)
	return u
}

// UpdateHighNumberedRunwayEndLatitude sets the "high_numbered_runway_end_latitude" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateHighNumberedRunwayEndLatitude() *RunwayUpsert {
	u.SetExcluded(runway.FieldHighNumberedRunwayEndLatitude)
	return u
}

// AddHighNumberedRunwayEndLatitude adds v to the "high_numbered_runway_end_latitude" field.
func (u *RunwayUpsert) AddHighNumberedRunwayEndLatitude(v float64) *RunwayUpsert {
	u.Add(runway.FieldHighNumberedRunwayEndLatitude, v)
	return u
}

// SetHighNumberedRunwayEndLongitude sets the "high_numbered_runway_end_longitude" field.
func (u *RunwayUpsert) SetHighNumberedRunwayEndLongitude(v float64) *RunwayUpsert {
	u.Set(runway.FieldHighNumberedRunwayEndLongitude, v)
	return u
}

// UpdateHighNumberedRunwayEndLongitude sets the "high_numbered_runway_end_longitude" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateHighNumberedRunwayEndLongitude() *RunwayUpsert {
	u.SetExcluded(runway.FieldHighNumberedRunwayEndLongitude)
	return u
}

// AddHighNumberedRunwayEndLongitude adds v to the "high_numbered_runway_end_longitude" field.
func (u *RunwayUpsert) AddHighNumberedRunwayEndLongitude(v float64) *RunwayUpsert {
	u.Add(runway.FieldHighNumberedRunwayEndLongitude, v)
	return u
}

// SetHighNumberedRunwayEndElevation sets the "high_numbered_runway_end_elevation" field.
func (u *RunwayUpsert) SetHighNumberedRunwayEndElevation(v int) *RunwayUpsert {
	u.Set(runway.FieldHighNumberedRunwayEndElevation, v)
	return u
}

// UpdateHighNumberedRunwayEndElevation sets the "high_numbered_runway_end_elevation" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateHighNumberedRunwayEndElevation() *RunwayUpsert {
	u.SetExcluded(runway.FieldHighNumberedRunwayEndElevation)
	return u
}

// AddHighNumberedRunwayEndElevation adds v to the "high_numbered_runway_end_elevation" field.
func (u *RunwayUpsert) AddHighNumberedRunwayEndElevation(v int) *RunwayUpsert {
	u.Add(runway.FieldHighNumberedRunwayEndElevation, v)
	return u
}

// SetHighNumberedRunwayEndHeading sets the "high_numbered_runway_end_heading" field.
func (u *RunwayUpsert) SetHighNumberedRunwayEndHeading(v int) *RunwayUpsert {
	u.Set(runway.FieldHighNumberedRunwayEndHeading, v)
	return u
}

// UpdateHighNumberedRunwayEndHeading sets the "high_numbered_runway_end_heading" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateHighNumberedRunwayEndHeading() *RunwayUpsert {
	u.SetExcluded(runway.FieldHighNumberedRunwayEndHeading)
	return u
}

// AddHighNumberedRunwayEndHeading adds v to the "high_numbered_runway_end_heading" field.
func (u *RunwayUpsert) AddHighNumberedRunwayEndHeading(v int) *RunwayUpsert {
	u.Add(runway.FieldHighNumberedRunwayEndHeading, v)
	return u
}

// SetHighNumberedRunwayEndDisplaced sets the "high_numbered_runway_end_displaced" field.
func (u *RunwayUpsert) SetHighNumberedRunwayEndDisplaced(v int) *RunwayUpsert {
	u.Set(runway.FieldHighNumberedRunwayEndDisplaced, v)
	return u
}

// UpdateHighNumberedRunwayEndDisplaced sets the "high_numbered_runway_end_displaced" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateHighNumberedRunwayEndDisplaced() *RunwayUpsert {
	u.SetExcluded(runway.FieldHighNumberedRunwayEndDisplaced)
	return u
}

// AddHighNumberedRunwayEndDisplaced adds v to the "high_numbered_runway_end_displaced" field.
func (u *RunwayUpsert) AddHighNumberedRunwayEndDisplaced(v int) *RunwayUpsert {
	u.Add(runway.FieldHighNumberedRunwayEndDisplaced, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Runway.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(runway.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *RunwayUpsertOne) UpdateNewValues() *RunwayUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(runway.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(runway.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Runway.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *RunwayUpsertOne) Ignore() *RunwayUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RunwayUpsertOne) DoNothing() *RunwayUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RunwayCreate.OnConflict
// documentation for more info.
func (u *RunwayUpsertOne) Update(set func(*RunwayUpsert)) *RunwayUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RunwayUpsert{UpdateSet: update})
	}))
	return u
}

// SetHash sets the "hash" field.
func (u *RunwayUpsertOne) SetHash(v uint64) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHash(v)
	})
}

// AddHash adds v to the "hash" field.
func (u *RunwayUpsertOne) AddHash(v uint64) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateHash() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHash()
	})
}

// SetImportFlag sets the "import_flag" field.
func (u *RunwayUpsertOne) SetImportFlag(v bool) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetImportFlag(v)
	})
}

// UpdateImportFlag sets the "import_flag" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateImportFlag() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateImportFlag()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *RunwayUpsertOne) SetCreateTime(v time.Time) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateCreateTime() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *RunwayUpsertOne) SetUpdateTime(v time.Time) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateUpdateTime() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetAirportIdentifier sets the "airport_identifier" field.
func (u *RunwayUpsertOne) SetAirportIdentifier(v string) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetAirportIdentifier(v)
	})
}

// UpdateAirportIdentifier sets the "airport_identifier" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateAirportIdentifier() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateAirportIdentifier()
	})
}

// SetLength sets the "length" field.
func (u *RunwayUpsertOne) SetLength(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLength(v)
	})
}

// AddLength adds v to the "length" field.
func (u *RunwayUpsertOne) AddLength(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddLength(v)
	})
}

// UpdateLength sets the "length" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateLength() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLength()
	})
}

// SetWidth sets the "width" field.
func (u *RunwayUpsertOne) SetWidth(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetWidth(v)
	})
}

// AddWidth adds v to the "width" field.
func (u *RunwayUpsertOne) AddWidth(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddWidth(v)
	})
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateWidth() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateWidth()
	})
}

// SetSurface sets the "surface" field.
func (u *RunwayUpsertOne) SetSurface(v string) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetSurface(v)
	})
}

// UpdateSurface sets the "surface" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateSurface() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateSurface()
	})
}

// SetLighted sets the "lighted" field.
func (u *RunwayUpsertOne) SetLighted(v bool) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLighted(v)
	})
}

// UpdateLighted sets the "lighted" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateLighted() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLighted()
	})
}

// SetClosed sets the "closed" field.
func (u *RunwayUpsertOne) SetClosed(v bool) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetClosed(v)
	})
}

// UpdateClosed sets the "closed" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateClosed() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateClosed()
	})
}

// SetLowNumberedRunwayEndIdentifier sets the "low_numbered_runway_end_identifier" field.
func (u *RunwayUpsertOne) SetLowNumberedRunwayEndIdentifier(v string) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLowNumberedRunwayEndIdentifier(v)
	})
}

// UpdateLowNumberedRunwayEndIdentifier sets the "low_numbered_runway_end_identifier" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateLowNumberedRunwayEndIdentifier() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLowNumberedRunwayEndIdentifier()
	})
}

// SetLowNumberedRunwayEndLatitude sets the "low_numbered_runway_end_latitude" field.
func (u *RunwayUpsertOne) SetLowNumberedRunwayEndLatitude(v float64) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLowNumberedRunwayEndLatitude(v)
	})
}

// AddLowNumberedRunwayEndLatitude adds v to the "low_numbered_runway_end_latitude" field.
func (u *RunwayUpsertOne) AddLowNumberedRunwayEndLatitude(v float64) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddLowNumberedRunwayEndLatitude(v)
	})
}

// UpdateLowNumberedRunwayEndLatitude sets the "low_numbered_runway_end_latitude" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateLowNumberedRunwayEndLatitude() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLowNumberedRunwayEndLatitude()
	})
}

// SetLowNumberedRunwayEndLongitude sets the "low_numbered_runway_end_longitude" field.
func (u *RunwayUpsertOne) SetLowNumberedRunwayEndLongitude(v float64) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLowNumberedRunwayEndLongitude(v)
	})
}

// AddLowNumberedRunwayEndLongitude adds v to the "low_numbered_runway_end_longitude" field.
func (u *RunwayUpsertOne) AddLowNumberedRunwayEndLongitude(v float64) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddLowNumberedRunwayEndLongitude(v)
	})
}

// UpdateLowNumberedRunwayEndLongitude sets the "low_numbered_runway_end_longitude" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateLowNumberedRunwayEndLongitude() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLowNumberedRunwayEndLongitude()
	})
}

// SetLowNumberedRunwayEndElevation sets the "low_numbered_runway_end_elevation" field.
func (u *RunwayUpsertOne) SetLowNumberedRunwayEndElevation(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLowNumberedRunwayEndElevation(v)
	})
}

// AddLowNumberedRunwayEndElevation adds v to the "low_numbered_runway_end_elevation" field.
func (u *RunwayUpsertOne) AddLowNumberedRunwayEndElevation(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddLowNumberedRunwayEndElevation(v)
	})
}

// UpdateLowNumberedRunwayEndElevation sets the "low_numbered_runway_end_elevation" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateLowNumberedRunwayEndElevation() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLowNumberedRunwayEndElevation()
	})
}

// SetLowNumberedRunwayEndHeading sets the "low_numbered_runway_end_heading" field.
func (u *RunwayUpsertOne) SetLowNumberedRunwayEndHeading(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLowNumberedRunwayEndHeading(v)
	})
}

// AddLowNumberedRunwayEndHeading adds v to the "low_numbered_runway_end_heading" field.
func (u *RunwayUpsertOne) AddLowNumberedRunwayEndHeading(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddLowNumberedRunwayEndHeading(v)
	})
}

// UpdateLowNumberedRunwayEndHeading sets the "low_numbered_runway_end_heading" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateLowNumberedRunwayEndHeading() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLowNumberedRunwayEndHeading()
	})
}

// SetLowNumberedRunwayEndDisplaced sets the "low_numbered_runway_end_displaced" field.
func (u *RunwayUpsertOne) SetLowNumberedRunwayEndDisplaced(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLowNumberedRunwayEndDisplaced(v)
	})
}

// AddLowNumberedRunwayEndDisplaced adds v to the "low_numbered_runway_end_displaced" field.
func (u *RunwayUpsertOne) AddLowNumberedRunwayEndDisplaced(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddLowNumberedRunwayEndDisplaced(v)
	})
}

// UpdateLowNumberedRunwayEndDisplaced sets the "low_numbered_runway_end_displaced" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateLowNumberedRunwayEndDisplaced() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLowNumberedRunwayEndDisplaced()
	})
}

// SetHighNumberedRunwayEndIdentifier sets the "high_numbered_runway_end_identifier" field.
func (u *RunwayUpsertOne) SetHighNumberedRunwayEndIdentifier(v string) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHighNumberedRunwayEndIdentifier(v)
	})
}

// UpdateHighNumberedRunwayEndIdentifier sets the "high_numbered_runway_end_identifier" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateHighNumberedRunwayEndIdentifier() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHighNumberedRunwayEndIdentifier()
	})
}

// SetHighNumberedRunwayEndLatitude sets the "high_numbered_runway_end_latitude" field.
func (u *RunwayUpsertOne) SetHighNumberedRunwayEndLatitude(v float64) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHighNumberedRunwayEndLatitude(v)
	})
}

// AddHighNumberedRunwayEndLatitude adds v to the "high_numbered_runway_end_latitude" field.
func (u *RunwayUpsertOne) AddHighNumberedRunwayEndLatitude(v float64) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddHighNumberedRunwayEndLatitude(v)
	})
}

// UpdateHighNumberedRunwayEndLatitude sets the "high_numbered_runway_end_latitude" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateHighNumberedRunwayEndLatitude() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHighNumberedRunwayEndLatitude()
	})
}

// SetHighNumberedRunwayEndLongitude sets the "high_numbered_runway_end_longitude" field.
func (u *RunwayUpsertOne) SetHighNumberedRunwayEndLongitude(v float64) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHighNumberedRunwayEndLongitude(v)
	})
}

// AddHighNumberedRunwayEndLongitude adds v to the "high_numbered_runway_end_longitude" field.
func (u *RunwayUpsertOne) AddHighNumberedRunwayEndLongitude(v float64) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddHighNumberedRunwayEndLongitude(v)
	})
}

// UpdateHighNumberedRunwayEndLongitude sets the "high_numbered_runway_end_longitude" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateHighNumberedRunwayEndLongitude() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHighNumberedRunwayEndLongitude()
	})
}

// SetHighNumberedRunwayEndElevation sets the "high_numbered_runway_end_elevation" field.
func (u *RunwayUpsertOne) SetHighNumberedRunwayEndElevation(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHighNumberedRunwayEndElevation(v)
	})
}

// AddHighNumberedRunwayEndElevation adds v to the "high_numbered_runway_end_elevation" field.
func (u *RunwayUpsertOne) AddHighNumberedRunwayEndElevation(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddHighNumberedRunwayEndElevation(v)
	})
}

// UpdateHighNumberedRunwayEndElevation sets the "high_numbered_runway_end_elevation" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateHighNumberedRunwayEndElevation() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHighNumberedRunwayEndElevation()
	})
}

// SetHighNumberedRunwayEndHeading sets the "high_numbered_runway_end_heading" field.
func (u *RunwayUpsertOne) SetHighNumberedRunwayEndHeading(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHighNumberedRunwayEndHeading(v)
	})
}

// AddHighNumberedRunwayEndHeading adds v to the "high_numbered_runway_end_heading" field.
func (u *RunwayUpsertOne) AddHighNumberedRunwayEndHeading(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddHighNumberedRunwayEndHeading(v)
	})
}

// UpdateHighNumberedRunwayEndHeading sets the "high_numbered_runway_end_heading" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateHighNumberedRunwayEndHeading() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHighNumberedRunwayEndHeading()
	})
}

// SetHighNumberedRunwayEndDisplaced sets the "high_numbered_runway_end_displaced" field.
func (u *RunwayUpsertOne) SetHighNumberedRunwayEndDisplaced(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHighNumberedRunwayEndDisplaced(v)
	})
}

// AddHighNumberedRunwayEndDisplaced adds v to the "high_numbered_runway_end_displaced" field.
func (u *RunwayUpsertOne) AddHighNumberedRunwayEndDisplaced(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddHighNumberedRunwayEndDisplaced(v)
	})
}

// UpdateHighNumberedRunwayEndDisplaced sets the "high_numbered_runway_end_displaced" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateHighNumberedRunwayEndDisplaced() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHighNumberedRunwayEndDisplaced()
	})
}

// Exec executes the query.
func (u *RunwayUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RunwayCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RunwayUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RunwayUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RunwayUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RunwayCreateBulk is the builder for creating many Runway entities in bulk.
type RunwayCreateBulk struct {
	config
	builders []*RunwayCreate
	conflict []sql.ConflictOption
}

// Save creates the Runway entities in the database.
func (rcb *RunwayCreateBulk) Save(ctx context.Context) ([]*Runway, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Runway, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RunwayMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RunwayCreateBulk) SaveX(ctx context.Context) []*Runway {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RunwayCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RunwayCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Runway.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RunwayUpsert) {
//			SetHash(v+v).
//		}).
//		Exec(ctx)
//
func (rcb *RunwayCreateBulk) OnConflict(opts ...sql.ConflictOption) *RunwayUpsertBulk {
	rcb.conflict = opts
	return &RunwayUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Runway.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rcb *RunwayCreateBulk) OnConflictColumns(columns ...string) *RunwayUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RunwayUpsertBulk{
		create: rcb,
	}
}

// RunwayUpsertBulk is the builder for "upsert"-ing
// a bulk of Runway nodes.
type RunwayUpsertBulk struct {
	create *RunwayCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Runway.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(runway.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *RunwayUpsertBulk) UpdateNewValues() *RunwayUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(runway.FieldID)
				return
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(runway.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Runway.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *RunwayUpsertBulk) Ignore() *RunwayUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RunwayUpsertBulk) DoNothing() *RunwayUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RunwayCreateBulk.OnConflict
// documentation for more info.
func (u *RunwayUpsertBulk) Update(set func(*RunwayUpsert)) *RunwayUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RunwayUpsert{UpdateSet: update})
	}))
	return u
}

// SetHash sets the "hash" field.
func (u *RunwayUpsertBulk) SetHash(v uint64) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHash(v)
	})
}

// AddHash adds v to the "hash" field.
func (u *RunwayUpsertBulk) AddHash(v uint64) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateHash() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHash()
	})
}

// SetImportFlag sets the "import_flag" field.
func (u *RunwayUpsertBulk) SetImportFlag(v bool) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetImportFlag(v)
	})
}

// UpdateImportFlag sets the "import_flag" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateImportFlag() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateImportFlag()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *RunwayUpsertBulk) SetCreateTime(v time.Time) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateCreateTime() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *RunwayUpsertBulk) SetUpdateTime(v time.Time) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateUpdateTime() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetAirportIdentifier sets the "airport_identifier" field.
func (u *RunwayUpsertBulk) SetAirportIdentifier(v string) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetAirportIdentifier(v)
	})
}

// UpdateAirportIdentifier sets the "airport_identifier" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateAirportIdentifier() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateAirportIdentifier()
	})
}

// SetLength sets the "length" field.
func (u *RunwayUpsertBulk) SetLength(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLength(v)
	})
}

// AddLength adds v to the "length" field.
func (u *RunwayUpsertBulk) AddLength(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddLength(v)
	})
}

// UpdateLength sets the "length" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateLength() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLength()
	})
}

// SetWidth sets the "width" field.
func (u *RunwayUpsertBulk) SetWidth(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetWidth(v)
	})
}

// AddWidth adds v to the "width" field.
func (u *RunwayUpsertBulk) AddWidth(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddWidth(v)
	})
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateWidth() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateWidth()
	})
}

// SetSurface sets the "surface" field.
func (u *RunwayUpsertBulk) SetSurface(v string) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetSurface(v)
	})
}

// UpdateSurface sets the "surface" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateSurface() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateSurface()
	})
}

// SetLighted sets the "lighted" field.
func (u *RunwayUpsertBulk) SetLighted(v bool) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLighted(v)
	})
}

// UpdateLighted sets the "lighted" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateLighted() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLighted()
	})
}

// SetClosed sets the "closed" field.
func (u *RunwayUpsertBulk) SetClosed(v bool) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetClosed(v)
	})
}

// UpdateClosed sets the "closed" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateClosed() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateClosed()
	})
}

// SetLowNumberedRunwayEndIdentifier sets the "low_numbered_runway_end_identifier" field.
func (u *RunwayUpsertBulk) SetLowNumberedRunwayEndIdentifier(v string) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLowNumberedRunwayEndIdentifier(v)
	})
}

// UpdateLowNumberedRunwayEndIdentifier sets the "low_numbered_runway_end_identifier" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateLowNumberedRunwayEndIdentifier() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLowNumberedRunwayEndIdentifier()
	})
}

// SetLowNumberedRunwayEndLatitude sets the "low_numbered_runway_end_latitude" field.
func (u *RunwayUpsertBulk) SetLowNumberedRunwayEndLatitude(v float64) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLowNumberedRunwayEndLatitude(v)
	})
}

// AddLowNumberedRunwayEndLatitude adds v to the "low_numbered_runway_end_latitude" field.
func (u *RunwayUpsertBulk) AddLowNumberedRunwayEndLatitude(v float64) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddLowNumberedRunwayEndLatitude(v)
	})
}

// UpdateLowNumberedRunwayEndLatitude sets the "low_numbered_runway_end_latitude" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateLowNumberedRunwayEndLatitude() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLowNumberedRunwayEndLatitude()
	})
}

// SetLowNumberedRunwayEndLongitude sets the "low_numbered_runway_end_longitude" field.
func (u *RunwayUpsertBulk) SetLowNumberedRunwayEndLongitude(v float64) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLowNumberedRunwayEndLongitude(v)
	})
}

// AddLowNumberedRunwayEndLongitude adds v to the "low_numbered_runway_end_longitude" field.
func (u *RunwayUpsertBulk) AddLowNumberedRunwayEndLongitude(v float64) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddLowNumberedRunwayEndLongitude(v)
	})
}

// UpdateLowNumberedRunwayEndLongitude sets the "low_numbered_runway_end_longitude" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateLowNumberedRunwayEndLongitude() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLowNumberedRunwayEndLongitude()
	})
}

// SetLowNumberedRunwayEndElevation sets the "low_numbered_runway_end_elevation" field.
func (u *RunwayUpsertBulk) SetLowNumberedRunwayEndElevation(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLowNumberedRunwayEndElevation(v)
	})
}

// AddLowNumberedRunwayEndElevation adds v to the "low_numbered_runway_end_elevation" field.
func (u *RunwayUpsertBulk) AddLowNumberedRunwayEndElevation(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddLowNumberedRunwayEndElevation(v)
	})
}

// UpdateLowNumberedRunwayEndElevation sets the "low_numbered_runway_end_elevation" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateLowNumberedRunwayEndElevation() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLowNumberedRunwayEndElevation()
	})
}

// SetLowNumberedRunwayEndHeading sets the "low_numbered_runway_end_heading" field.
func (u *RunwayUpsertBulk) SetLowNumberedRunwayEndHeading(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLowNumberedRunwayEndHeading(v)
	})
}

// AddLowNumberedRunwayEndHeading adds v to the "low_numbered_runway_end_heading" field.
func (u *RunwayUpsertBulk) AddLowNumberedRunwayEndHeading(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddLowNumberedRunwayEndHeading(v)
	})
}

// UpdateLowNumberedRunwayEndHeading sets the "low_numbered_runway_end_heading" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateLowNumberedRunwayEndHeading() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLowNumberedRunwayEndHeading()
	})
}

// SetLowNumberedRunwayEndDisplaced sets the "low_numbered_runway_end_displaced" field.
func (u *RunwayUpsertBulk) SetLowNumberedRunwayEndDisplaced(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLowNumberedRunwayEndDisplaced(v)
	})
}

// AddLowNumberedRunwayEndDisplaced adds v to the "low_numbered_runway_end_displaced" field.
func (u *RunwayUpsertBulk) AddLowNumberedRunwayEndDisplaced(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddLowNumberedRunwayEndDisplaced(v)
	})
}

// UpdateLowNumberedRunwayEndDisplaced sets the "low_numbered_runway_end_displaced" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateLowNumberedRunwayEndDisplaced() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLowNumberedRunwayEndDisplaced()
	})
}

// SetHighNumberedRunwayEndIdentifier sets the "high_numbered_runway_end_identifier" field.
func (u *RunwayUpsertBulk) SetHighNumberedRunwayEndIdentifier(v string) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHighNumberedRunwayEndIdentifier(v)
	})
}

// UpdateHighNumberedRunwayEndIdentifier sets the "high_numbered_runway_end_identifier" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateHighNumberedRunwayEndIdentifier() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHighNumberedRunwayEndIdentifier()
	})
}

// SetHighNumberedRunwayEndLatitude sets the "high_numbered_runway_end_latitude" field.
func (u *RunwayUpsertBulk) SetHighNumberedRunwayEndLatitude(v float64) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHighNumberedRunwayEndLatitude(v)
	})
}

// AddHighNumberedRunwayEndLatitude adds v to the "high_numbered_runway_end_latitude" field.
func (u *RunwayUpsertBulk) AddHighNumberedRunwayEndLatitude(v float64) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddHighNumberedRunwayEndLatitude(v)
	})
}

// UpdateHighNumberedRunwayEndLatitude sets the "high_numbered_runway_end_latitude" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateHighNumberedRunwayEndLatitude() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHighNumberedRunwayEndLatitude()
	})
}

// SetHighNumberedRunwayEndLongitude sets the "high_numbered_runway_end_longitude" field.
func (u *RunwayUpsertBulk) SetHighNumberedRunwayEndLongitude(v float64) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHighNumberedRunwayEndLongitude(v)
	})
}

// AddHighNumberedRunwayEndLongitude adds v to the "high_numbered_runway_end_longitude" field.
func (u *RunwayUpsertBulk) AddHighNumberedRunwayEndLongitude(v float64) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddHighNumberedRunwayEndLongitude(v)
	})
}

// UpdateHighNumberedRunwayEndLongitude sets the "high_numbered_runway_end_longitude" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateHighNumberedRunwayEndLongitude() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHighNumberedRunwayEndLongitude()
	})
}

// SetHighNumberedRunwayEndElevation sets the "high_numbered_runway_end_elevation" field.
func (u *RunwayUpsertBulk) SetHighNumberedRunwayEndElevation(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHighNumberedRunwayEndElevation(v)
	})
}

// AddHighNumberedRunwayEndElevation adds v to the "high_numbered_runway_end_elevation" field.
func (u *RunwayUpsertBulk) AddHighNumberedRunwayEndElevation(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddHighNumberedRunwayEndElevation(v)
	})
}

// UpdateHighNumberedRunwayEndElevation sets the "high_numbered_runway_end_elevation" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateHighNumberedRunwayEndElevation() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHighNumberedRunwayEndElevation()
	})
}

// SetHighNumberedRunwayEndHeading sets the "high_numbered_runway_end_heading" field.
func (u *RunwayUpsertBulk) SetHighNumberedRunwayEndHeading(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHighNumberedRunwayEndHeading(v)
	})
}

// AddHighNumberedRunwayEndHeading adds v to the "high_numbered_runway_end_heading" field.
func (u *RunwayUpsertBulk) AddHighNumberedRunwayEndHeading(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddHighNumberedRunwayEndHeading(v)
	})
}

// UpdateHighNumberedRunwayEndHeading sets the "high_numbered_runway_end_heading" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateHighNumberedRunwayEndHeading() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHighNumberedRunwayEndHeading()
	})
}

// SetHighNumberedRunwayEndDisplaced sets the "high_numbered_runway_end_displaced" field.
func (u *RunwayUpsertBulk) SetHighNumberedRunwayEndDisplaced(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHighNumberedRunwayEndDisplaced(v)
	})
}

// AddHighNumberedRunwayEndDisplaced adds v to the "high_numbered_runway_end_displaced" field.
func (u *RunwayUpsertBulk) AddHighNumberedRunwayEndDisplaced(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddHighNumberedRunwayEndDisplaced(v)
	})
}

// UpdateHighNumberedRunwayEndDisplaced sets the "high_numbered_runway_end_displaced" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateHighNumberedRunwayEndDisplaced() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHighNumberedRunwayEndDisplaced()
	})
}

// Exec executes the query.
func (u *RunwayUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RunwayCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RunwayCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RunwayUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
