// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"metar.gg/ent/airport"
	"metar.gg/ent/runway"
)

// RunwayCreate is the builder for creating a Runway entity.
type RunwayCreate struct {
	config
	mutation *RunwayMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetImportID sets the "import_id" field.
func (rc *RunwayCreate) SetImportID(i int) *RunwayCreate {
	rc.mutation.SetImportID(i)
	return rc
}

// SetHash sets the "hash" field.
func (rc *RunwayCreate) SetHash(s string) *RunwayCreate {
	rc.mutation.SetHash(s)
	return rc
}

// SetImportFlag sets the "import_flag" field.
func (rc *RunwayCreate) SetImportFlag(b bool) *RunwayCreate {
	rc.mutation.SetImportFlag(b)
	return rc
}

// SetNillableImportFlag sets the "import_flag" field if the given value is not nil.
func (rc *RunwayCreate) SetNillableImportFlag(b *bool) *RunwayCreate {
	if b != nil {
		rc.SetImportFlag(*b)
	}
	return rc
}

// SetLastUpdated sets the "last_updated" field.
func (rc *RunwayCreate) SetLastUpdated(t time.Time) *RunwayCreate {
	rc.mutation.SetLastUpdated(t)
	return rc
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (rc *RunwayCreate) SetNillableLastUpdated(t *time.Time) *RunwayCreate {
	if t != nil {
		rc.SetLastUpdated(*t)
	}
	return rc
}

// SetLength sets the "length" field.
func (rc *RunwayCreate) SetLength(i int) *RunwayCreate {
	rc.mutation.SetLength(i)
	return rc
}

// SetWidth sets the "width" field.
func (rc *RunwayCreate) SetWidth(i int) *RunwayCreate {
	rc.mutation.SetWidth(i)
	return rc
}

// SetSurface sets the "surface" field.
func (rc *RunwayCreate) SetSurface(s string) *RunwayCreate {
	rc.mutation.SetSurface(s)
	return rc
}

// SetNillableSurface sets the "surface" field if the given value is not nil.
func (rc *RunwayCreate) SetNillableSurface(s *string) *RunwayCreate {
	if s != nil {
		rc.SetSurface(*s)
	}
	return rc
}

// SetLighted sets the "lighted" field.
func (rc *RunwayCreate) SetLighted(b bool) *RunwayCreate {
	rc.mutation.SetLighted(b)
	return rc
}

// SetClosed sets the "closed" field.
func (rc *RunwayCreate) SetClosed(b bool) *RunwayCreate {
	rc.mutation.SetClosed(b)
	return rc
}

// SetLowRunwayIdentifier sets the "low_runway_identifier" field.
func (rc *RunwayCreate) SetLowRunwayIdentifier(s string) *RunwayCreate {
	rc.mutation.SetLowRunwayIdentifier(s)
	return rc
}

// SetLowRunwayLatitude sets the "low_runway_latitude" field.
func (rc *RunwayCreate) SetLowRunwayLatitude(f float64) *RunwayCreate {
	rc.mutation.SetLowRunwayLatitude(f)
	return rc
}

// SetNillableLowRunwayLatitude sets the "low_runway_latitude" field if the given value is not nil.
func (rc *RunwayCreate) SetNillableLowRunwayLatitude(f *float64) *RunwayCreate {
	if f != nil {
		rc.SetLowRunwayLatitude(*f)
	}
	return rc
}

// SetLowRunwayLongitude sets the "low_runway_longitude" field.
func (rc *RunwayCreate) SetLowRunwayLongitude(f float64) *RunwayCreate {
	rc.mutation.SetLowRunwayLongitude(f)
	return rc
}

// SetNillableLowRunwayLongitude sets the "low_runway_longitude" field if the given value is not nil.
func (rc *RunwayCreate) SetNillableLowRunwayLongitude(f *float64) *RunwayCreate {
	if f != nil {
		rc.SetLowRunwayLongitude(*f)
	}
	return rc
}

// SetLowRunwayElevation sets the "low_runway_elevation" field.
func (rc *RunwayCreate) SetLowRunwayElevation(i int) *RunwayCreate {
	rc.mutation.SetLowRunwayElevation(i)
	return rc
}

// SetNillableLowRunwayElevation sets the "low_runway_elevation" field if the given value is not nil.
func (rc *RunwayCreate) SetNillableLowRunwayElevation(i *int) *RunwayCreate {
	if i != nil {
		rc.SetLowRunwayElevation(*i)
	}
	return rc
}

// SetLowRunwayHeading sets the "low_runway_heading" field.
func (rc *RunwayCreate) SetLowRunwayHeading(f float64) *RunwayCreate {
	rc.mutation.SetLowRunwayHeading(f)
	return rc
}

// SetNillableLowRunwayHeading sets the "low_runway_heading" field if the given value is not nil.
func (rc *RunwayCreate) SetNillableLowRunwayHeading(f *float64) *RunwayCreate {
	if f != nil {
		rc.SetLowRunwayHeading(*f)
	}
	return rc
}

// SetLowRunwayDisplacedThreshold sets the "low_runway_displaced_threshold" field.
func (rc *RunwayCreate) SetLowRunwayDisplacedThreshold(i int) *RunwayCreate {
	rc.mutation.SetLowRunwayDisplacedThreshold(i)
	return rc
}

// SetNillableLowRunwayDisplacedThreshold sets the "low_runway_displaced_threshold" field if the given value is not nil.
func (rc *RunwayCreate) SetNillableLowRunwayDisplacedThreshold(i *int) *RunwayCreate {
	if i != nil {
		rc.SetLowRunwayDisplacedThreshold(*i)
	}
	return rc
}

// SetHighRunwayIdentifier sets the "high_runway_identifier" field.
func (rc *RunwayCreate) SetHighRunwayIdentifier(s string) *RunwayCreate {
	rc.mutation.SetHighRunwayIdentifier(s)
	return rc
}

// SetHighRunwayLatitude sets the "high_runway_latitude" field.
func (rc *RunwayCreate) SetHighRunwayLatitude(f float64) *RunwayCreate {
	rc.mutation.SetHighRunwayLatitude(f)
	return rc
}

// SetNillableHighRunwayLatitude sets the "high_runway_latitude" field if the given value is not nil.
func (rc *RunwayCreate) SetNillableHighRunwayLatitude(f *float64) *RunwayCreate {
	if f != nil {
		rc.SetHighRunwayLatitude(*f)
	}
	return rc
}

// SetHighRunwayLongitude sets the "high_runway_longitude" field.
func (rc *RunwayCreate) SetHighRunwayLongitude(f float64) *RunwayCreate {
	rc.mutation.SetHighRunwayLongitude(f)
	return rc
}

// SetNillableHighRunwayLongitude sets the "high_runway_longitude" field if the given value is not nil.
func (rc *RunwayCreate) SetNillableHighRunwayLongitude(f *float64) *RunwayCreate {
	if f != nil {
		rc.SetHighRunwayLongitude(*f)
	}
	return rc
}

// SetHighRunwayElevation sets the "high_runway_elevation" field.
func (rc *RunwayCreate) SetHighRunwayElevation(i int) *RunwayCreate {
	rc.mutation.SetHighRunwayElevation(i)
	return rc
}

// SetNillableHighRunwayElevation sets the "high_runway_elevation" field if the given value is not nil.
func (rc *RunwayCreate) SetNillableHighRunwayElevation(i *int) *RunwayCreate {
	if i != nil {
		rc.SetHighRunwayElevation(*i)
	}
	return rc
}

// SetHighRunwayHeading sets the "high_runway_heading" field.
func (rc *RunwayCreate) SetHighRunwayHeading(f float64) *RunwayCreate {
	rc.mutation.SetHighRunwayHeading(f)
	return rc
}

// SetNillableHighRunwayHeading sets the "high_runway_heading" field if the given value is not nil.
func (rc *RunwayCreate) SetNillableHighRunwayHeading(f *float64) *RunwayCreate {
	if f != nil {
		rc.SetHighRunwayHeading(*f)
	}
	return rc
}

// SetHighRunwayDisplacedThreshold sets the "high_runway_displaced_threshold" field.
func (rc *RunwayCreate) SetHighRunwayDisplacedThreshold(i int) *RunwayCreate {
	rc.mutation.SetHighRunwayDisplacedThreshold(i)
	return rc
}

// SetNillableHighRunwayDisplacedThreshold sets the "high_runway_displaced_threshold" field if the given value is not nil.
func (rc *RunwayCreate) SetNillableHighRunwayDisplacedThreshold(i *int) *RunwayCreate {
	if i != nil {
		rc.SetHighRunwayDisplacedThreshold(*i)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RunwayCreate) SetID(u uuid.UUID) *RunwayCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RunwayCreate) SetNillableID(u *uuid.UUID) *RunwayCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// SetAirportID sets the "airport" edge to the Airport entity by ID.
func (rc *RunwayCreate) SetAirportID(id uuid.UUID) *RunwayCreate {
	rc.mutation.SetAirportID(id)
	return rc
}

// SetNillableAirportID sets the "airport" edge to the Airport entity by ID if the given value is not nil.
func (rc *RunwayCreate) SetNillableAirportID(id *uuid.UUID) *RunwayCreate {
	if id != nil {
		rc = rc.SetAirportID(*id)
	}
	return rc
}

// SetAirport sets the "airport" edge to the Airport entity.
func (rc *RunwayCreate) SetAirport(a *Airport) *RunwayCreate {
	return rc.SetAirportID(a.ID)
}

// Mutation returns the RunwayMutation object of the builder.
func (rc *RunwayCreate) Mutation() *RunwayMutation {
	return rc.mutation
}

// Save creates the Runway in the database.
func (rc *RunwayCreate) Save(ctx context.Context) (*Runway, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RunwayCreate) SaveX(ctx context.Context) *Runway {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RunwayCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RunwayCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RunwayCreate) defaults() {
	if _, ok := rc.mutation.ImportFlag(); !ok {
		v := runway.DefaultImportFlag
		rc.mutation.SetImportFlag(v)
	}
	if _, ok := rc.mutation.LastUpdated(); !ok {
		v := runway.DefaultLastUpdated()
		rc.mutation.SetLastUpdated(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := runway.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RunwayCreate) check() error {
	if _, ok := rc.mutation.ImportID(); !ok {
		return &ValidationError{Name: "import_id", err: errors.New(`ent: missing required field "Runway.import_id"`)}
	}
	if _, ok := rc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "Runway.hash"`)}
	}
	if _, ok := rc.mutation.ImportFlag(); !ok {
		return &ValidationError{Name: "import_flag", err: errors.New(`ent: missing required field "Runway.import_flag"`)}
	}
	if _, ok := rc.mutation.LastUpdated(); !ok {
		return &ValidationError{Name: "last_updated", err: errors.New(`ent: missing required field "Runway.last_updated"`)}
	}
	if _, ok := rc.mutation.Length(); !ok {
		return &ValidationError{Name: "length", err: errors.New(`ent: missing required field "Runway.length"`)}
	}
	if _, ok := rc.mutation.Width(); !ok {
		return &ValidationError{Name: "width", err: errors.New(`ent: missing required field "Runway.width"`)}
	}
	if _, ok := rc.mutation.Lighted(); !ok {
		return &ValidationError{Name: "lighted", err: errors.New(`ent: missing required field "Runway.lighted"`)}
	}
	if _, ok := rc.mutation.Closed(); !ok {
		return &ValidationError{Name: "closed", err: errors.New(`ent: missing required field "Runway.closed"`)}
	}
	if _, ok := rc.mutation.LowRunwayIdentifier(); !ok {
		return &ValidationError{Name: "low_runway_identifier", err: errors.New(`ent: missing required field "Runway.low_runway_identifier"`)}
	}
	if _, ok := rc.mutation.HighRunwayIdentifier(); !ok {
		return &ValidationError{Name: "high_runway_identifier", err: errors.New(`ent: missing required field "Runway.high_runway_identifier"`)}
	}
	return nil
}

func (rc *RunwayCreate) sqlSave(ctx context.Context) (*Runway, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RunwayCreate) createSpec() (*Runway, *sqlgraph.CreateSpec) {
	var (
		_node = &Runway{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(runway.Table, sqlgraph.NewFieldSpec(runway.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.ImportID(); ok {
		_spec.SetField(runway.FieldImportID, field.TypeInt, value)
		_node.ImportID = value
	}
	if value, ok := rc.mutation.Hash(); ok {
		_spec.SetField(runway.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := rc.mutation.ImportFlag(); ok {
		_spec.SetField(runway.FieldImportFlag, field.TypeBool, value)
		_node.ImportFlag = value
	}
	if value, ok := rc.mutation.LastUpdated(); ok {
		_spec.SetField(runway.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if value, ok := rc.mutation.Length(); ok {
		_spec.SetField(runway.FieldLength, field.TypeInt, value)
		_node.Length = value
	}
	if value, ok := rc.mutation.Width(); ok {
		_spec.SetField(runway.FieldWidth, field.TypeInt, value)
		_node.Width = value
	}
	if value, ok := rc.mutation.Surface(); ok {
		_spec.SetField(runway.FieldSurface, field.TypeString, value)
		_node.Surface = &value
	}
	if value, ok := rc.mutation.Lighted(); ok {
		_spec.SetField(runway.FieldLighted, field.TypeBool, value)
		_node.Lighted = value
	}
	if value, ok := rc.mutation.Closed(); ok {
		_spec.SetField(runway.FieldClosed, field.TypeBool, value)
		_node.Closed = value
	}
	if value, ok := rc.mutation.LowRunwayIdentifier(); ok {
		_spec.SetField(runway.FieldLowRunwayIdentifier, field.TypeString, value)
		_node.LowRunwayIdentifier = value
	}
	if value, ok := rc.mutation.LowRunwayLatitude(); ok {
		_spec.SetField(runway.FieldLowRunwayLatitude, field.TypeFloat64, value)
		_node.LowRunwayLatitude = &value
	}
	if value, ok := rc.mutation.LowRunwayLongitude(); ok {
		_spec.SetField(runway.FieldLowRunwayLongitude, field.TypeFloat64, value)
		_node.LowRunwayLongitude = &value
	}
	if value, ok := rc.mutation.LowRunwayElevation(); ok {
		_spec.SetField(runway.FieldLowRunwayElevation, field.TypeInt, value)
		_node.LowRunwayElevation = &value
	}
	if value, ok := rc.mutation.LowRunwayHeading(); ok {
		_spec.SetField(runway.FieldLowRunwayHeading, field.TypeFloat64, value)
		_node.LowRunwayHeading = &value
	}
	if value, ok := rc.mutation.LowRunwayDisplacedThreshold(); ok {
		_spec.SetField(runway.FieldLowRunwayDisplacedThreshold, field.TypeInt, value)
		_node.LowRunwayDisplacedThreshold = &value
	}
	if value, ok := rc.mutation.HighRunwayIdentifier(); ok {
		_spec.SetField(runway.FieldHighRunwayIdentifier, field.TypeString, value)
		_node.HighRunwayIdentifier = value
	}
	if value, ok := rc.mutation.HighRunwayLatitude(); ok {
		_spec.SetField(runway.FieldHighRunwayLatitude, field.TypeFloat64, value)
		_node.HighRunwayLatitude = &value
	}
	if value, ok := rc.mutation.HighRunwayLongitude(); ok {
		_spec.SetField(runway.FieldHighRunwayLongitude, field.TypeFloat64, value)
		_node.HighRunwayLongitude = &value
	}
	if value, ok := rc.mutation.HighRunwayElevation(); ok {
		_spec.SetField(runway.FieldHighRunwayElevation, field.TypeInt, value)
		_node.HighRunwayElevation = &value
	}
	if value, ok := rc.mutation.HighRunwayHeading(); ok {
		_spec.SetField(runway.FieldHighRunwayHeading, field.TypeFloat64, value)
		_node.HighRunwayHeading = &value
	}
	if value, ok := rc.mutation.HighRunwayDisplacedThreshold(); ok {
		_spec.SetField(runway.FieldHighRunwayDisplacedThreshold, field.TypeInt, value)
		_node.HighRunwayDisplacedThreshold = &value
	}
	if nodes := rc.mutation.AirportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   runway.AirportTable,
			Columns: []string{runway.AirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.airport_runways = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Runway.Create().
//		SetImportID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RunwayUpsert) {
//			SetImportID(v+v).
//		}).
//		Exec(ctx)
func (rc *RunwayCreate) OnConflict(opts ...sql.ConflictOption) *RunwayUpsertOne {
	rc.conflict = opts
	return &RunwayUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Runway.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *RunwayCreate) OnConflictColumns(columns ...string) *RunwayUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RunwayUpsertOne{
		create: rc,
	}
}

type (
	// RunwayUpsertOne is the builder for "upsert"-ing
	//  one Runway node.
	RunwayUpsertOne struct {
		create *RunwayCreate
	}

	// RunwayUpsert is the "OnConflict" setter.
	RunwayUpsert struct {
		*sql.UpdateSet
	}
)

// SetImportID sets the "import_id" field.
func (u *RunwayUpsert) SetImportID(v int) *RunwayUpsert {
	u.Set(runway.FieldImportID, v)
	return u
}

// UpdateImportID sets the "import_id" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateImportID() *RunwayUpsert {
	u.SetExcluded(runway.FieldImportID)
	return u
}

// AddImportID adds v to the "import_id" field.
func (u *RunwayUpsert) AddImportID(v int) *RunwayUpsert {
	u.Add(runway.FieldImportID, v)
	return u
}

// SetHash sets the "hash" field.
func (u *RunwayUpsert) SetHash(v string) *RunwayUpsert {
	u.Set(runway.FieldHash, v)
	return u
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateHash() *RunwayUpsert {
	u.SetExcluded(runway.FieldHash)
	return u
}

// SetImportFlag sets the "import_flag" field.
func (u *RunwayUpsert) SetImportFlag(v bool) *RunwayUpsert {
	u.Set(runway.FieldImportFlag, v)
	return u
}

// UpdateImportFlag sets the "import_flag" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateImportFlag() *RunwayUpsert {
	u.SetExcluded(runway.FieldImportFlag)
	return u
}

// SetLastUpdated sets the "last_updated" field.
func (u *RunwayUpsert) SetLastUpdated(v time.Time) *RunwayUpsert {
	u.Set(runway.FieldLastUpdated, v)
	return u
}

// UpdateLastUpdated sets the "last_updated" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateLastUpdated() *RunwayUpsert {
	u.SetExcluded(runway.FieldLastUpdated)
	return u
}

// SetLength sets the "length" field.
func (u *RunwayUpsert) SetLength(v int) *RunwayUpsert {
	u.Set(runway.FieldLength, v)
	return u
}

// UpdateLength sets the "length" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateLength() *RunwayUpsert {
	u.SetExcluded(runway.FieldLength)
	return u
}

// AddLength adds v to the "length" field.
func (u *RunwayUpsert) AddLength(v int) *RunwayUpsert {
	u.Add(runway.FieldLength, v)
	return u
}

// SetWidth sets the "width" field.
func (u *RunwayUpsert) SetWidth(v int) *RunwayUpsert {
	u.Set(runway.FieldWidth, v)
	return u
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateWidth() *RunwayUpsert {
	u.SetExcluded(runway.FieldWidth)
	return u
}

// AddWidth adds v to the "width" field.
func (u *RunwayUpsert) AddWidth(v int) *RunwayUpsert {
	u.Add(runway.FieldWidth, v)
	return u
}

// SetSurface sets the "surface" field.
func (u *RunwayUpsert) SetSurface(v string) *RunwayUpsert {
	u.Set(runway.FieldSurface, v)
	return u
}

// UpdateSurface sets the "surface" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateSurface() *RunwayUpsert {
	u.SetExcluded(runway.FieldSurface)
	return u
}

// ClearSurface clears the value of the "surface" field.
func (u *RunwayUpsert) ClearSurface() *RunwayUpsert {
	u.SetNull(runway.FieldSurface)
	return u
}

// SetLighted sets the "lighted" field.
func (u *RunwayUpsert) SetLighted(v bool) *RunwayUpsert {
	u.Set(runway.FieldLighted, v)
	return u
}

// UpdateLighted sets the "lighted" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateLighted() *RunwayUpsert {
	u.SetExcluded(runway.FieldLighted)
	return u
}

// SetClosed sets the "closed" field.
func (u *RunwayUpsert) SetClosed(v bool) *RunwayUpsert {
	u.Set(runway.FieldClosed, v)
	return u
}

// UpdateClosed sets the "closed" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateClosed() *RunwayUpsert {
	u.SetExcluded(runway.FieldClosed)
	return u
}

// SetLowRunwayIdentifier sets the "low_runway_identifier" field.
func (u *RunwayUpsert) SetLowRunwayIdentifier(v string) *RunwayUpsert {
	u.Set(runway.FieldLowRunwayIdentifier, v)
	return u
}

// UpdateLowRunwayIdentifier sets the "low_runway_identifier" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateLowRunwayIdentifier() *RunwayUpsert {
	u.SetExcluded(runway.FieldLowRunwayIdentifier)
	return u
}

// SetLowRunwayLatitude sets the "low_runway_latitude" field.
func (u *RunwayUpsert) SetLowRunwayLatitude(v float64) *RunwayUpsert {
	u.Set(runway.FieldLowRunwayLatitude, v)
	return u
}

// UpdateLowRunwayLatitude sets the "low_runway_latitude" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateLowRunwayLatitude() *RunwayUpsert {
	u.SetExcluded(runway.FieldLowRunwayLatitude)
	return u
}

// AddLowRunwayLatitude adds v to the "low_runway_latitude" field.
func (u *RunwayUpsert) AddLowRunwayLatitude(v float64) *RunwayUpsert {
	u.Add(runway.FieldLowRunwayLatitude, v)
	return u
}

// ClearLowRunwayLatitude clears the value of the "low_runway_latitude" field.
func (u *RunwayUpsert) ClearLowRunwayLatitude() *RunwayUpsert {
	u.SetNull(runway.FieldLowRunwayLatitude)
	return u
}

// SetLowRunwayLongitude sets the "low_runway_longitude" field.
func (u *RunwayUpsert) SetLowRunwayLongitude(v float64) *RunwayUpsert {
	u.Set(runway.FieldLowRunwayLongitude, v)
	return u
}

// UpdateLowRunwayLongitude sets the "low_runway_longitude" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateLowRunwayLongitude() *RunwayUpsert {
	u.SetExcluded(runway.FieldLowRunwayLongitude)
	return u
}

// AddLowRunwayLongitude adds v to the "low_runway_longitude" field.
func (u *RunwayUpsert) AddLowRunwayLongitude(v float64) *RunwayUpsert {
	u.Add(runway.FieldLowRunwayLongitude, v)
	return u
}

// ClearLowRunwayLongitude clears the value of the "low_runway_longitude" field.
func (u *RunwayUpsert) ClearLowRunwayLongitude() *RunwayUpsert {
	u.SetNull(runway.FieldLowRunwayLongitude)
	return u
}

// SetLowRunwayElevation sets the "low_runway_elevation" field.
func (u *RunwayUpsert) SetLowRunwayElevation(v int) *RunwayUpsert {
	u.Set(runway.FieldLowRunwayElevation, v)
	return u
}

// UpdateLowRunwayElevation sets the "low_runway_elevation" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateLowRunwayElevation() *RunwayUpsert {
	u.SetExcluded(runway.FieldLowRunwayElevation)
	return u
}

// AddLowRunwayElevation adds v to the "low_runway_elevation" field.
func (u *RunwayUpsert) AddLowRunwayElevation(v int) *RunwayUpsert {
	u.Add(runway.FieldLowRunwayElevation, v)
	return u
}

// ClearLowRunwayElevation clears the value of the "low_runway_elevation" field.
func (u *RunwayUpsert) ClearLowRunwayElevation() *RunwayUpsert {
	u.SetNull(runway.FieldLowRunwayElevation)
	return u
}

// SetLowRunwayHeading sets the "low_runway_heading" field.
func (u *RunwayUpsert) SetLowRunwayHeading(v float64) *RunwayUpsert {
	u.Set(runway.FieldLowRunwayHeading, v)
	return u
}

// UpdateLowRunwayHeading sets the "low_runway_heading" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateLowRunwayHeading() *RunwayUpsert {
	u.SetExcluded(runway.FieldLowRunwayHeading)
	return u
}

// AddLowRunwayHeading adds v to the "low_runway_heading" field.
func (u *RunwayUpsert) AddLowRunwayHeading(v float64) *RunwayUpsert {
	u.Add(runway.FieldLowRunwayHeading, v)
	return u
}

// ClearLowRunwayHeading clears the value of the "low_runway_heading" field.
func (u *RunwayUpsert) ClearLowRunwayHeading() *RunwayUpsert {
	u.SetNull(runway.FieldLowRunwayHeading)
	return u
}

// SetLowRunwayDisplacedThreshold sets the "low_runway_displaced_threshold" field.
func (u *RunwayUpsert) SetLowRunwayDisplacedThreshold(v int) *RunwayUpsert {
	u.Set(runway.FieldLowRunwayDisplacedThreshold, v)
	return u
}

// UpdateLowRunwayDisplacedThreshold sets the "low_runway_displaced_threshold" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateLowRunwayDisplacedThreshold() *RunwayUpsert {
	u.SetExcluded(runway.FieldLowRunwayDisplacedThreshold)
	return u
}

// AddLowRunwayDisplacedThreshold adds v to the "low_runway_displaced_threshold" field.
func (u *RunwayUpsert) AddLowRunwayDisplacedThreshold(v int) *RunwayUpsert {
	u.Add(runway.FieldLowRunwayDisplacedThreshold, v)
	return u
}

// ClearLowRunwayDisplacedThreshold clears the value of the "low_runway_displaced_threshold" field.
func (u *RunwayUpsert) ClearLowRunwayDisplacedThreshold() *RunwayUpsert {
	u.SetNull(runway.FieldLowRunwayDisplacedThreshold)
	return u
}

// SetHighRunwayIdentifier sets the "high_runway_identifier" field.
func (u *RunwayUpsert) SetHighRunwayIdentifier(v string) *RunwayUpsert {
	u.Set(runway.FieldHighRunwayIdentifier, v)
	return u
}

// UpdateHighRunwayIdentifier sets the "high_runway_identifier" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateHighRunwayIdentifier() *RunwayUpsert {
	u.SetExcluded(runway.FieldHighRunwayIdentifier)
	return u
}

// SetHighRunwayLatitude sets the "high_runway_latitude" field.
func (u *RunwayUpsert) SetHighRunwayLatitude(v float64) *RunwayUpsert {
	u.Set(runway.FieldHighRunwayLatitude, v)
	return u
}

// UpdateHighRunwayLatitude sets the "high_runway_latitude" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateHighRunwayLatitude() *RunwayUpsert {
	u.SetExcluded(runway.FieldHighRunwayLatitude)
	return u
}

// AddHighRunwayLatitude adds v to the "high_runway_latitude" field.
func (u *RunwayUpsert) AddHighRunwayLatitude(v float64) *RunwayUpsert {
	u.Add(runway.FieldHighRunwayLatitude, v)
	return u
}

// ClearHighRunwayLatitude clears the value of the "high_runway_latitude" field.
func (u *RunwayUpsert) ClearHighRunwayLatitude() *RunwayUpsert {
	u.SetNull(runway.FieldHighRunwayLatitude)
	return u
}

// SetHighRunwayLongitude sets the "high_runway_longitude" field.
func (u *RunwayUpsert) SetHighRunwayLongitude(v float64) *RunwayUpsert {
	u.Set(runway.FieldHighRunwayLongitude, v)
	return u
}

// UpdateHighRunwayLongitude sets the "high_runway_longitude" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateHighRunwayLongitude() *RunwayUpsert {
	u.SetExcluded(runway.FieldHighRunwayLongitude)
	return u
}

// AddHighRunwayLongitude adds v to the "high_runway_longitude" field.
func (u *RunwayUpsert) AddHighRunwayLongitude(v float64) *RunwayUpsert {
	u.Add(runway.FieldHighRunwayLongitude, v)
	return u
}

// ClearHighRunwayLongitude clears the value of the "high_runway_longitude" field.
func (u *RunwayUpsert) ClearHighRunwayLongitude() *RunwayUpsert {
	u.SetNull(runway.FieldHighRunwayLongitude)
	return u
}

// SetHighRunwayElevation sets the "high_runway_elevation" field.
func (u *RunwayUpsert) SetHighRunwayElevation(v int) *RunwayUpsert {
	u.Set(runway.FieldHighRunwayElevation, v)
	return u
}

// UpdateHighRunwayElevation sets the "high_runway_elevation" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateHighRunwayElevation() *RunwayUpsert {
	u.SetExcluded(runway.FieldHighRunwayElevation)
	return u
}

// AddHighRunwayElevation adds v to the "high_runway_elevation" field.
func (u *RunwayUpsert) AddHighRunwayElevation(v int) *RunwayUpsert {
	u.Add(runway.FieldHighRunwayElevation, v)
	return u
}

// ClearHighRunwayElevation clears the value of the "high_runway_elevation" field.
func (u *RunwayUpsert) ClearHighRunwayElevation() *RunwayUpsert {
	u.SetNull(runway.FieldHighRunwayElevation)
	return u
}

// SetHighRunwayHeading sets the "high_runway_heading" field.
func (u *RunwayUpsert) SetHighRunwayHeading(v float64) *RunwayUpsert {
	u.Set(runway.FieldHighRunwayHeading, v)
	return u
}

// UpdateHighRunwayHeading sets the "high_runway_heading" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateHighRunwayHeading() *RunwayUpsert {
	u.SetExcluded(runway.FieldHighRunwayHeading)
	return u
}

// AddHighRunwayHeading adds v to the "high_runway_heading" field.
func (u *RunwayUpsert) AddHighRunwayHeading(v float64) *RunwayUpsert {
	u.Add(runway.FieldHighRunwayHeading, v)
	return u
}

// ClearHighRunwayHeading clears the value of the "high_runway_heading" field.
func (u *RunwayUpsert) ClearHighRunwayHeading() *RunwayUpsert {
	u.SetNull(runway.FieldHighRunwayHeading)
	return u
}

// SetHighRunwayDisplacedThreshold sets the "high_runway_displaced_threshold" field.
func (u *RunwayUpsert) SetHighRunwayDisplacedThreshold(v int) *RunwayUpsert {
	u.Set(runway.FieldHighRunwayDisplacedThreshold, v)
	return u
}

// UpdateHighRunwayDisplacedThreshold sets the "high_runway_displaced_threshold" field to the value that was provided on create.
func (u *RunwayUpsert) UpdateHighRunwayDisplacedThreshold() *RunwayUpsert {
	u.SetExcluded(runway.FieldHighRunwayDisplacedThreshold)
	return u
}

// AddHighRunwayDisplacedThreshold adds v to the "high_runway_displaced_threshold" field.
func (u *RunwayUpsert) AddHighRunwayDisplacedThreshold(v int) *RunwayUpsert {
	u.Add(runway.FieldHighRunwayDisplacedThreshold, v)
	return u
}

// ClearHighRunwayDisplacedThreshold clears the value of the "high_runway_displaced_threshold" field.
func (u *RunwayUpsert) ClearHighRunwayDisplacedThreshold() *RunwayUpsert {
	u.SetNull(runway.FieldHighRunwayDisplacedThreshold)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Runway.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(runway.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RunwayUpsertOne) UpdateNewValues() *RunwayUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(runway.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Runway.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RunwayUpsertOne) Ignore() *RunwayUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RunwayUpsertOne) DoNothing() *RunwayUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RunwayCreate.OnConflict
// documentation for more info.
func (u *RunwayUpsertOne) Update(set func(*RunwayUpsert)) *RunwayUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RunwayUpsert{UpdateSet: update})
	}))
	return u
}

// SetImportID sets the "import_id" field.
func (u *RunwayUpsertOne) SetImportID(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetImportID(v)
	})
}

// AddImportID adds v to the "import_id" field.
func (u *RunwayUpsertOne) AddImportID(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddImportID(v)
	})
}

// UpdateImportID sets the "import_id" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateImportID() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateImportID()
	})
}

// SetHash sets the "hash" field.
func (u *RunwayUpsertOne) SetHash(v string) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateHash() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHash()
	})
}

// SetImportFlag sets the "import_flag" field.
func (u *RunwayUpsertOne) SetImportFlag(v bool) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetImportFlag(v)
	})
}

// UpdateImportFlag sets the "import_flag" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateImportFlag() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateImportFlag()
	})
}

// SetLastUpdated sets the "last_updated" field.
func (u *RunwayUpsertOne) SetLastUpdated(v time.Time) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLastUpdated(v)
	})
}

// UpdateLastUpdated sets the "last_updated" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateLastUpdated() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLastUpdated()
	})
}

// SetLength sets the "length" field.
func (u *RunwayUpsertOne) SetLength(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLength(v)
	})
}

// AddLength adds v to the "length" field.
func (u *RunwayUpsertOne) AddLength(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddLength(v)
	})
}

// UpdateLength sets the "length" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateLength() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLength()
	})
}

// SetWidth sets the "width" field.
func (u *RunwayUpsertOne) SetWidth(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetWidth(v)
	})
}

// AddWidth adds v to the "width" field.
func (u *RunwayUpsertOne) AddWidth(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddWidth(v)
	})
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateWidth() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateWidth()
	})
}

// SetSurface sets the "surface" field.
func (u *RunwayUpsertOne) SetSurface(v string) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetSurface(v)
	})
}

// UpdateSurface sets the "surface" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateSurface() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateSurface()
	})
}

// ClearSurface clears the value of the "surface" field.
func (u *RunwayUpsertOne) ClearSurface() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.ClearSurface()
	})
}

// SetLighted sets the "lighted" field.
func (u *RunwayUpsertOne) SetLighted(v bool) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLighted(v)
	})
}

// UpdateLighted sets the "lighted" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateLighted() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLighted()
	})
}

// SetClosed sets the "closed" field.
func (u *RunwayUpsertOne) SetClosed(v bool) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetClosed(v)
	})
}

// UpdateClosed sets the "closed" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateClosed() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateClosed()
	})
}

// SetLowRunwayIdentifier sets the "low_runway_identifier" field.
func (u *RunwayUpsertOne) SetLowRunwayIdentifier(v string) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLowRunwayIdentifier(v)
	})
}

// UpdateLowRunwayIdentifier sets the "low_runway_identifier" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateLowRunwayIdentifier() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLowRunwayIdentifier()
	})
}

// SetLowRunwayLatitude sets the "low_runway_latitude" field.
func (u *RunwayUpsertOne) SetLowRunwayLatitude(v float64) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLowRunwayLatitude(v)
	})
}

// AddLowRunwayLatitude adds v to the "low_runway_latitude" field.
func (u *RunwayUpsertOne) AddLowRunwayLatitude(v float64) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddLowRunwayLatitude(v)
	})
}

// UpdateLowRunwayLatitude sets the "low_runway_latitude" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateLowRunwayLatitude() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLowRunwayLatitude()
	})
}

// ClearLowRunwayLatitude clears the value of the "low_runway_latitude" field.
func (u *RunwayUpsertOne) ClearLowRunwayLatitude() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.ClearLowRunwayLatitude()
	})
}

// SetLowRunwayLongitude sets the "low_runway_longitude" field.
func (u *RunwayUpsertOne) SetLowRunwayLongitude(v float64) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLowRunwayLongitude(v)
	})
}

// AddLowRunwayLongitude adds v to the "low_runway_longitude" field.
func (u *RunwayUpsertOne) AddLowRunwayLongitude(v float64) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddLowRunwayLongitude(v)
	})
}

// UpdateLowRunwayLongitude sets the "low_runway_longitude" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateLowRunwayLongitude() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLowRunwayLongitude()
	})
}

// ClearLowRunwayLongitude clears the value of the "low_runway_longitude" field.
func (u *RunwayUpsertOne) ClearLowRunwayLongitude() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.ClearLowRunwayLongitude()
	})
}

// SetLowRunwayElevation sets the "low_runway_elevation" field.
func (u *RunwayUpsertOne) SetLowRunwayElevation(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLowRunwayElevation(v)
	})
}

// AddLowRunwayElevation adds v to the "low_runway_elevation" field.
func (u *RunwayUpsertOne) AddLowRunwayElevation(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddLowRunwayElevation(v)
	})
}

// UpdateLowRunwayElevation sets the "low_runway_elevation" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateLowRunwayElevation() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLowRunwayElevation()
	})
}

// ClearLowRunwayElevation clears the value of the "low_runway_elevation" field.
func (u *RunwayUpsertOne) ClearLowRunwayElevation() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.ClearLowRunwayElevation()
	})
}

// SetLowRunwayHeading sets the "low_runway_heading" field.
func (u *RunwayUpsertOne) SetLowRunwayHeading(v float64) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLowRunwayHeading(v)
	})
}

// AddLowRunwayHeading adds v to the "low_runway_heading" field.
func (u *RunwayUpsertOne) AddLowRunwayHeading(v float64) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddLowRunwayHeading(v)
	})
}

// UpdateLowRunwayHeading sets the "low_runway_heading" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateLowRunwayHeading() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLowRunwayHeading()
	})
}

// ClearLowRunwayHeading clears the value of the "low_runway_heading" field.
func (u *RunwayUpsertOne) ClearLowRunwayHeading() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.ClearLowRunwayHeading()
	})
}

// SetLowRunwayDisplacedThreshold sets the "low_runway_displaced_threshold" field.
func (u *RunwayUpsertOne) SetLowRunwayDisplacedThreshold(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLowRunwayDisplacedThreshold(v)
	})
}

// AddLowRunwayDisplacedThreshold adds v to the "low_runway_displaced_threshold" field.
func (u *RunwayUpsertOne) AddLowRunwayDisplacedThreshold(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddLowRunwayDisplacedThreshold(v)
	})
}

// UpdateLowRunwayDisplacedThreshold sets the "low_runway_displaced_threshold" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateLowRunwayDisplacedThreshold() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLowRunwayDisplacedThreshold()
	})
}

// ClearLowRunwayDisplacedThreshold clears the value of the "low_runway_displaced_threshold" field.
func (u *RunwayUpsertOne) ClearLowRunwayDisplacedThreshold() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.ClearLowRunwayDisplacedThreshold()
	})
}

// SetHighRunwayIdentifier sets the "high_runway_identifier" field.
func (u *RunwayUpsertOne) SetHighRunwayIdentifier(v string) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHighRunwayIdentifier(v)
	})
}

// UpdateHighRunwayIdentifier sets the "high_runway_identifier" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateHighRunwayIdentifier() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHighRunwayIdentifier()
	})
}

// SetHighRunwayLatitude sets the "high_runway_latitude" field.
func (u *RunwayUpsertOne) SetHighRunwayLatitude(v float64) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHighRunwayLatitude(v)
	})
}

// AddHighRunwayLatitude adds v to the "high_runway_latitude" field.
func (u *RunwayUpsertOne) AddHighRunwayLatitude(v float64) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddHighRunwayLatitude(v)
	})
}

// UpdateHighRunwayLatitude sets the "high_runway_latitude" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateHighRunwayLatitude() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHighRunwayLatitude()
	})
}

// ClearHighRunwayLatitude clears the value of the "high_runway_latitude" field.
func (u *RunwayUpsertOne) ClearHighRunwayLatitude() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.ClearHighRunwayLatitude()
	})
}

// SetHighRunwayLongitude sets the "high_runway_longitude" field.
func (u *RunwayUpsertOne) SetHighRunwayLongitude(v float64) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHighRunwayLongitude(v)
	})
}

// AddHighRunwayLongitude adds v to the "high_runway_longitude" field.
func (u *RunwayUpsertOne) AddHighRunwayLongitude(v float64) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddHighRunwayLongitude(v)
	})
}

// UpdateHighRunwayLongitude sets the "high_runway_longitude" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateHighRunwayLongitude() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHighRunwayLongitude()
	})
}

// ClearHighRunwayLongitude clears the value of the "high_runway_longitude" field.
func (u *RunwayUpsertOne) ClearHighRunwayLongitude() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.ClearHighRunwayLongitude()
	})
}

// SetHighRunwayElevation sets the "high_runway_elevation" field.
func (u *RunwayUpsertOne) SetHighRunwayElevation(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHighRunwayElevation(v)
	})
}

// AddHighRunwayElevation adds v to the "high_runway_elevation" field.
func (u *RunwayUpsertOne) AddHighRunwayElevation(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddHighRunwayElevation(v)
	})
}

// UpdateHighRunwayElevation sets the "high_runway_elevation" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateHighRunwayElevation() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHighRunwayElevation()
	})
}

// ClearHighRunwayElevation clears the value of the "high_runway_elevation" field.
func (u *RunwayUpsertOne) ClearHighRunwayElevation() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.ClearHighRunwayElevation()
	})
}

// SetHighRunwayHeading sets the "high_runway_heading" field.
func (u *RunwayUpsertOne) SetHighRunwayHeading(v float64) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHighRunwayHeading(v)
	})
}

// AddHighRunwayHeading adds v to the "high_runway_heading" field.
func (u *RunwayUpsertOne) AddHighRunwayHeading(v float64) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddHighRunwayHeading(v)
	})
}

// UpdateHighRunwayHeading sets the "high_runway_heading" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateHighRunwayHeading() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHighRunwayHeading()
	})
}

// ClearHighRunwayHeading clears the value of the "high_runway_heading" field.
func (u *RunwayUpsertOne) ClearHighRunwayHeading() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.ClearHighRunwayHeading()
	})
}

// SetHighRunwayDisplacedThreshold sets the "high_runway_displaced_threshold" field.
func (u *RunwayUpsertOne) SetHighRunwayDisplacedThreshold(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHighRunwayDisplacedThreshold(v)
	})
}

// AddHighRunwayDisplacedThreshold adds v to the "high_runway_displaced_threshold" field.
func (u *RunwayUpsertOne) AddHighRunwayDisplacedThreshold(v int) *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.AddHighRunwayDisplacedThreshold(v)
	})
}

// UpdateHighRunwayDisplacedThreshold sets the "high_runway_displaced_threshold" field to the value that was provided on create.
func (u *RunwayUpsertOne) UpdateHighRunwayDisplacedThreshold() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHighRunwayDisplacedThreshold()
	})
}

// ClearHighRunwayDisplacedThreshold clears the value of the "high_runway_displaced_threshold" field.
func (u *RunwayUpsertOne) ClearHighRunwayDisplacedThreshold() *RunwayUpsertOne {
	return u.Update(func(s *RunwayUpsert) {
		s.ClearHighRunwayDisplacedThreshold()
	})
}

// Exec executes the query.
func (u *RunwayUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RunwayCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RunwayUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RunwayUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: RunwayUpsertOne.ID is not supported by MySQL driver. Use RunwayUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RunwayUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RunwayCreateBulk is the builder for creating many Runway entities in bulk.
type RunwayCreateBulk struct {
	config
	builders []*RunwayCreate
	conflict []sql.ConflictOption
}

// Save creates the Runway entities in the database.
func (rcb *RunwayCreateBulk) Save(ctx context.Context) ([]*Runway, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Runway, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RunwayMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RunwayCreateBulk) SaveX(ctx context.Context) []*Runway {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RunwayCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RunwayCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Runway.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RunwayUpsert) {
//			SetImportID(v+v).
//		}).
//		Exec(ctx)
func (rcb *RunwayCreateBulk) OnConflict(opts ...sql.ConflictOption) *RunwayUpsertBulk {
	rcb.conflict = opts
	return &RunwayUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Runway.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *RunwayCreateBulk) OnConflictColumns(columns ...string) *RunwayUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RunwayUpsertBulk{
		create: rcb,
	}
}

// RunwayUpsertBulk is the builder for "upsert"-ing
// a bulk of Runway nodes.
type RunwayUpsertBulk struct {
	create *RunwayCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Runway.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(runway.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RunwayUpsertBulk) UpdateNewValues() *RunwayUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(runway.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Runway.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RunwayUpsertBulk) Ignore() *RunwayUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RunwayUpsertBulk) DoNothing() *RunwayUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RunwayCreateBulk.OnConflict
// documentation for more info.
func (u *RunwayUpsertBulk) Update(set func(*RunwayUpsert)) *RunwayUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RunwayUpsert{UpdateSet: update})
	}))
	return u
}

// SetImportID sets the "import_id" field.
func (u *RunwayUpsertBulk) SetImportID(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetImportID(v)
	})
}

// AddImportID adds v to the "import_id" field.
func (u *RunwayUpsertBulk) AddImportID(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddImportID(v)
	})
}

// UpdateImportID sets the "import_id" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateImportID() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateImportID()
	})
}

// SetHash sets the "hash" field.
func (u *RunwayUpsertBulk) SetHash(v string) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateHash() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHash()
	})
}

// SetImportFlag sets the "import_flag" field.
func (u *RunwayUpsertBulk) SetImportFlag(v bool) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetImportFlag(v)
	})
}

// UpdateImportFlag sets the "import_flag" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateImportFlag() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateImportFlag()
	})
}

// SetLastUpdated sets the "last_updated" field.
func (u *RunwayUpsertBulk) SetLastUpdated(v time.Time) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLastUpdated(v)
	})
}

// UpdateLastUpdated sets the "last_updated" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateLastUpdated() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLastUpdated()
	})
}

// SetLength sets the "length" field.
func (u *RunwayUpsertBulk) SetLength(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLength(v)
	})
}

// AddLength adds v to the "length" field.
func (u *RunwayUpsertBulk) AddLength(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddLength(v)
	})
}

// UpdateLength sets the "length" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateLength() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLength()
	})
}

// SetWidth sets the "width" field.
func (u *RunwayUpsertBulk) SetWidth(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetWidth(v)
	})
}

// AddWidth adds v to the "width" field.
func (u *RunwayUpsertBulk) AddWidth(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddWidth(v)
	})
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateWidth() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateWidth()
	})
}

// SetSurface sets the "surface" field.
func (u *RunwayUpsertBulk) SetSurface(v string) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetSurface(v)
	})
}

// UpdateSurface sets the "surface" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateSurface() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateSurface()
	})
}

// ClearSurface clears the value of the "surface" field.
func (u *RunwayUpsertBulk) ClearSurface() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.ClearSurface()
	})
}

// SetLighted sets the "lighted" field.
func (u *RunwayUpsertBulk) SetLighted(v bool) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLighted(v)
	})
}

// UpdateLighted sets the "lighted" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateLighted() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLighted()
	})
}

// SetClosed sets the "closed" field.
func (u *RunwayUpsertBulk) SetClosed(v bool) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetClosed(v)
	})
}

// UpdateClosed sets the "closed" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateClosed() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateClosed()
	})
}

// SetLowRunwayIdentifier sets the "low_runway_identifier" field.
func (u *RunwayUpsertBulk) SetLowRunwayIdentifier(v string) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLowRunwayIdentifier(v)
	})
}

// UpdateLowRunwayIdentifier sets the "low_runway_identifier" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateLowRunwayIdentifier() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLowRunwayIdentifier()
	})
}

// SetLowRunwayLatitude sets the "low_runway_latitude" field.
func (u *RunwayUpsertBulk) SetLowRunwayLatitude(v float64) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLowRunwayLatitude(v)
	})
}

// AddLowRunwayLatitude adds v to the "low_runway_latitude" field.
func (u *RunwayUpsertBulk) AddLowRunwayLatitude(v float64) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddLowRunwayLatitude(v)
	})
}

// UpdateLowRunwayLatitude sets the "low_runway_latitude" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateLowRunwayLatitude() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLowRunwayLatitude()
	})
}

// ClearLowRunwayLatitude clears the value of the "low_runway_latitude" field.
func (u *RunwayUpsertBulk) ClearLowRunwayLatitude() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.ClearLowRunwayLatitude()
	})
}

// SetLowRunwayLongitude sets the "low_runway_longitude" field.
func (u *RunwayUpsertBulk) SetLowRunwayLongitude(v float64) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLowRunwayLongitude(v)
	})
}

// AddLowRunwayLongitude adds v to the "low_runway_longitude" field.
func (u *RunwayUpsertBulk) AddLowRunwayLongitude(v float64) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddLowRunwayLongitude(v)
	})
}

// UpdateLowRunwayLongitude sets the "low_runway_longitude" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateLowRunwayLongitude() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLowRunwayLongitude()
	})
}

// ClearLowRunwayLongitude clears the value of the "low_runway_longitude" field.
func (u *RunwayUpsertBulk) ClearLowRunwayLongitude() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.ClearLowRunwayLongitude()
	})
}

// SetLowRunwayElevation sets the "low_runway_elevation" field.
func (u *RunwayUpsertBulk) SetLowRunwayElevation(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLowRunwayElevation(v)
	})
}

// AddLowRunwayElevation adds v to the "low_runway_elevation" field.
func (u *RunwayUpsertBulk) AddLowRunwayElevation(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddLowRunwayElevation(v)
	})
}

// UpdateLowRunwayElevation sets the "low_runway_elevation" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateLowRunwayElevation() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLowRunwayElevation()
	})
}

// ClearLowRunwayElevation clears the value of the "low_runway_elevation" field.
func (u *RunwayUpsertBulk) ClearLowRunwayElevation() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.ClearLowRunwayElevation()
	})
}

// SetLowRunwayHeading sets the "low_runway_heading" field.
func (u *RunwayUpsertBulk) SetLowRunwayHeading(v float64) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLowRunwayHeading(v)
	})
}

// AddLowRunwayHeading adds v to the "low_runway_heading" field.
func (u *RunwayUpsertBulk) AddLowRunwayHeading(v float64) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddLowRunwayHeading(v)
	})
}

// UpdateLowRunwayHeading sets the "low_runway_heading" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateLowRunwayHeading() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLowRunwayHeading()
	})
}

// ClearLowRunwayHeading clears the value of the "low_runway_heading" field.
func (u *RunwayUpsertBulk) ClearLowRunwayHeading() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.ClearLowRunwayHeading()
	})
}

// SetLowRunwayDisplacedThreshold sets the "low_runway_displaced_threshold" field.
func (u *RunwayUpsertBulk) SetLowRunwayDisplacedThreshold(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetLowRunwayDisplacedThreshold(v)
	})
}

// AddLowRunwayDisplacedThreshold adds v to the "low_runway_displaced_threshold" field.
func (u *RunwayUpsertBulk) AddLowRunwayDisplacedThreshold(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddLowRunwayDisplacedThreshold(v)
	})
}

// UpdateLowRunwayDisplacedThreshold sets the "low_runway_displaced_threshold" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateLowRunwayDisplacedThreshold() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateLowRunwayDisplacedThreshold()
	})
}

// ClearLowRunwayDisplacedThreshold clears the value of the "low_runway_displaced_threshold" field.
func (u *RunwayUpsertBulk) ClearLowRunwayDisplacedThreshold() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.ClearLowRunwayDisplacedThreshold()
	})
}

// SetHighRunwayIdentifier sets the "high_runway_identifier" field.
func (u *RunwayUpsertBulk) SetHighRunwayIdentifier(v string) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHighRunwayIdentifier(v)
	})
}

// UpdateHighRunwayIdentifier sets the "high_runway_identifier" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateHighRunwayIdentifier() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHighRunwayIdentifier()
	})
}

// SetHighRunwayLatitude sets the "high_runway_latitude" field.
func (u *RunwayUpsertBulk) SetHighRunwayLatitude(v float64) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHighRunwayLatitude(v)
	})
}

// AddHighRunwayLatitude adds v to the "high_runway_latitude" field.
func (u *RunwayUpsertBulk) AddHighRunwayLatitude(v float64) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddHighRunwayLatitude(v)
	})
}

// UpdateHighRunwayLatitude sets the "high_runway_latitude" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateHighRunwayLatitude() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHighRunwayLatitude()
	})
}

// ClearHighRunwayLatitude clears the value of the "high_runway_latitude" field.
func (u *RunwayUpsertBulk) ClearHighRunwayLatitude() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.ClearHighRunwayLatitude()
	})
}

// SetHighRunwayLongitude sets the "high_runway_longitude" field.
func (u *RunwayUpsertBulk) SetHighRunwayLongitude(v float64) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHighRunwayLongitude(v)
	})
}

// AddHighRunwayLongitude adds v to the "high_runway_longitude" field.
func (u *RunwayUpsertBulk) AddHighRunwayLongitude(v float64) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddHighRunwayLongitude(v)
	})
}

// UpdateHighRunwayLongitude sets the "high_runway_longitude" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateHighRunwayLongitude() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHighRunwayLongitude()
	})
}

// ClearHighRunwayLongitude clears the value of the "high_runway_longitude" field.
func (u *RunwayUpsertBulk) ClearHighRunwayLongitude() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.ClearHighRunwayLongitude()
	})
}

// SetHighRunwayElevation sets the "high_runway_elevation" field.
func (u *RunwayUpsertBulk) SetHighRunwayElevation(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHighRunwayElevation(v)
	})
}

// AddHighRunwayElevation adds v to the "high_runway_elevation" field.
func (u *RunwayUpsertBulk) AddHighRunwayElevation(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddHighRunwayElevation(v)
	})
}

// UpdateHighRunwayElevation sets the "high_runway_elevation" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateHighRunwayElevation() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHighRunwayElevation()
	})
}

// ClearHighRunwayElevation clears the value of the "high_runway_elevation" field.
func (u *RunwayUpsertBulk) ClearHighRunwayElevation() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.ClearHighRunwayElevation()
	})
}

// SetHighRunwayHeading sets the "high_runway_heading" field.
func (u *RunwayUpsertBulk) SetHighRunwayHeading(v float64) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHighRunwayHeading(v)
	})
}

// AddHighRunwayHeading adds v to the "high_runway_heading" field.
func (u *RunwayUpsertBulk) AddHighRunwayHeading(v float64) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddHighRunwayHeading(v)
	})
}

// UpdateHighRunwayHeading sets the "high_runway_heading" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateHighRunwayHeading() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHighRunwayHeading()
	})
}

// ClearHighRunwayHeading clears the value of the "high_runway_heading" field.
func (u *RunwayUpsertBulk) ClearHighRunwayHeading() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.ClearHighRunwayHeading()
	})
}

// SetHighRunwayDisplacedThreshold sets the "high_runway_displaced_threshold" field.
func (u *RunwayUpsertBulk) SetHighRunwayDisplacedThreshold(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.SetHighRunwayDisplacedThreshold(v)
	})
}

// AddHighRunwayDisplacedThreshold adds v to the "high_runway_displaced_threshold" field.
func (u *RunwayUpsertBulk) AddHighRunwayDisplacedThreshold(v int) *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.AddHighRunwayDisplacedThreshold(v)
	})
}

// UpdateHighRunwayDisplacedThreshold sets the "high_runway_displaced_threshold" field to the value that was provided on create.
func (u *RunwayUpsertBulk) UpdateHighRunwayDisplacedThreshold() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.UpdateHighRunwayDisplacedThreshold()
	})
}

// ClearHighRunwayDisplacedThreshold clears the value of the "high_runway_displaced_threshold" field.
func (u *RunwayUpsertBulk) ClearHighRunwayDisplacedThreshold() *RunwayUpsertBulk {
	return u.Update(func(s *RunwayUpsert) {
		s.ClearHighRunwayDisplacedThreshold()
	})
}

// Exec executes the query.
func (u *RunwayUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RunwayCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RunwayCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RunwayUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
