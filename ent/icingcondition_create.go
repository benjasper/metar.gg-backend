// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"metar.gg/ent/icingcondition"
)

// IcingConditionCreate is the builder for creating a IcingCondition entity.
type IcingConditionCreate struct {
	config
	mutation *IcingConditionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIntensity sets the "intensity" field.
func (icc *IcingConditionCreate) SetIntensity(s string) *IcingConditionCreate {
	icc.mutation.SetIntensity(s)
	return icc
}

// SetMinAltitude sets the "min_altitude" field.
func (icc *IcingConditionCreate) SetMinAltitude(i int) *IcingConditionCreate {
	icc.mutation.SetMinAltitude(i)
	return icc
}

// SetNillableMinAltitude sets the "min_altitude" field if the given value is not nil.
func (icc *IcingConditionCreate) SetNillableMinAltitude(i *int) *IcingConditionCreate {
	if i != nil {
		icc.SetMinAltitude(*i)
	}
	return icc
}

// SetMaxAltitude sets the "max_altitude" field.
func (icc *IcingConditionCreate) SetMaxAltitude(i int) *IcingConditionCreate {
	icc.mutation.SetMaxAltitude(i)
	return icc
}

// SetNillableMaxAltitude sets the "max_altitude" field if the given value is not nil.
func (icc *IcingConditionCreate) SetNillableMaxAltitude(i *int) *IcingConditionCreate {
	if i != nil {
		icc.SetMaxAltitude(*i)
	}
	return icc
}

// Mutation returns the IcingConditionMutation object of the builder.
func (icc *IcingConditionCreate) Mutation() *IcingConditionMutation {
	return icc.mutation
}

// Save creates the IcingCondition in the database.
func (icc *IcingConditionCreate) Save(ctx context.Context) (*IcingCondition, error) {
	var (
		err  error
		node *IcingCondition
	)
	if len(icc.hooks) == 0 {
		if err = icc.check(); err != nil {
			return nil, err
		}
		node, err = icc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IcingConditionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = icc.check(); err != nil {
				return nil, err
			}
			icc.mutation = mutation
			if node, err = icc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(icc.hooks) - 1; i >= 0; i-- {
			if icc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = icc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, icc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*IcingCondition)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from IcingConditionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (icc *IcingConditionCreate) SaveX(ctx context.Context) *IcingCondition {
	v, err := icc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icc *IcingConditionCreate) Exec(ctx context.Context) error {
	_, err := icc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icc *IcingConditionCreate) ExecX(ctx context.Context) {
	if err := icc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (icc *IcingConditionCreate) check() error {
	if _, ok := icc.mutation.Intensity(); !ok {
		return &ValidationError{Name: "intensity", err: errors.New(`ent: missing required field "IcingCondition.intensity"`)}
	}
	return nil
}

func (icc *IcingConditionCreate) sqlSave(ctx context.Context) (*IcingCondition, error) {
	_node, _spec := icc.createSpec()
	if err := sqlgraph.CreateNode(ctx, icc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (icc *IcingConditionCreate) createSpec() (*IcingCondition, *sqlgraph.CreateSpec) {
	var (
		_node = &IcingCondition{config: icc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: icingcondition.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: icingcondition.FieldID,
			},
		}
	)
	_spec.OnConflict = icc.conflict
	if value, ok := icc.mutation.Intensity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: icingcondition.FieldIntensity,
		})
		_node.Intensity = value
	}
	if value, ok := icc.mutation.MinAltitude(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: icingcondition.FieldMinAltitude,
		})
		_node.MinAltitude = &value
	}
	if value, ok := icc.mutation.MaxAltitude(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: icingcondition.FieldMaxAltitude,
		})
		_node.MaxAltitude = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IcingCondition.Create().
//		SetIntensity(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IcingConditionUpsert) {
//			SetIntensity(v+v).
//		}).
//		Exec(ctx)
func (icc *IcingConditionCreate) OnConflict(opts ...sql.ConflictOption) *IcingConditionUpsertOne {
	icc.conflict = opts
	return &IcingConditionUpsertOne{
		create: icc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IcingCondition.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icc *IcingConditionCreate) OnConflictColumns(columns ...string) *IcingConditionUpsertOne {
	icc.conflict = append(icc.conflict, sql.ConflictColumns(columns...))
	return &IcingConditionUpsertOne{
		create: icc,
	}
}

type (
	// IcingConditionUpsertOne is the builder for "upsert"-ing
	//  one IcingCondition node.
	IcingConditionUpsertOne struct {
		create *IcingConditionCreate
	}

	// IcingConditionUpsert is the "OnConflict" setter.
	IcingConditionUpsert struct {
		*sql.UpdateSet
	}
)

// SetIntensity sets the "intensity" field.
func (u *IcingConditionUpsert) SetIntensity(v string) *IcingConditionUpsert {
	u.Set(icingcondition.FieldIntensity, v)
	return u
}

// UpdateIntensity sets the "intensity" field to the value that was provided on create.
func (u *IcingConditionUpsert) UpdateIntensity() *IcingConditionUpsert {
	u.SetExcluded(icingcondition.FieldIntensity)
	return u
}

// SetMinAltitude sets the "min_altitude" field.
func (u *IcingConditionUpsert) SetMinAltitude(v int) *IcingConditionUpsert {
	u.Set(icingcondition.FieldMinAltitude, v)
	return u
}

// UpdateMinAltitude sets the "min_altitude" field to the value that was provided on create.
func (u *IcingConditionUpsert) UpdateMinAltitude() *IcingConditionUpsert {
	u.SetExcluded(icingcondition.FieldMinAltitude)
	return u
}

// AddMinAltitude adds v to the "min_altitude" field.
func (u *IcingConditionUpsert) AddMinAltitude(v int) *IcingConditionUpsert {
	u.Add(icingcondition.FieldMinAltitude, v)
	return u
}

// ClearMinAltitude clears the value of the "min_altitude" field.
func (u *IcingConditionUpsert) ClearMinAltitude() *IcingConditionUpsert {
	u.SetNull(icingcondition.FieldMinAltitude)
	return u
}

// SetMaxAltitude sets the "max_altitude" field.
func (u *IcingConditionUpsert) SetMaxAltitude(v int) *IcingConditionUpsert {
	u.Set(icingcondition.FieldMaxAltitude, v)
	return u
}

// UpdateMaxAltitude sets the "max_altitude" field to the value that was provided on create.
func (u *IcingConditionUpsert) UpdateMaxAltitude() *IcingConditionUpsert {
	u.SetExcluded(icingcondition.FieldMaxAltitude)
	return u
}

// AddMaxAltitude adds v to the "max_altitude" field.
func (u *IcingConditionUpsert) AddMaxAltitude(v int) *IcingConditionUpsert {
	u.Add(icingcondition.FieldMaxAltitude, v)
	return u
}

// ClearMaxAltitude clears the value of the "max_altitude" field.
func (u *IcingConditionUpsert) ClearMaxAltitude() *IcingConditionUpsert {
	u.SetNull(icingcondition.FieldMaxAltitude)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.IcingCondition.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IcingConditionUpsertOne) UpdateNewValues() *IcingConditionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IcingCondition.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IcingConditionUpsertOne) Ignore() *IcingConditionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IcingConditionUpsertOne) DoNothing() *IcingConditionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IcingConditionCreate.OnConflict
// documentation for more info.
func (u *IcingConditionUpsertOne) Update(set func(*IcingConditionUpsert)) *IcingConditionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IcingConditionUpsert{UpdateSet: update})
	}))
	return u
}

// SetIntensity sets the "intensity" field.
func (u *IcingConditionUpsertOne) SetIntensity(v string) *IcingConditionUpsertOne {
	return u.Update(func(s *IcingConditionUpsert) {
		s.SetIntensity(v)
	})
}

// UpdateIntensity sets the "intensity" field to the value that was provided on create.
func (u *IcingConditionUpsertOne) UpdateIntensity() *IcingConditionUpsertOne {
	return u.Update(func(s *IcingConditionUpsert) {
		s.UpdateIntensity()
	})
}

// SetMinAltitude sets the "min_altitude" field.
func (u *IcingConditionUpsertOne) SetMinAltitude(v int) *IcingConditionUpsertOne {
	return u.Update(func(s *IcingConditionUpsert) {
		s.SetMinAltitude(v)
	})
}

// AddMinAltitude adds v to the "min_altitude" field.
func (u *IcingConditionUpsertOne) AddMinAltitude(v int) *IcingConditionUpsertOne {
	return u.Update(func(s *IcingConditionUpsert) {
		s.AddMinAltitude(v)
	})
}

// UpdateMinAltitude sets the "min_altitude" field to the value that was provided on create.
func (u *IcingConditionUpsertOne) UpdateMinAltitude() *IcingConditionUpsertOne {
	return u.Update(func(s *IcingConditionUpsert) {
		s.UpdateMinAltitude()
	})
}

// ClearMinAltitude clears the value of the "min_altitude" field.
func (u *IcingConditionUpsertOne) ClearMinAltitude() *IcingConditionUpsertOne {
	return u.Update(func(s *IcingConditionUpsert) {
		s.ClearMinAltitude()
	})
}

// SetMaxAltitude sets the "max_altitude" field.
func (u *IcingConditionUpsertOne) SetMaxAltitude(v int) *IcingConditionUpsertOne {
	return u.Update(func(s *IcingConditionUpsert) {
		s.SetMaxAltitude(v)
	})
}

// AddMaxAltitude adds v to the "max_altitude" field.
func (u *IcingConditionUpsertOne) AddMaxAltitude(v int) *IcingConditionUpsertOne {
	return u.Update(func(s *IcingConditionUpsert) {
		s.AddMaxAltitude(v)
	})
}

// UpdateMaxAltitude sets the "max_altitude" field to the value that was provided on create.
func (u *IcingConditionUpsertOne) UpdateMaxAltitude() *IcingConditionUpsertOne {
	return u.Update(func(s *IcingConditionUpsert) {
		s.UpdateMaxAltitude()
	})
}

// ClearMaxAltitude clears the value of the "max_altitude" field.
func (u *IcingConditionUpsertOne) ClearMaxAltitude() *IcingConditionUpsertOne {
	return u.Update(func(s *IcingConditionUpsert) {
		s.ClearMaxAltitude()
	})
}

// Exec executes the query.
func (u *IcingConditionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IcingConditionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IcingConditionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IcingConditionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IcingConditionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IcingConditionCreateBulk is the builder for creating many IcingCondition entities in bulk.
type IcingConditionCreateBulk struct {
	config
	builders []*IcingConditionCreate
	conflict []sql.ConflictOption
}

// Save creates the IcingCondition entities in the database.
func (iccb *IcingConditionCreateBulk) Save(ctx context.Context) ([]*IcingCondition, error) {
	specs := make([]*sqlgraph.CreateSpec, len(iccb.builders))
	nodes := make([]*IcingCondition, len(iccb.builders))
	mutators := make([]Mutator, len(iccb.builders))
	for i := range iccb.builders {
		func(i int, root context.Context) {
			builder := iccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IcingConditionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = iccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iccb *IcingConditionCreateBulk) SaveX(ctx context.Context) []*IcingCondition {
	v, err := iccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iccb *IcingConditionCreateBulk) Exec(ctx context.Context) error {
	_, err := iccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iccb *IcingConditionCreateBulk) ExecX(ctx context.Context) {
	if err := iccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IcingCondition.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IcingConditionUpsert) {
//			SetIntensity(v+v).
//		}).
//		Exec(ctx)
func (iccb *IcingConditionCreateBulk) OnConflict(opts ...sql.ConflictOption) *IcingConditionUpsertBulk {
	iccb.conflict = opts
	return &IcingConditionUpsertBulk{
		create: iccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IcingCondition.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iccb *IcingConditionCreateBulk) OnConflictColumns(columns ...string) *IcingConditionUpsertBulk {
	iccb.conflict = append(iccb.conflict, sql.ConflictColumns(columns...))
	return &IcingConditionUpsertBulk{
		create: iccb,
	}
}

// IcingConditionUpsertBulk is the builder for "upsert"-ing
// a bulk of IcingCondition nodes.
type IcingConditionUpsertBulk struct {
	create *IcingConditionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IcingCondition.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IcingConditionUpsertBulk) UpdateNewValues() *IcingConditionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IcingCondition.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IcingConditionUpsertBulk) Ignore() *IcingConditionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IcingConditionUpsertBulk) DoNothing() *IcingConditionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IcingConditionCreateBulk.OnConflict
// documentation for more info.
func (u *IcingConditionUpsertBulk) Update(set func(*IcingConditionUpsert)) *IcingConditionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IcingConditionUpsert{UpdateSet: update})
	}))
	return u
}

// SetIntensity sets the "intensity" field.
func (u *IcingConditionUpsertBulk) SetIntensity(v string) *IcingConditionUpsertBulk {
	return u.Update(func(s *IcingConditionUpsert) {
		s.SetIntensity(v)
	})
}

// UpdateIntensity sets the "intensity" field to the value that was provided on create.
func (u *IcingConditionUpsertBulk) UpdateIntensity() *IcingConditionUpsertBulk {
	return u.Update(func(s *IcingConditionUpsert) {
		s.UpdateIntensity()
	})
}

// SetMinAltitude sets the "min_altitude" field.
func (u *IcingConditionUpsertBulk) SetMinAltitude(v int) *IcingConditionUpsertBulk {
	return u.Update(func(s *IcingConditionUpsert) {
		s.SetMinAltitude(v)
	})
}

// AddMinAltitude adds v to the "min_altitude" field.
func (u *IcingConditionUpsertBulk) AddMinAltitude(v int) *IcingConditionUpsertBulk {
	return u.Update(func(s *IcingConditionUpsert) {
		s.AddMinAltitude(v)
	})
}

// UpdateMinAltitude sets the "min_altitude" field to the value that was provided on create.
func (u *IcingConditionUpsertBulk) UpdateMinAltitude() *IcingConditionUpsertBulk {
	return u.Update(func(s *IcingConditionUpsert) {
		s.UpdateMinAltitude()
	})
}

// ClearMinAltitude clears the value of the "min_altitude" field.
func (u *IcingConditionUpsertBulk) ClearMinAltitude() *IcingConditionUpsertBulk {
	return u.Update(func(s *IcingConditionUpsert) {
		s.ClearMinAltitude()
	})
}

// SetMaxAltitude sets the "max_altitude" field.
func (u *IcingConditionUpsertBulk) SetMaxAltitude(v int) *IcingConditionUpsertBulk {
	return u.Update(func(s *IcingConditionUpsert) {
		s.SetMaxAltitude(v)
	})
}

// AddMaxAltitude adds v to the "max_altitude" field.
func (u *IcingConditionUpsertBulk) AddMaxAltitude(v int) *IcingConditionUpsertBulk {
	return u.Update(func(s *IcingConditionUpsert) {
		s.AddMaxAltitude(v)
	})
}

// UpdateMaxAltitude sets the "max_altitude" field to the value that was provided on create.
func (u *IcingConditionUpsertBulk) UpdateMaxAltitude() *IcingConditionUpsertBulk {
	return u.Update(func(s *IcingConditionUpsert) {
		s.UpdateMaxAltitude()
	})
}

// ClearMaxAltitude clears the value of the "max_altitude" field.
func (u *IcingConditionUpsertBulk) ClearMaxAltitude() *IcingConditionUpsertBulk {
	return u.Update(func(s *IcingConditionUpsert) {
		s.ClearMaxAltitude()
	})
}

// Exec executes the query.
func (u *IcingConditionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IcingConditionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IcingConditionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IcingConditionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
