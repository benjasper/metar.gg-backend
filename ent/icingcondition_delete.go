// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"metar.gg/ent/icingcondition"
	"metar.gg/ent/predicate"
)

// IcingConditionDelete is the builder for deleting a IcingCondition entity.
type IcingConditionDelete struct {
	config
	hooks    []Hook
	mutation *IcingConditionMutation
}

// Where appends a list predicates to the IcingConditionDelete builder.
func (icd *IcingConditionDelete) Where(ps ...predicate.IcingCondition) *IcingConditionDelete {
	icd.mutation.Where(ps...)
	return icd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (icd *IcingConditionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, IcingConditionMutation](ctx, icd.sqlExec, icd.mutation, icd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (icd *IcingConditionDelete) ExecX(ctx context.Context) int {
	n, err := icd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (icd *IcingConditionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(icingcondition.Table, sqlgraph.NewFieldSpec(icingcondition.FieldID, field.TypeUUID))
	if ps := icd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, icd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	icd.mutation.done = true
	return affected, err
}

// IcingConditionDeleteOne is the builder for deleting a single IcingCondition entity.
type IcingConditionDeleteOne struct {
	icd *IcingConditionDelete
}

// Where appends a list predicates to the IcingConditionDelete builder.
func (icdo *IcingConditionDeleteOne) Where(ps ...predicate.IcingCondition) *IcingConditionDeleteOne {
	icdo.icd.mutation.Where(ps...)
	return icdo
}

// Exec executes the deletion query.
func (icdo *IcingConditionDeleteOne) Exec(ctx context.Context) error {
	n, err := icdo.icd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{icingcondition.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (icdo *IcingConditionDeleteOne) ExecX(ctx context.Context) {
	if err := icdo.Exec(ctx); err != nil {
		panic(err)
	}
}
