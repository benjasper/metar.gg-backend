// Code generated by ent, DO NOT EDIT.

package airport

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

const (
	// Label holds the string label denoting the airport type in the database.
	Label = "airport"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// FieldImportFlag holds the string denoting the import_flag field in the database.
	FieldImportFlag = "import_flag"
	// FieldLastUpdated holds the string denoting the last_updated field in the database.
	FieldLastUpdated = "last_updated"
	// FieldIdentifier holds the string denoting the identifier field in the database.
	FieldIdentifier = "identifier"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLatitude holds the string denoting the latitude field in the database.
	FieldLatitude = "latitude"
	// FieldLongitude holds the string denoting the longitude field in the database.
	FieldLongitude = "longitude"
	// FieldElevation holds the string denoting the elevation field in the database.
	FieldElevation = "elevation"
	// FieldContinent holds the string denoting the continent field in the database.
	FieldContinent = "continent"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldRegion holds the string denoting the region field in the database.
	FieldRegion = "region"
	// FieldMunicipality holds the string denoting the municipality field in the database.
	FieldMunicipality = "municipality"
	// FieldScheduledService holds the string denoting the scheduled_service field in the database.
	FieldScheduledService = "scheduled_service"
	// FieldGpsCode holds the string denoting the gps_code field in the database.
	FieldGpsCode = "gps_code"
	// FieldIataCode holds the string denoting the iata_code field in the database.
	FieldIataCode = "iata_code"
	// FieldLocalCode holds the string denoting the local_code field in the database.
	FieldLocalCode = "local_code"
	// FieldWebsite holds the string denoting the website field in the database.
	FieldWebsite = "website"
	// FieldWikipedia holds the string denoting the wikipedia field in the database.
	FieldWikipedia = "wikipedia"
	// FieldKeywords holds the string denoting the keywords field in the database.
	FieldKeywords = "keywords"
	// EdgeRunways holds the string denoting the runways edge name in mutations.
	EdgeRunways = "runways"
	// EdgeStation holds the string denoting the station edge name in mutations.
	EdgeStation = "station"
	// EdgeFrequencies holds the string denoting the frequencies edge name in mutations.
	EdgeFrequencies = "frequencies"
	// Table holds the table name of the airport in the database.
	Table = "airports"
	// RunwaysTable is the table that holds the runways relation/edge.
	RunwaysTable = "runways"
	// RunwaysInverseTable is the table name for the Runway entity.
	// It exists in this package in order to avoid circular dependency with the "runway" package.
	RunwaysInverseTable = "runways"
	// RunwaysColumn is the table column denoting the runways relation/edge.
	RunwaysColumn = "airport_runways"
	// StationTable is the table that holds the station relation/edge.
	StationTable = "stations"
	// StationInverseTable is the table name for the Station entity.
	// It exists in this package in order to avoid circular dependency with the "station" package.
	StationInverseTable = "stations"
	// StationColumn is the table column denoting the station relation/edge.
	StationColumn = "airport_station"
	// FrequenciesTable is the table that holds the frequencies relation/edge.
	FrequenciesTable = "frequencies"
	// FrequenciesInverseTable is the table name for the Frequency entity.
	// It exists in this package in order to avoid circular dependency with the "frequency" package.
	FrequenciesInverseTable = "frequencies"
	// FrequenciesColumn is the table column denoting the frequencies relation/edge.
	FrequenciesColumn = "airport_frequencies"
)

// Columns holds all SQL columns for airport fields.
var Columns = []string{
	FieldID,
	FieldHash,
	FieldImportFlag,
	FieldLastUpdated,
	FieldIdentifier,
	FieldType,
	FieldName,
	FieldLatitude,
	FieldLongitude,
	FieldElevation,
	FieldContinent,
	FieldCountry,
	FieldRegion,
	FieldMunicipality,
	FieldScheduledService,
	FieldGpsCode,
	FieldIataCode,
	FieldLocalCode,
	FieldWebsite,
	FieldWikipedia,
	FieldKeywords,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultImportFlag holds the default value on creation for the "import_flag" field.
	DefaultImportFlag bool
	// DefaultLastUpdated holds the default value on creation for the "last_updated" field.
	DefaultLastUpdated func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeLargeAirport  Type = "large_airport"
	TypeMediumAirport Type = "medium_airport"
	TypeSmallAirport  Type = "small_airport"
	TypeClosedAirport Type = "closed_airport"
	TypeHeliport      Type = "heliport"
	TypeSeaplaneBase  Type = "seaplane_base"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeLargeAirport, TypeMediumAirport, TypeSmallAirport, TypeClosedAirport, TypeHeliport, TypeSeaplaneBase:
		return nil
	default:
		return fmt.Errorf("airport: invalid enum value for type field: %q", _type)
	}
}

// Continent defines the type for the "continent" enum field.
type Continent string

// Continent values.
const (
	ContinentAfrica       Continent = "AF"
	ContinentAntarctica   Continent = "AN"
	ContinentAsia         Continent = "AS"
	ContinentEurope       Continent = "EU"
	ContinentNorthAmerica Continent = "NA"
	ContinentSouthAmerica Continent = "SA"
	ContinentOceania      Continent = "OC"
)

func (c Continent) String() string {
	return string(c)
}

// ContinentValidator is a validator for the "continent" field enum values. It is called by the builders before save.
func ContinentValidator(c Continent) error {
	switch c {
	case ContinentAfrica, ContinentAntarctica, ContinentAsia, ContinentEurope, ContinentNorthAmerica, ContinentSouthAmerica, ContinentOceania:
		return nil
	default:
		return fmt.Errorf("airport: invalid enum value for continent field: %q", c)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Type(str)
	if err := TypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Continent) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Continent) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Continent(str)
	if err := ContinentValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Continent", str)
	}
	return nil
}
