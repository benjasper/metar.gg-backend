// Code generated by ent, DO NOT EDIT.

package airport

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the airport type in the database.
	Label = "airport"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldImportID holds the string denoting the import_id field in the database.
	FieldImportID = "import_id"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// FieldImportFlag holds the string denoting the import_flag field in the database.
	FieldImportFlag = "import_flag"
	// FieldLastUpdated holds the string denoting the last_updated field in the database.
	FieldLastUpdated = "last_updated"
	// FieldIcaoCode holds the string denoting the icao_code field in the database.
	FieldIcaoCode = "icao_code"
	// FieldIataCode holds the string denoting the iata_code field in the database.
	FieldIataCode = "iata_code"
	// FieldIdentifier holds the string denoting the identifier field in the database.
	FieldIdentifier = "identifier"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLatitude holds the string denoting the latitude field in the database.
	FieldLatitude = "latitude"
	// FieldLongitude holds the string denoting the longitude field in the database.
	FieldLongitude = "longitude"
	// FieldElevation holds the string denoting the elevation field in the database.
	FieldElevation = "elevation"
	// FieldMunicipality holds the string denoting the municipality field in the database.
	FieldMunicipality = "municipality"
	// FieldScheduledService holds the string denoting the scheduled_service field in the database.
	FieldScheduledService = "scheduled_service"
	// FieldGpsCode holds the string denoting the gps_code field in the database.
	FieldGpsCode = "gps_code"
	// FieldLocalCode holds the string denoting the local_code field in the database.
	FieldLocalCode = "local_code"
	// FieldWebsite holds the string denoting the website field in the database.
	FieldWebsite = "website"
	// FieldWikipedia holds the string denoting the wikipedia field in the database.
	FieldWikipedia = "wikipedia"
	// FieldKeywords holds the string denoting the keywords field in the database.
	FieldKeywords = "keywords"
	// EdgeRegion holds the string denoting the region edge name in mutations.
	EdgeRegion = "region"
	// EdgeCountry holds the string denoting the country edge name in mutations.
	EdgeCountry = "country"
	// EdgeRunways holds the string denoting the runways edge name in mutations.
	EdgeRunways = "runways"
	// EdgeFrequencies holds the string denoting the frequencies edge name in mutations.
	EdgeFrequencies = "frequencies"
	// EdgeStation holds the string denoting the station edge name in mutations.
	EdgeStation = "station"
	// Table holds the table name of the airport in the database.
	Table = "airports"
	// RegionTable is the table that holds the region relation/edge.
	RegionTable = "airports"
	// RegionInverseTable is the table name for the Region entity.
	// It exists in this package in order to avoid circular dependency with the "region" package.
	RegionInverseTable = "regions"
	// RegionColumn is the table column denoting the region relation/edge.
	RegionColumn = "region_airports"
	// CountryTable is the table that holds the country relation/edge.
	CountryTable = "airports"
	// CountryInverseTable is the table name for the Country entity.
	// It exists in this package in order to avoid circular dependency with the "country" package.
	CountryInverseTable = "countries"
	// CountryColumn is the table column denoting the country relation/edge.
	CountryColumn = "country_airports"
	// RunwaysTable is the table that holds the runways relation/edge.
	RunwaysTable = "runways"
	// RunwaysInverseTable is the table name for the Runway entity.
	// It exists in this package in order to avoid circular dependency with the "runway" package.
	RunwaysInverseTable = "runways"
	// RunwaysColumn is the table column denoting the runways relation/edge.
	RunwaysColumn = "airport_runways"
	// FrequenciesTable is the table that holds the frequencies relation/edge.
	FrequenciesTable = "frequencies"
	// FrequenciesInverseTable is the table name for the Frequency entity.
	// It exists in this package in order to avoid circular dependency with the "frequency" package.
	FrequenciesInverseTable = "frequencies"
	// FrequenciesColumn is the table column denoting the frequencies relation/edge.
	FrequenciesColumn = "airport_frequencies"
	// StationTable is the table that holds the station relation/edge.
	StationTable = "weather_stations"
	// StationInverseTable is the table name for the WeatherStation entity.
	// It exists in this package in order to avoid circular dependency with the "weatherstation" package.
	StationInverseTable = "weather_stations"
	// StationColumn is the table column denoting the station relation/edge.
	StationColumn = "airport_station"
)

// Columns holds all SQL columns for airport fields.
var Columns = []string{
	FieldID,
	FieldImportID,
	FieldHash,
	FieldImportFlag,
	FieldLastUpdated,
	FieldIcaoCode,
	FieldIataCode,
	FieldIdentifier,
	FieldType,
	FieldName,
	FieldLatitude,
	FieldLongitude,
	FieldElevation,
	FieldMunicipality,
	FieldScheduledService,
	FieldGpsCode,
	FieldLocalCode,
	FieldWebsite,
	FieldWikipedia,
	FieldKeywords,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "airports"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"country_airports",
	"region_airports",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultImportFlag holds the default value on creation for the "import_flag" field.
	DefaultImportFlag bool
	// DefaultLastUpdated holds the default value on creation for the "last_updated" field.
	DefaultLastUpdated func() time.Time
	// IcaoCodeValidator is a validator for the "icao_code" field. It is called by the builders before save.
	IcaoCodeValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeLargeAirport  Type = "large_airport"
	TypeMediumAirport Type = "medium_airport"
	TypeSmallAirport  Type = "small_airport"
	TypeClosedAirport Type = "closed_airport"
	TypeHeliport      Type = "heliport"
	TypeSeaplaneBase  Type = "seaplane_base"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeLargeAirport, TypeMediumAirport, TypeSmallAirport, TypeClosedAirport, TypeHeliport, TypeSeaplaneBase:
		return nil
	default:
		return fmt.Errorf("airport: invalid enum value for type field: %q", _type)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Type(str)
	if err := TypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
