// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"metar.gg/ent/temperaturedata"
)

// TemperatureData is the model entity for the TemperatureData schema.
type TemperatureData struct {
	config `json:"-"`
	// ID of the ent.
	// The unique identifier of the record.
	ID uuid.UUID `json:"id,omitempty"`
	// The time the temperature data is valid.
	ValidTime time.Time `json:"valid_time,omitempty"`
	// The surface temperature in degrees Celsius.
	Temperature float64 `json:"temperature,omitempty"`
	// The minimum temperature in degrees Celsius.
	MinTemperature *float64 `json:"min_temperature,omitempty"`
	// The maximum temperature in degrees Celsius.
	MaxTemperature            *float64 `json:"max_temperature,omitempty"`
	forecast_temperature_data *uuid.UUID
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TemperatureData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case temperaturedata.FieldTemperature, temperaturedata.FieldMinTemperature, temperaturedata.FieldMaxTemperature:
			values[i] = new(sql.NullFloat64)
		case temperaturedata.FieldValidTime:
			values[i] = new(sql.NullTime)
		case temperaturedata.FieldID:
			values[i] = new(uuid.UUID)
		case temperaturedata.ForeignKeys[0]: // forecast_temperature_data
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type TemperatureData", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TemperatureData fields.
func (td *TemperatureData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case temperaturedata.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				td.ID = *value
			}
		case temperaturedata.FieldValidTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field valid_time", values[i])
			} else if value.Valid {
				td.ValidTime = value.Time
			}
		case temperaturedata.FieldTemperature:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field temperature", values[i])
			} else if value.Valid {
				td.Temperature = value.Float64
			}
		case temperaturedata.FieldMinTemperature:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field min_temperature", values[i])
			} else if value.Valid {
				td.MinTemperature = new(float64)
				*td.MinTemperature = value.Float64
			}
		case temperaturedata.FieldMaxTemperature:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field max_temperature", values[i])
			} else if value.Valid {
				td.MaxTemperature = new(float64)
				*td.MaxTemperature = value.Float64
			}
		case temperaturedata.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field forecast_temperature_data", values[i])
			} else if value.Valid {
				td.forecast_temperature_data = new(uuid.UUID)
				*td.forecast_temperature_data = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TemperatureData.
// Note that you need to call TemperatureData.Unwrap() before calling this method if this TemperatureData
// was returned from a transaction, and the transaction was committed or rolled back.
func (td *TemperatureData) Update() *TemperatureDataUpdateOne {
	return NewTemperatureDataClient(td.config).UpdateOne(td)
}

// Unwrap unwraps the TemperatureData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (td *TemperatureData) Unwrap() *TemperatureData {
	_tx, ok := td.config.driver.(*txDriver)
	if !ok {
		panic("ent: TemperatureData is not a transactional entity")
	}
	td.config.driver = _tx.drv
	return td
}

// String implements the fmt.Stringer.
func (td *TemperatureData) String() string {
	var builder strings.Builder
	builder.WriteString("TemperatureData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", td.ID))
	builder.WriteString("valid_time=")
	builder.WriteString(td.ValidTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("temperature=")
	builder.WriteString(fmt.Sprintf("%v", td.Temperature))
	builder.WriteString(", ")
	if v := td.MinTemperature; v != nil {
		builder.WriteString("min_temperature=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := td.MaxTemperature; v != nil {
		builder.WriteString("max_temperature=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// TemperatureDataSlice is a parsable slice of TemperatureData.
type TemperatureDataSlice []*TemperatureData
