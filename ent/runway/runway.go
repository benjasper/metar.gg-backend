// Code generated by ent, DO NOT EDIT.

package runway

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the runway type in the database.
	Label = "runway"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldImportID holds the string denoting the import_id field in the database.
	FieldImportID = "import_id"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// FieldImportFlag holds the string denoting the import_flag field in the database.
	FieldImportFlag = "import_flag"
	// FieldLastUpdated holds the string denoting the last_updated field in the database.
	FieldLastUpdated = "last_updated"
	// FieldLength holds the string denoting the length field in the database.
	FieldLength = "length"
	// FieldWidth holds the string denoting the width field in the database.
	FieldWidth = "width"
	// FieldSurface holds the string denoting the surface field in the database.
	FieldSurface = "surface"
	// FieldLighted holds the string denoting the lighted field in the database.
	FieldLighted = "lighted"
	// FieldClosed holds the string denoting the closed field in the database.
	FieldClosed = "closed"
	// FieldLowRunwayIdentifier holds the string denoting the low_runway_identifier field in the database.
	FieldLowRunwayIdentifier = "low_runway_identifier"
	// FieldLowRunwayLatitude holds the string denoting the low_runway_latitude field in the database.
	FieldLowRunwayLatitude = "low_runway_latitude"
	// FieldLowRunwayLongitude holds the string denoting the low_runway_longitude field in the database.
	FieldLowRunwayLongitude = "low_runway_longitude"
	// FieldLowRunwayElevation holds the string denoting the low_runway_elevation field in the database.
	FieldLowRunwayElevation = "low_runway_elevation"
	// FieldLowRunwayHeading holds the string denoting the low_runway_heading field in the database.
	FieldLowRunwayHeading = "low_runway_heading"
	// FieldLowRunwayDisplacedThreshold holds the string denoting the low_runway_displaced_threshold field in the database.
	FieldLowRunwayDisplacedThreshold = "low_runway_displaced_threshold"
	// FieldHighRunwayIdentifier holds the string denoting the high_runway_identifier field in the database.
	FieldHighRunwayIdentifier = "high_runway_identifier"
	// FieldHighRunwayLatitude holds the string denoting the high_runway_latitude field in the database.
	FieldHighRunwayLatitude = "high_runway_latitude"
	// FieldHighRunwayLongitude holds the string denoting the high_runway_longitude field in the database.
	FieldHighRunwayLongitude = "high_runway_longitude"
	// FieldHighRunwayElevation holds the string denoting the high_runway_elevation field in the database.
	FieldHighRunwayElevation = "high_runway_elevation"
	// FieldHighRunwayHeading holds the string denoting the high_runway_heading field in the database.
	FieldHighRunwayHeading = "high_runway_heading"
	// FieldHighRunwayDisplacedThreshold holds the string denoting the high_runway_displaced_threshold field in the database.
	FieldHighRunwayDisplacedThreshold = "high_runway_displaced_threshold"
	// EdgeAirport holds the string denoting the airport edge name in mutations.
	EdgeAirport = "airport"
	// Table holds the table name of the runway in the database.
	Table = "runways"
	// AirportTable is the table that holds the airport relation/edge.
	AirportTable = "runways"
	// AirportInverseTable is the table name for the Airport entity.
	// It exists in this package in order to avoid circular dependency with the "airport" package.
	AirportInverseTable = "airports"
	// AirportColumn is the table column denoting the airport relation/edge.
	AirportColumn = "airport_runways"
)

// Columns holds all SQL columns for runway fields.
var Columns = []string{
	FieldID,
	FieldImportID,
	FieldHash,
	FieldImportFlag,
	FieldLastUpdated,
	FieldLength,
	FieldWidth,
	FieldSurface,
	FieldLighted,
	FieldClosed,
	FieldLowRunwayIdentifier,
	FieldLowRunwayLatitude,
	FieldLowRunwayLongitude,
	FieldLowRunwayElevation,
	FieldLowRunwayHeading,
	FieldLowRunwayDisplacedThreshold,
	FieldHighRunwayIdentifier,
	FieldHighRunwayLatitude,
	FieldHighRunwayLongitude,
	FieldHighRunwayElevation,
	FieldHighRunwayHeading,
	FieldHighRunwayDisplacedThreshold,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "runways"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"airport_runways",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultImportFlag holds the default value on creation for the "import_flag" field.
	DefaultImportFlag bool
	// DefaultLastUpdated holds the default value on creation for the "last_updated" field.
	DefaultLastUpdated func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Runway queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByImportID orders the results by the import_id field.
func ByImportID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImportID, opts...).ToFunc()
}

// ByHash orders the results by the hash field.
func ByHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHash, opts...).ToFunc()
}

// ByImportFlag orders the results by the import_flag field.
func ByImportFlag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImportFlag, opts...).ToFunc()
}

// ByLastUpdated orders the results by the last_updated field.
func ByLastUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUpdated, opts...).ToFunc()
}

// ByLength orders the results by the length field.
func ByLength(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLength, opts...).ToFunc()
}

// ByWidth orders the results by the width field.
func ByWidth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWidth, opts...).ToFunc()
}

// BySurface orders the results by the surface field.
func BySurface(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSurface, opts...).ToFunc()
}

// ByLighted orders the results by the lighted field.
func ByLighted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLighted, opts...).ToFunc()
}

// ByClosed orders the results by the closed field.
func ByClosed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClosed, opts...).ToFunc()
}

// ByLowRunwayIdentifier orders the results by the low_runway_identifier field.
func ByLowRunwayIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLowRunwayIdentifier, opts...).ToFunc()
}

// ByLowRunwayLatitude orders the results by the low_runway_latitude field.
func ByLowRunwayLatitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLowRunwayLatitude, opts...).ToFunc()
}

// ByLowRunwayLongitude orders the results by the low_runway_longitude field.
func ByLowRunwayLongitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLowRunwayLongitude, opts...).ToFunc()
}

// ByLowRunwayElevation orders the results by the low_runway_elevation field.
func ByLowRunwayElevation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLowRunwayElevation, opts...).ToFunc()
}

// ByLowRunwayHeading orders the results by the low_runway_heading field.
func ByLowRunwayHeading(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLowRunwayHeading, opts...).ToFunc()
}

// ByLowRunwayDisplacedThreshold orders the results by the low_runway_displaced_threshold field.
func ByLowRunwayDisplacedThreshold(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLowRunwayDisplacedThreshold, opts...).ToFunc()
}

// ByHighRunwayIdentifier orders the results by the high_runway_identifier field.
func ByHighRunwayIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHighRunwayIdentifier, opts...).ToFunc()
}

// ByHighRunwayLatitude orders the results by the high_runway_latitude field.
func ByHighRunwayLatitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHighRunwayLatitude, opts...).ToFunc()
}

// ByHighRunwayLongitude orders the results by the high_runway_longitude field.
func ByHighRunwayLongitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHighRunwayLongitude, opts...).ToFunc()
}

// ByHighRunwayElevation orders the results by the high_runway_elevation field.
func ByHighRunwayElevation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHighRunwayElevation, opts...).ToFunc()
}

// ByHighRunwayHeading orders the results by the high_runway_heading field.
func ByHighRunwayHeading(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHighRunwayHeading, opts...).ToFunc()
}

// ByHighRunwayDisplacedThreshold orders the results by the high_runway_displaced_threshold field.
func ByHighRunwayDisplacedThreshold(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHighRunwayDisplacedThreshold, opts...).ToFunc()
}

// ByAirportField orders the results by airport field.
func ByAirportField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAirportStep(), sql.OrderByField(field, opts...))
	}
}
func newAirportStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AirportInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AirportTable, AirportColumn),
	)
}
