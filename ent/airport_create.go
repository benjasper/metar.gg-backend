// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"metar.gg/ent/airport"
	"metar.gg/ent/country"
	"metar.gg/ent/frequency"
	"metar.gg/ent/region"
	"metar.gg/ent/runway"
	"metar.gg/ent/weatherstation"
)

// AirportCreate is the builder for creating a Airport entity.
type AirportCreate struct {
	config
	mutation *AirportMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetImportID sets the "import_id" field.
func (ac *AirportCreate) SetImportID(i int) *AirportCreate {
	ac.mutation.SetImportID(i)
	return ac
}

// SetHash sets the "hash" field.
func (ac *AirportCreate) SetHash(s string) *AirportCreate {
	ac.mutation.SetHash(s)
	return ac
}

// SetImportFlag sets the "import_flag" field.
func (ac *AirportCreate) SetImportFlag(b bool) *AirportCreate {
	ac.mutation.SetImportFlag(b)
	return ac
}

// SetNillableImportFlag sets the "import_flag" field if the given value is not nil.
func (ac *AirportCreate) SetNillableImportFlag(b *bool) *AirportCreate {
	if b != nil {
		ac.SetImportFlag(*b)
	}
	return ac
}

// SetLastUpdated sets the "last_updated" field.
func (ac *AirportCreate) SetLastUpdated(t time.Time) *AirportCreate {
	ac.mutation.SetLastUpdated(t)
	return ac
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (ac *AirportCreate) SetNillableLastUpdated(t *time.Time) *AirportCreate {
	if t != nil {
		ac.SetLastUpdated(*t)
	}
	return ac
}

// SetIcaoCode sets the "icao_code" field.
func (ac *AirportCreate) SetIcaoCode(s string) *AirportCreate {
	ac.mutation.SetIcaoCode(s)
	return ac
}

// SetNillableIcaoCode sets the "icao_code" field if the given value is not nil.
func (ac *AirportCreate) SetNillableIcaoCode(s *string) *AirportCreate {
	if s != nil {
		ac.SetIcaoCode(*s)
	}
	return ac
}

// SetIataCode sets the "iata_code" field.
func (ac *AirportCreate) SetIataCode(s string) *AirportCreate {
	ac.mutation.SetIataCode(s)
	return ac
}

// SetNillableIataCode sets the "iata_code" field if the given value is not nil.
func (ac *AirportCreate) SetNillableIataCode(s *string) *AirportCreate {
	if s != nil {
		ac.SetIataCode(*s)
	}
	return ac
}

// SetIdentifier sets the "identifier" field.
func (ac *AirportCreate) SetIdentifier(s string) *AirportCreate {
	ac.mutation.SetIdentifier(s)
	return ac
}

// SetType sets the "type" field.
func (ac *AirportCreate) SetType(a airport.Type) *AirportCreate {
	ac.mutation.SetType(a)
	return ac
}

// SetImportance sets the "importance" field.
func (ac *AirportCreate) SetImportance(i int) *AirportCreate {
	ac.mutation.SetImportance(i)
	return ac
}

// SetNillableImportance sets the "importance" field if the given value is not nil.
func (ac *AirportCreate) SetNillableImportance(i *int) *AirportCreate {
	if i != nil {
		ac.SetImportance(*i)
	}
	return ac
}

// SetName sets the "name" field.
func (ac *AirportCreate) SetName(s string) *AirportCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetLatitude sets the "latitude" field.
func (ac *AirportCreate) SetLatitude(f float64) *AirportCreate {
	ac.mutation.SetLatitude(f)
	return ac
}

// SetLongitude sets the "longitude" field.
func (ac *AirportCreate) SetLongitude(f float64) *AirportCreate {
	ac.mutation.SetLongitude(f)
	return ac
}

// SetTimezone sets the "timezone" field.
func (ac *AirportCreate) SetTimezone(s string) *AirportCreate {
	ac.mutation.SetTimezone(s)
	return ac
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (ac *AirportCreate) SetNillableTimezone(s *string) *AirportCreate {
	if s != nil {
		ac.SetTimezone(*s)
	}
	return ac
}

// SetElevation sets the "elevation" field.
func (ac *AirportCreate) SetElevation(i int) *AirportCreate {
	ac.mutation.SetElevation(i)
	return ac
}

// SetNillableElevation sets the "elevation" field if the given value is not nil.
func (ac *AirportCreate) SetNillableElevation(i *int) *AirportCreate {
	if i != nil {
		ac.SetElevation(*i)
	}
	return ac
}

// SetMunicipality sets the "municipality" field.
func (ac *AirportCreate) SetMunicipality(s string) *AirportCreate {
	ac.mutation.SetMunicipality(s)
	return ac
}

// SetNillableMunicipality sets the "municipality" field if the given value is not nil.
func (ac *AirportCreate) SetNillableMunicipality(s *string) *AirportCreate {
	if s != nil {
		ac.SetMunicipality(*s)
	}
	return ac
}

// SetScheduledService sets the "scheduled_service" field.
func (ac *AirportCreate) SetScheduledService(b bool) *AirportCreate {
	ac.mutation.SetScheduledService(b)
	return ac
}

// SetGpsCode sets the "gps_code" field.
func (ac *AirportCreate) SetGpsCode(s string) *AirportCreate {
	ac.mutation.SetGpsCode(s)
	return ac
}

// SetNillableGpsCode sets the "gps_code" field if the given value is not nil.
func (ac *AirportCreate) SetNillableGpsCode(s *string) *AirportCreate {
	if s != nil {
		ac.SetGpsCode(*s)
	}
	return ac
}

// SetLocalCode sets the "local_code" field.
func (ac *AirportCreate) SetLocalCode(s string) *AirportCreate {
	ac.mutation.SetLocalCode(s)
	return ac
}

// SetNillableLocalCode sets the "local_code" field if the given value is not nil.
func (ac *AirportCreate) SetNillableLocalCode(s *string) *AirportCreate {
	if s != nil {
		ac.SetLocalCode(*s)
	}
	return ac
}

// SetWebsite sets the "website" field.
func (ac *AirportCreate) SetWebsite(s string) *AirportCreate {
	ac.mutation.SetWebsite(s)
	return ac
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (ac *AirportCreate) SetNillableWebsite(s *string) *AirportCreate {
	if s != nil {
		ac.SetWebsite(*s)
	}
	return ac
}

// SetWikipedia sets the "wikipedia" field.
func (ac *AirportCreate) SetWikipedia(s string) *AirportCreate {
	ac.mutation.SetWikipedia(s)
	return ac
}

// SetNillableWikipedia sets the "wikipedia" field if the given value is not nil.
func (ac *AirportCreate) SetNillableWikipedia(s *string) *AirportCreate {
	if s != nil {
		ac.SetWikipedia(*s)
	}
	return ac
}

// SetKeywords sets the "keywords" field.
func (ac *AirportCreate) SetKeywords(s []string) *AirportCreate {
	ac.mutation.SetKeywords(s)
	return ac
}

// SetID sets the "id" field.
func (ac *AirportCreate) SetID(u uuid.UUID) *AirportCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AirportCreate) SetNillableID(u *uuid.UUID) *AirportCreate {
	if u != nil {
		ac.SetID(*u)
	}
	return ac
}

// SetRegionID sets the "region" edge to the Region entity by ID.
func (ac *AirportCreate) SetRegionID(id uuid.UUID) *AirportCreate {
	ac.mutation.SetRegionID(id)
	return ac
}

// SetNillableRegionID sets the "region" edge to the Region entity by ID if the given value is not nil.
func (ac *AirportCreate) SetNillableRegionID(id *uuid.UUID) *AirportCreate {
	if id != nil {
		ac = ac.SetRegionID(*id)
	}
	return ac
}

// SetRegion sets the "region" edge to the Region entity.
func (ac *AirportCreate) SetRegion(r *Region) *AirportCreate {
	return ac.SetRegionID(r.ID)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (ac *AirportCreate) SetCountryID(id uuid.UUID) *AirportCreate {
	ac.mutation.SetCountryID(id)
	return ac
}

// SetNillableCountryID sets the "country" edge to the Country entity by ID if the given value is not nil.
func (ac *AirportCreate) SetNillableCountryID(id *uuid.UUID) *AirportCreate {
	if id != nil {
		ac = ac.SetCountryID(*id)
	}
	return ac
}

// SetCountry sets the "country" edge to the Country entity.
func (ac *AirportCreate) SetCountry(c *Country) *AirportCreate {
	return ac.SetCountryID(c.ID)
}

// AddRunwayIDs adds the "runways" edge to the Runway entity by IDs.
func (ac *AirportCreate) AddRunwayIDs(ids ...uuid.UUID) *AirportCreate {
	ac.mutation.AddRunwayIDs(ids...)
	return ac
}

// AddRunways adds the "runways" edges to the Runway entity.
func (ac *AirportCreate) AddRunways(r ...*Runway) *AirportCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddRunwayIDs(ids...)
}

// AddFrequencyIDs adds the "frequencies" edge to the Frequency entity by IDs.
func (ac *AirportCreate) AddFrequencyIDs(ids ...uuid.UUID) *AirportCreate {
	ac.mutation.AddFrequencyIDs(ids...)
	return ac
}

// AddFrequencies adds the "frequencies" edges to the Frequency entity.
func (ac *AirportCreate) AddFrequencies(f ...*Frequency) *AirportCreate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ac.AddFrequencyIDs(ids...)
}

// SetStationID sets the "station" edge to the WeatherStation entity by ID.
func (ac *AirportCreate) SetStationID(id uuid.UUID) *AirportCreate {
	ac.mutation.SetStationID(id)
	return ac
}

// SetNillableStationID sets the "station" edge to the WeatherStation entity by ID if the given value is not nil.
func (ac *AirportCreate) SetNillableStationID(id *uuid.UUID) *AirportCreate {
	if id != nil {
		ac = ac.SetStationID(*id)
	}
	return ac
}

// SetStation sets the "station" edge to the WeatherStation entity.
func (ac *AirportCreate) SetStation(w *WeatherStation) *AirportCreate {
	return ac.SetStationID(w.ID)
}

// Mutation returns the AirportMutation object of the builder.
func (ac *AirportCreate) Mutation() *AirportMutation {
	return ac.mutation
}

// Save creates the Airport in the database.
func (ac *AirportCreate) Save(ctx context.Context) (*Airport, error) {
	var (
		err  error
		node *Airport
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AirportMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Airport)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AirportMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AirportCreate) SaveX(ctx context.Context) *Airport {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AirportCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AirportCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AirportCreate) defaults() {
	if _, ok := ac.mutation.ImportFlag(); !ok {
		v := airport.DefaultImportFlag
		ac.mutation.SetImportFlag(v)
	}
	if _, ok := ac.mutation.LastUpdated(); !ok {
		v := airport.DefaultLastUpdated()
		ac.mutation.SetLastUpdated(v)
	}
	if _, ok := ac.mutation.Importance(); !ok {
		v := airport.DefaultImportance
		ac.mutation.SetImportance(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := airport.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AirportCreate) check() error {
	if _, ok := ac.mutation.ImportID(); !ok {
		return &ValidationError{Name: "import_id", err: errors.New(`ent: missing required field "Airport.import_id"`)}
	}
	if _, ok := ac.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "Airport.hash"`)}
	}
	if _, ok := ac.mutation.ImportFlag(); !ok {
		return &ValidationError{Name: "import_flag", err: errors.New(`ent: missing required field "Airport.import_flag"`)}
	}
	if _, ok := ac.mutation.LastUpdated(); !ok {
		return &ValidationError{Name: "last_updated", err: errors.New(`ent: missing required field "Airport.last_updated"`)}
	}
	if v, ok := ac.mutation.IcaoCode(); ok {
		if err := airport.IcaoCodeValidator(v); err != nil {
			return &ValidationError{Name: "icao_code", err: fmt.Errorf(`ent: validator failed for field "Airport.icao_code": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Identifier(); !ok {
		return &ValidationError{Name: "identifier", err: errors.New(`ent: missing required field "Airport.identifier"`)}
	}
	if _, ok := ac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Airport.type"`)}
	}
	if v, ok := ac.mutation.GetType(); ok {
		if err := airport.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Airport.type": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Importance(); !ok {
		return &ValidationError{Name: "importance", err: errors.New(`ent: missing required field "Airport.importance"`)}
	}
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Airport.name"`)}
	}
	if _, ok := ac.mutation.Latitude(); !ok {
		return &ValidationError{Name: "latitude", err: errors.New(`ent: missing required field "Airport.latitude"`)}
	}
	if _, ok := ac.mutation.Longitude(); !ok {
		return &ValidationError{Name: "longitude", err: errors.New(`ent: missing required field "Airport.longitude"`)}
	}
	if _, ok := ac.mutation.ScheduledService(); !ok {
		return &ValidationError{Name: "scheduled_service", err: errors.New(`ent: missing required field "Airport.scheduled_service"`)}
	}
	if _, ok := ac.mutation.Keywords(); !ok {
		return &ValidationError{Name: "keywords", err: errors.New(`ent: missing required field "Airport.keywords"`)}
	}
	return nil
}

func (ac *AirportCreate) sqlSave(ctx context.Context) (*Airport, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ac *AirportCreate) createSpec() (*Airport, *sqlgraph.CreateSpec) {
	var (
		_node = &Airport{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: airport.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: airport.FieldID,
			},
		}
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.ImportID(); ok {
		_spec.SetField(airport.FieldImportID, field.TypeInt, value)
		_node.ImportID = value
	}
	if value, ok := ac.mutation.Hash(); ok {
		_spec.SetField(airport.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := ac.mutation.ImportFlag(); ok {
		_spec.SetField(airport.FieldImportFlag, field.TypeBool, value)
		_node.ImportFlag = value
	}
	if value, ok := ac.mutation.LastUpdated(); ok {
		_spec.SetField(airport.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if value, ok := ac.mutation.IcaoCode(); ok {
		_spec.SetField(airport.FieldIcaoCode, field.TypeString, value)
		_node.IcaoCode = value
	}
	if value, ok := ac.mutation.IataCode(); ok {
		_spec.SetField(airport.FieldIataCode, field.TypeString, value)
		_node.IataCode = &value
	}
	if value, ok := ac.mutation.Identifier(); ok {
		_spec.SetField(airport.FieldIdentifier, field.TypeString, value)
		_node.Identifier = value
	}
	if value, ok := ac.mutation.GetType(); ok {
		_spec.SetField(airport.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := ac.mutation.Importance(); ok {
		_spec.SetField(airport.FieldImportance, field.TypeInt, value)
		_node.Importance = value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(airport.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Latitude(); ok {
		_spec.SetField(airport.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = value
	}
	if value, ok := ac.mutation.Longitude(); ok {
		_spec.SetField(airport.FieldLongitude, field.TypeFloat64, value)
		_node.Longitude = value
	}
	if value, ok := ac.mutation.Timezone(); ok {
		_spec.SetField(airport.FieldTimezone, field.TypeString, value)
		_node.Timezone = &value
	}
	if value, ok := ac.mutation.Elevation(); ok {
		_spec.SetField(airport.FieldElevation, field.TypeInt, value)
		_node.Elevation = &value
	}
	if value, ok := ac.mutation.Municipality(); ok {
		_spec.SetField(airport.FieldMunicipality, field.TypeString, value)
		_node.Municipality = &value
	}
	if value, ok := ac.mutation.ScheduledService(); ok {
		_spec.SetField(airport.FieldScheduledService, field.TypeBool, value)
		_node.ScheduledService = value
	}
	if value, ok := ac.mutation.GpsCode(); ok {
		_spec.SetField(airport.FieldGpsCode, field.TypeString, value)
		_node.GpsCode = &value
	}
	if value, ok := ac.mutation.LocalCode(); ok {
		_spec.SetField(airport.FieldLocalCode, field.TypeString, value)
		_node.LocalCode = &value
	}
	if value, ok := ac.mutation.Website(); ok {
		_spec.SetField(airport.FieldWebsite, field.TypeString, value)
		_node.Website = &value
	}
	if value, ok := ac.mutation.Wikipedia(); ok {
		_spec.SetField(airport.FieldWikipedia, field.TypeString, value)
		_node.Wikipedia = &value
	}
	if value, ok := ac.mutation.Keywords(); ok {
		_spec.SetField(airport.FieldKeywords, field.TypeJSON, value)
		_node.Keywords = value
	}
	if nodes := ac.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.RegionTable,
			Columns: []string{airport.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: region.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.region_airports = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.CountryTable,
			Columns: []string{airport.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: country.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.country_airports = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RunwaysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.RunwaysTable,
			Columns: []string{airport.RunwaysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: runway.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.FrequenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.FrequenciesTable,
			Columns: []string{airport.FrequenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: frequency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   airport.StationTable,
			Columns: []string{airport.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: weatherstation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Airport.Create().
//		SetImportID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AirportUpsert) {
//			SetImportID(v+v).
//		}).
//		Exec(ctx)
func (ac *AirportCreate) OnConflict(opts ...sql.ConflictOption) *AirportUpsertOne {
	ac.conflict = opts
	return &AirportUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Airport.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AirportCreate) OnConflictColumns(columns ...string) *AirportUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AirportUpsertOne{
		create: ac,
	}
}

type (
	// AirportUpsertOne is the builder for "upsert"-ing
	//  one Airport node.
	AirportUpsertOne struct {
		create *AirportCreate
	}

	// AirportUpsert is the "OnConflict" setter.
	AirportUpsert struct {
		*sql.UpdateSet
	}
)

// SetImportID sets the "import_id" field.
func (u *AirportUpsert) SetImportID(v int) *AirportUpsert {
	u.Set(airport.FieldImportID, v)
	return u
}

// UpdateImportID sets the "import_id" field to the value that was provided on create.
func (u *AirportUpsert) UpdateImportID() *AirportUpsert {
	u.SetExcluded(airport.FieldImportID)
	return u
}

// AddImportID adds v to the "import_id" field.
func (u *AirportUpsert) AddImportID(v int) *AirportUpsert {
	u.Add(airport.FieldImportID, v)
	return u
}

// SetHash sets the "hash" field.
func (u *AirportUpsert) SetHash(v string) *AirportUpsert {
	u.Set(airport.FieldHash, v)
	return u
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *AirportUpsert) UpdateHash() *AirportUpsert {
	u.SetExcluded(airport.FieldHash)
	return u
}

// SetImportFlag sets the "import_flag" field.
func (u *AirportUpsert) SetImportFlag(v bool) *AirportUpsert {
	u.Set(airport.FieldImportFlag, v)
	return u
}

// UpdateImportFlag sets the "import_flag" field to the value that was provided on create.
func (u *AirportUpsert) UpdateImportFlag() *AirportUpsert {
	u.SetExcluded(airport.FieldImportFlag)
	return u
}

// SetLastUpdated sets the "last_updated" field.
func (u *AirportUpsert) SetLastUpdated(v time.Time) *AirportUpsert {
	u.Set(airport.FieldLastUpdated, v)
	return u
}

// UpdateLastUpdated sets the "last_updated" field to the value that was provided on create.
func (u *AirportUpsert) UpdateLastUpdated() *AirportUpsert {
	u.SetExcluded(airport.FieldLastUpdated)
	return u
}

// SetIcaoCode sets the "icao_code" field.
func (u *AirportUpsert) SetIcaoCode(v string) *AirportUpsert {
	u.Set(airport.FieldIcaoCode, v)
	return u
}

// UpdateIcaoCode sets the "icao_code" field to the value that was provided on create.
func (u *AirportUpsert) UpdateIcaoCode() *AirportUpsert {
	u.SetExcluded(airport.FieldIcaoCode)
	return u
}

// ClearIcaoCode clears the value of the "icao_code" field.
func (u *AirportUpsert) ClearIcaoCode() *AirportUpsert {
	u.SetNull(airport.FieldIcaoCode)
	return u
}

// SetIataCode sets the "iata_code" field.
func (u *AirportUpsert) SetIataCode(v string) *AirportUpsert {
	u.Set(airport.FieldIataCode, v)
	return u
}

// UpdateIataCode sets the "iata_code" field to the value that was provided on create.
func (u *AirportUpsert) UpdateIataCode() *AirportUpsert {
	u.SetExcluded(airport.FieldIataCode)
	return u
}

// ClearIataCode clears the value of the "iata_code" field.
func (u *AirportUpsert) ClearIataCode() *AirportUpsert {
	u.SetNull(airport.FieldIataCode)
	return u
}

// SetIdentifier sets the "identifier" field.
func (u *AirportUpsert) SetIdentifier(v string) *AirportUpsert {
	u.Set(airport.FieldIdentifier, v)
	return u
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *AirportUpsert) UpdateIdentifier() *AirportUpsert {
	u.SetExcluded(airport.FieldIdentifier)
	return u
}

// SetType sets the "type" field.
func (u *AirportUpsert) SetType(v airport.Type) *AirportUpsert {
	u.Set(airport.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AirportUpsert) UpdateType() *AirportUpsert {
	u.SetExcluded(airport.FieldType)
	return u
}

// SetImportance sets the "importance" field.
func (u *AirportUpsert) SetImportance(v int) *AirportUpsert {
	u.Set(airport.FieldImportance, v)
	return u
}

// UpdateImportance sets the "importance" field to the value that was provided on create.
func (u *AirportUpsert) UpdateImportance() *AirportUpsert {
	u.SetExcluded(airport.FieldImportance)
	return u
}

// AddImportance adds v to the "importance" field.
func (u *AirportUpsert) AddImportance(v int) *AirportUpsert {
	u.Add(airport.FieldImportance, v)
	return u
}

// SetName sets the "name" field.
func (u *AirportUpsert) SetName(v string) *AirportUpsert {
	u.Set(airport.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AirportUpsert) UpdateName() *AirportUpsert {
	u.SetExcluded(airport.FieldName)
	return u
}

// SetLatitude sets the "latitude" field.
func (u *AirportUpsert) SetLatitude(v float64) *AirportUpsert {
	u.Set(airport.FieldLatitude, v)
	return u
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *AirportUpsert) UpdateLatitude() *AirportUpsert {
	u.SetExcluded(airport.FieldLatitude)
	return u
}

// AddLatitude adds v to the "latitude" field.
func (u *AirportUpsert) AddLatitude(v float64) *AirportUpsert {
	u.Add(airport.FieldLatitude, v)
	return u
}

// SetLongitude sets the "longitude" field.
func (u *AirportUpsert) SetLongitude(v float64) *AirportUpsert {
	u.Set(airport.FieldLongitude, v)
	return u
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *AirportUpsert) UpdateLongitude() *AirportUpsert {
	u.SetExcluded(airport.FieldLongitude)
	return u
}

// AddLongitude adds v to the "longitude" field.
func (u *AirportUpsert) AddLongitude(v float64) *AirportUpsert {
	u.Add(airport.FieldLongitude, v)
	return u
}

// SetTimezone sets the "timezone" field.
func (u *AirportUpsert) SetTimezone(v string) *AirportUpsert {
	u.Set(airport.FieldTimezone, v)
	return u
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *AirportUpsert) UpdateTimezone() *AirportUpsert {
	u.SetExcluded(airport.FieldTimezone)
	return u
}

// ClearTimezone clears the value of the "timezone" field.
func (u *AirportUpsert) ClearTimezone() *AirportUpsert {
	u.SetNull(airport.FieldTimezone)
	return u
}

// SetElevation sets the "elevation" field.
func (u *AirportUpsert) SetElevation(v int) *AirportUpsert {
	u.Set(airport.FieldElevation, v)
	return u
}

// UpdateElevation sets the "elevation" field to the value that was provided on create.
func (u *AirportUpsert) UpdateElevation() *AirportUpsert {
	u.SetExcluded(airport.FieldElevation)
	return u
}

// AddElevation adds v to the "elevation" field.
func (u *AirportUpsert) AddElevation(v int) *AirportUpsert {
	u.Add(airport.FieldElevation, v)
	return u
}

// ClearElevation clears the value of the "elevation" field.
func (u *AirportUpsert) ClearElevation() *AirportUpsert {
	u.SetNull(airport.FieldElevation)
	return u
}

// SetMunicipality sets the "municipality" field.
func (u *AirportUpsert) SetMunicipality(v string) *AirportUpsert {
	u.Set(airport.FieldMunicipality, v)
	return u
}

// UpdateMunicipality sets the "municipality" field to the value that was provided on create.
func (u *AirportUpsert) UpdateMunicipality() *AirportUpsert {
	u.SetExcluded(airport.FieldMunicipality)
	return u
}

// ClearMunicipality clears the value of the "municipality" field.
func (u *AirportUpsert) ClearMunicipality() *AirportUpsert {
	u.SetNull(airport.FieldMunicipality)
	return u
}

// SetScheduledService sets the "scheduled_service" field.
func (u *AirportUpsert) SetScheduledService(v bool) *AirportUpsert {
	u.Set(airport.FieldScheduledService, v)
	return u
}

// UpdateScheduledService sets the "scheduled_service" field to the value that was provided on create.
func (u *AirportUpsert) UpdateScheduledService() *AirportUpsert {
	u.SetExcluded(airport.FieldScheduledService)
	return u
}

// SetGpsCode sets the "gps_code" field.
func (u *AirportUpsert) SetGpsCode(v string) *AirportUpsert {
	u.Set(airport.FieldGpsCode, v)
	return u
}

// UpdateGpsCode sets the "gps_code" field to the value that was provided on create.
func (u *AirportUpsert) UpdateGpsCode() *AirportUpsert {
	u.SetExcluded(airport.FieldGpsCode)
	return u
}

// ClearGpsCode clears the value of the "gps_code" field.
func (u *AirportUpsert) ClearGpsCode() *AirportUpsert {
	u.SetNull(airport.FieldGpsCode)
	return u
}

// SetLocalCode sets the "local_code" field.
func (u *AirportUpsert) SetLocalCode(v string) *AirportUpsert {
	u.Set(airport.FieldLocalCode, v)
	return u
}

// UpdateLocalCode sets the "local_code" field to the value that was provided on create.
func (u *AirportUpsert) UpdateLocalCode() *AirportUpsert {
	u.SetExcluded(airport.FieldLocalCode)
	return u
}

// ClearLocalCode clears the value of the "local_code" field.
func (u *AirportUpsert) ClearLocalCode() *AirportUpsert {
	u.SetNull(airport.FieldLocalCode)
	return u
}

// SetWebsite sets the "website" field.
func (u *AirportUpsert) SetWebsite(v string) *AirportUpsert {
	u.Set(airport.FieldWebsite, v)
	return u
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *AirportUpsert) UpdateWebsite() *AirportUpsert {
	u.SetExcluded(airport.FieldWebsite)
	return u
}

// ClearWebsite clears the value of the "website" field.
func (u *AirportUpsert) ClearWebsite() *AirportUpsert {
	u.SetNull(airport.FieldWebsite)
	return u
}

// SetWikipedia sets the "wikipedia" field.
func (u *AirportUpsert) SetWikipedia(v string) *AirportUpsert {
	u.Set(airport.FieldWikipedia, v)
	return u
}

// UpdateWikipedia sets the "wikipedia" field to the value that was provided on create.
func (u *AirportUpsert) UpdateWikipedia() *AirportUpsert {
	u.SetExcluded(airport.FieldWikipedia)
	return u
}

// ClearWikipedia clears the value of the "wikipedia" field.
func (u *AirportUpsert) ClearWikipedia() *AirportUpsert {
	u.SetNull(airport.FieldWikipedia)
	return u
}

// SetKeywords sets the "keywords" field.
func (u *AirportUpsert) SetKeywords(v []string) *AirportUpsert {
	u.Set(airport.FieldKeywords, v)
	return u
}

// UpdateKeywords sets the "keywords" field to the value that was provided on create.
func (u *AirportUpsert) UpdateKeywords() *AirportUpsert {
	u.SetExcluded(airport.FieldKeywords)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Airport.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(airport.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AirportUpsertOne) UpdateNewValues() *AirportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(airport.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Airport.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AirportUpsertOne) Ignore() *AirportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AirportUpsertOne) DoNothing() *AirportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AirportCreate.OnConflict
// documentation for more info.
func (u *AirportUpsertOne) Update(set func(*AirportUpsert)) *AirportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AirportUpsert{UpdateSet: update})
	}))
	return u
}

// SetImportID sets the "import_id" field.
func (u *AirportUpsertOne) SetImportID(v int) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetImportID(v)
	})
}

// AddImportID adds v to the "import_id" field.
func (u *AirportUpsertOne) AddImportID(v int) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.AddImportID(v)
	})
}

// UpdateImportID sets the "import_id" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateImportID() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateImportID()
	})
}

// SetHash sets the "hash" field.
func (u *AirportUpsertOne) SetHash(v string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateHash() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateHash()
	})
}

// SetImportFlag sets the "import_flag" field.
func (u *AirportUpsertOne) SetImportFlag(v bool) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetImportFlag(v)
	})
}

// UpdateImportFlag sets the "import_flag" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateImportFlag() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateImportFlag()
	})
}

// SetLastUpdated sets the "last_updated" field.
func (u *AirportUpsertOne) SetLastUpdated(v time.Time) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetLastUpdated(v)
	})
}

// UpdateLastUpdated sets the "last_updated" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateLastUpdated() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateLastUpdated()
	})
}

// SetIcaoCode sets the "icao_code" field.
func (u *AirportUpsertOne) SetIcaoCode(v string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetIcaoCode(v)
	})
}

// UpdateIcaoCode sets the "icao_code" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateIcaoCode() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateIcaoCode()
	})
}

// ClearIcaoCode clears the value of the "icao_code" field.
func (u *AirportUpsertOne) ClearIcaoCode() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.ClearIcaoCode()
	})
}

// SetIataCode sets the "iata_code" field.
func (u *AirportUpsertOne) SetIataCode(v string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetIataCode(v)
	})
}

// UpdateIataCode sets the "iata_code" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateIataCode() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateIataCode()
	})
}

// ClearIataCode clears the value of the "iata_code" field.
func (u *AirportUpsertOne) ClearIataCode() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.ClearIataCode()
	})
}

// SetIdentifier sets the "identifier" field.
func (u *AirportUpsertOne) SetIdentifier(v string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetIdentifier(v)
	})
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateIdentifier() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateIdentifier()
	})
}

// SetType sets the "type" field.
func (u *AirportUpsertOne) SetType(v airport.Type) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateType() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateType()
	})
}

// SetImportance sets the "importance" field.
func (u *AirportUpsertOne) SetImportance(v int) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetImportance(v)
	})
}

// AddImportance adds v to the "importance" field.
func (u *AirportUpsertOne) AddImportance(v int) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.AddImportance(v)
	})
}

// UpdateImportance sets the "importance" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateImportance() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateImportance()
	})
}

// SetName sets the "name" field.
func (u *AirportUpsertOne) SetName(v string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateName() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateName()
	})
}

// SetLatitude sets the "latitude" field.
func (u *AirportUpsertOne) SetLatitude(v float64) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *AirportUpsertOne) AddLatitude(v float64) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateLatitude() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *AirportUpsertOne) SetLongitude(v float64) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *AirportUpsertOne) AddLongitude(v float64) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateLongitude() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateLongitude()
	})
}

// SetTimezone sets the "timezone" field.
func (u *AirportUpsertOne) SetTimezone(v string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetTimezone(v)
	})
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateTimezone() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateTimezone()
	})
}

// ClearTimezone clears the value of the "timezone" field.
func (u *AirportUpsertOne) ClearTimezone() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.ClearTimezone()
	})
}

// SetElevation sets the "elevation" field.
func (u *AirportUpsertOne) SetElevation(v int) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetElevation(v)
	})
}

// AddElevation adds v to the "elevation" field.
func (u *AirportUpsertOne) AddElevation(v int) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.AddElevation(v)
	})
}

// UpdateElevation sets the "elevation" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateElevation() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateElevation()
	})
}

// ClearElevation clears the value of the "elevation" field.
func (u *AirportUpsertOne) ClearElevation() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.ClearElevation()
	})
}

// SetMunicipality sets the "municipality" field.
func (u *AirportUpsertOne) SetMunicipality(v string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetMunicipality(v)
	})
}

// UpdateMunicipality sets the "municipality" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateMunicipality() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateMunicipality()
	})
}

// ClearMunicipality clears the value of the "municipality" field.
func (u *AirportUpsertOne) ClearMunicipality() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.ClearMunicipality()
	})
}

// SetScheduledService sets the "scheduled_service" field.
func (u *AirportUpsertOne) SetScheduledService(v bool) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetScheduledService(v)
	})
}

// UpdateScheduledService sets the "scheduled_service" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateScheduledService() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateScheduledService()
	})
}

// SetGpsCode sets the "gps_code" field.
func (u *AirportUpsertOne) SetGpsCode(v string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetGpsCode(v)
	})
}

// UpdateGpsCode sets the "gps_code" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateGpsCode() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateGpsCode()
	})
}

// ClearGpsCode clears the value of the "gps_code" field.
func (u *AirportUpsertOne) ClearGpsCode() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.ClearGpsCode()
	})
}

// SetLocalCode sets the "local_code" field.
func (u *AirportUpsertOne) SetLocalCode(v string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetLocalCode(v)
	})
}

// UpdateLocalCode sets the "local_code" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateLocalCode() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateLocalCode()
	})
}

// ClearLocalCode clears the value of the "local_code" field.
func (u *AirportUpsertOne) ClearLocalCode() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.ClearLocalCode()
	})
}

// SetWebsite sets the "website" field.
func (u *AirportUpsertOne) SetWebsite(v string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetWebsite(v)
	})
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateWebsite() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateWebsite()
	})
}

// ClearWebsite clears the value of the "website" field.
func (u *AirportUpsertOne) ClearWebsite() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.ClearWebsite()
	})
}

// SetWikipedia sets the "wikipedia" field.
func (u *AirportUpsertOne) SetWikipedia(v string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetWikipedia(v)
	})
}

// UpdateWikipedia sets the "wikipedia" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateWikipedia() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateWikipedia()
	})
}

// ClearWikipedia clears the value of the "wikipedia" field.
func (u *AirportUpsertOne) ClearWikipedia() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.ClearWikipedia()
	})
}

// SetKeywords sets the "keywords" field.
func (u *AirportUpsertOne) SetKeywords(v []string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetKeywords(v)
	})
}

// UpdateKeywords sets the "keywords" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateKeywords() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateKeywords()
	})
}

// Exec executes the query.
func (u *AirportUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AirportCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AirportUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AirportUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AirportUpsertOne.ID is not supported by MySQL driver. Use AirportUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AirportUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AirportCreateBulk is the builder for creating many Airport entities in bulk.
type AirportCreateBulk struct {
	config
	builders []*AirportCreate
	conflict []sql.ConflictOption
}

// Save creates the Airport entities in the database.
func (acb *AirportCreateBulk) Save(ctx context.Context) ([]*Airport, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Airport, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AirportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AirportCreateBulk) SaveX(ctx context.Context) []*Airport {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AirportCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AirportCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Airport.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AirportUpsert) {
//			SetImportID(v+v).
//		}).
//		Exec(ctx)
func (acb *AirportCreateBulk) OnConflict(opts ...sql.ConflictOption) *AirportUpsertBulk {
	acb.conflict = opts
	return &AirportUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Airport.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AirportCreateBulk) OnConflictColumns(columns ...string) *AirportUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AirportUpsertBulk{
		create: acb,
	}
}

// AirportUpsertBulk is the builder for "upsert"-ing
// a bulk of Airport nodes.
type AirportUpsertBulk struct {
	create *AirportCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Airport.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(airport.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AirportUpsertBulk) UpdateNewValues() *AirportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(airport.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Airport.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AirportUpsertBulk) Ignore() *AirportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AirportUpsertBulk) DoNothing() *AirportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AirportCreateBulk.OnConflict
// documentation for more info.
func (u *AirportUpsertBulk) Update(set func(*AirportUpsert)) *AirportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AirportUpsert{UpdateSet: update})
	}))
	return u
}

// SetImportID sets the "import_id" field.
func (u *AirportUpsertBulk) SetImportID(v int) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetImportID(v)
	})
}

// AddImportID adds v to the "import_id" field.
func (u *AirportUpsertBulk) AddImportID(v int) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.AddImportID(v)
	})
}

// UpdateImportID sets the "import_id" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateImportID() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateImportID()
	})
}

// SetHash sets the "hash" field.
func (u *AirportUpsertBulk) SetHash(v string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateHash() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateHash()
	})
}

// SetImportFlag sets the "import_flag" field.
func (u *AirportUpsertBulk) SetImportFlag(v bool) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetImportFlag(v)
	})
}

// UpdateImportFlag sets the "import_flag" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateImportFlag() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateImportFlag()
	})
}

// SetLastUpdated sets the "last_updated" field.
func (u *AirportUpsertBulk) SetLastUpdated(v time.Time) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetLastUpdated(v)
	})
}

// UpdateLastUpdated sets the "last_updated" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateLastUpdated() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateLastUpdated()
	})
}

// SetIcaoCode sets the "icao_code" field.
func (u *AirportUpsertBulk) SetIcaoCode(v string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetIcaoCode(v)
	})
}

// UpdateIcaoCode sets the "icao_code" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateIcaoCode() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateIcaoCode()
	})
}

// ClearIcaoCode clears the value of the "icao_code" field.
func (u *AirportUpsertBulk) ClearIcaoCode() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.ClearIcaoCode()
	})
}

// SetIataCode sets the "iata_code" field.
func (u *AirportUpsertBulk) SetIataCode(v string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetIataCode(v)
	})
}

// UpdateIataCode sets the "iata_code" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateIataCode() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateIataCode()
	})
}

// ClearIataCode clears the value of the "iata_code" field.
func (u *AirportUpsertBulk) ClearIataCode() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.ClearIataCode()
	})
}

// SetIdentifier sets the "identifier" field.
func (u *AirportUpsertBulk) SetIdentifier(v string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetIdentifier(v)
	})
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateIdentifier() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateIdentifier()
	})
}

// SetType sets the "type" field.
func (u *AirportUpsertBulk) SetType(v airport.Type) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateType() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateType()
	})
}

// SetImportance sets the "importance" field.
func (u *AirportUpsertBulk) SetImportance(v int) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetImportance(v)
	})
}

// AddImportance adds v to the "importance" field.
func (u *AirportUpsertBulk) AddImportance(v int) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.AddImportance(v)
	})
}

// UpdateImportance sets the "importance" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateImportance() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateImportance()
	})
}

// SetName sets the "name" field.
func (u *AirportUpsertBulk) SetName(v string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateName() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateName()
	})
}

// SetLatitude sets the "latitude" field.
func (u *AirportUpsertBulk) SetLatitude(v float64) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *AirportUpsertBulk) AddLatitude(v float64) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateLatitude() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *AirportUpsertBulk) SetLongitude(v float64) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *AirportUpsertBulk) AddLongitude(v float64) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateLongitude() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateLongitude()
	})
}

// SetTimezone sets the "timezone" field.
func (u *AirportUpsertBulk) SetTimezone(v string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetTimezone(v)
	})
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateTimezone() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateTimezone()
	})
}

// ClearTimezone clears the value of the "timezone" field.
func (u *AirportUpsertBulk) ClearTimezone() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.ClearTimezone()
	})
}

// SetElevation sets the "elevation" field.
func (u *AirportUpsertBulk) SetElevation(v int) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetElevation(v)
	})
}

// AddElevation adds v to the "elevation" field.
func (u *AirportUpsertBulk) AddElevation(v int) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.AddElevation(v)
	})
}

// UpdateElevation sets the "elevation" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateElevation() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateElevation()
	})
}

// ClearElevation clears the value of the "elevation" field.
func (u *AirportUpsertBulk) ClearElevation() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.ClearElevation()
	})
}

// SetMunicipality sets the "municipality" field.
func (u *AirportUpsertBulk) SetMunicipality(v string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetMunicipality(v)
	})
}

// UpdateMunicipality sets the "municipality" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateMunicipality() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateMunicipality()
	})
}

// ClearMunicipality clears the value of the "municipality" field.
func (u *AirportUpsertBulk) ClearMunicipality() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.ClearMunicipality()
	})
}

// SetScheduledService sets the "scheduled_service" field.
func (u *AirportUpsertBulk) SetScheduledService(v bool) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetScheduledService(v)
	})
}

// UpdateScheduledService sets the "scheduled_service" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateScheduledService() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateScheduledService()
	})
}

// SetGpsCode sets the "gps_code" field.
func (u *AirportUpsertBulk) SetGpsCode(v string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetGpsCode(v)
	})
}

// UpdateGpsCode sets the "gps_code" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateGpsCode() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateGpsCode()
	})
}

// ClearGpsCode clears the value of the "gps_code" field.
func (u *AirportUpsertBulk) ClearGpsCode() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.ClearGpsCode()
	})
}

// SetLocalCode sets the "local_code" field.
func (u *AirportUpsertBulk) SetLocalCode(v string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetLocalCode(v)
	})
}

// UpdateLocalCode sets the "local_code" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateLocalCode() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateLocalCode()
	})
}

// ClearLocalCode clears the value of the "local_code" field.
func (u *AirportUpsertBulk) ClearLocalCode() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.ClearLocalCode()
	})
}

// SetWebsite sets the "website" field.
func (u *AirportUpsertBulk) SetWebsite(v string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetWebsite(v)
	})
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateWebsite() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateWebsite()
	})
}

// ClearWebsite clears the value of the "website" field.
func (u *AirportUpsertBulk) ClearWebsite() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.ClearWebsite()
	})
}

// SetWikipedia sets the "wikipedia" field.
func (u *AirportUpsertBulk) SetWikipedia(v string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetWikipedia(v)
	})
}

// UpdateWikipedia sets the "wikipedia" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateWikipedia() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateWikipedia()
	})
}

// ClearWikipedia clears the value of the "wikipedia" field.
func (u *AirportUpsertBulk) ClearWikipedia() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.ClearWikipedia()
	})
}

// SetKeywords sets the "keywords" field.
func (u *AirportUpsertBulk) SetKeywords(v []string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetKeywords(v)
	})
}

// UpdateKeywords sets the "keywords" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateKeywords() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateKeywords()
	})
}

// Exec executes the query.
func (u *AirportUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AirportCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AirportCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AirportUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
