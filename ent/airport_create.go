// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"metar.gg/ent/airport"
	"metar.gg/ent/runway"
)

// AirportCreate is the builder for creating a Airport entity.
type AirportCreate struct {
	config
	mutation *AirportMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetHash sets the "hash" field.
func (ac *AirportCreate) SetHash(u uint64) *AirportCreate {
	ac.mutation.SetHash(u)
	return ac
}

// SetImportFlag sets the "import_flag" field.
func (ac *AirportCreate) SetImportFlag(b bool) *AirportCreate {
	ac.mutation.SetImportFlag(b)
	return ac
}

// SetNillableImportFlag sets the "import_flag" field if the given value is not nil.
func (ac *AirportCreate) SetNillableImportFlag(b *bool) *AirportCreate {
	if b != nil {
		ac.SetImportFlag(*b)
	}
	return ac
}

// SetCreateTime sets the "create_time" field.
func (ac *AirportCreate) SetCreateTime(t time.Time) *AirportCreate {
	ac.mutation.SetCreateTime(t)
	return ac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ac *AirportCreate) SetNillableCreateTime(t *time.Time) *AirportCreate {
	if t != nil {
		ac.SetCreateTime(*t)
	}
	return ac
}

// SetUpdateTime sets the "update_time" field.
func (ac *AirportCreate) SetUpdateTime(t time.Time) *AirportCreate {
	ac.mutation.SetUpdateTime(t)
	return ac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ac *AirportCreate) SetNillableUpdateTime(t *time.Time) *AirportCreate {
	if t != nil {
		ac.SetUpdateTime(*t)
	}
	return ac
}

// SetIdentifier sets the "identifier" field.
func (ac *AirportCreate) SetIdentifier(s string) *AirportCreate {
	ac.mutation.SetIdentifier(s)
	return ac
}

// SetType sets the "type" field.
func (ac *AirportCreate) SetType(s string) *AirportCreate {
	ac.mutation.SetType(s)
	return ac
}

// SetName sets the "name" field.
func (ac *AirportCreate) SetName(s string) *AirportCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetLatitude sets the "latitude" field.
func (ac *AirportCreate) SetLatitude(f float64) *AirportCreate {
	ac.mutation.SetLatitude(f)
	return ac
}

// SetLongitude sets the "longitude" field.
func (ac *AirportCreate) SetLongitude(f float64) *AirportCreate {
	ac.mutation.SetLongitude(f)
	return ac
}

// SetElevation sets the "elevation" field.
func (ac *AirportCreate) SetElevation(i int) *AirportCreate {
	ac.mutation.SetElevation(i)
	return ac
}

// SetContinent sets the "continent" field.
func (ac *AirportCreate) SetContinent(s string) *AirportCreate {
	ac.mutation.SetContinent(s)
	return ac
}

// SetCountry sets the "country" field.
func (ac *AirportCreate) SetCountry(s string) *AirportCreate {
	ac.mutation.SetCountry(s)
	return ac
}

// SetRegion sets the "region" field.
func (ac *AirportCreate) SetRegion(s string) *AirportCreate {
	ac.mutation.SetRegion(s)
	return ac
}

// SetMunicipality sets the "municipality" field.
func (ac *AirportCreate) SetMunicipality(s string) *AirportCreate {
	ac.mutation.SetMunicipality(s)
	return ac
}

// SetScheduledService sets the "scheduled_service" field.
func (ac *AirportCreate) SetScheduledService(b bool) *AirportCreate {
	ac.mutation.SetScheduledService(b)
	return ac
}

// SetGpsCode sets the "gps_code" field.
func (ac *AirportCreate) SetGpsCode(s string) *AirportCreate {
	ac.mutation.SetGpsCode(s)
	return ac
}

// SetIataCode sets the "iata_code" field.
func (ac *AirportCreate) SetIataCode(s string) *AirportCreate {
	ac.mutation.SetIataCode(s)
	return ac
}

// SetLocalCode sets the "local_code" field.
func (ac *AirportCreate) SetLocalCode(s string) *AirportCreate {
	ac.mutation.SetLocalCode(s)
	return ac
}

// SetWebsite sets the "website" field.
func (ac *AirportCreate) SetWebsite(s string) *AirportCreate {
	ac.mutation.SetWebsite(s)
	return ac
}

// SetWikipedia sets the "wikipedia" field.
func (ac *AirportCreate) SetWikipedia(s string) *AirportCreate {
	ac.mutation.SetWikipedia(s)
	return ac
}

// SetKeywords sets the "keywords" field.
func (ac *AirportCreate) SetKeywords(s []string) *AirportCreate {
	ac.mutation.SetKeywords(s)
	return ac
}

// SetID sets the "id" field.
func (ac *AirportCreate) SetID(i int) *AirportCreate {
	ac.mutation.SetID(i)
	return ac
}

// AddRunwayIDs adds the "runways" edge to the Runway entity by IDs.
func (ac *AirportCreate) AddRunwayIDs(ids ...int) *AirportCreate {
	ac.mutation.AddRunwayIDs(ids...)
	return ac
}

// AddRunways adds the "runways" edges to the Runway entity.
func (ac *AirportCreate) AddRunways(r ...*Runway) *AirportCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddRunwayIDs(ids...)
}

// Mutation returns the AirportMutation object of the builder.
func (ac *AirportCreate) Mutation() *AirportMutation {
	return ac.mutation
}

// Save creates the Airport in the database.
func (ac *AirportCreate) Save(ctx context.Context) (*Airport, error) {
	var (
		err  error
		node *Airport
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AirportMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Airport)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AirportMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AirportCreate) SaveX(ctx context.Context) *Airport {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AirportCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AirportCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AirportCreate) defaults() {
	if _, ok := ac.mutation.ImportFlag(); !ok {
		v := airport.DefaultImportFlag
		ac.mutation.SetImportFlag(v)
	}
	if _, ok := ac.mutation.CreateTime(); !ok {
		v := airport.DefaultCreateTime()
		ac.mutation.SetCreateTime(v)
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		v := airport.DefaultUpdateTime()
		ac.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AirportCreate) check() error {
	if _, ok := ac.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "Airport.hash"`)}
	}
	if _, ok := ac.mutation.ImportFlag(); !ok {
		return &ValidationError{Name: "import_flag", err: errors.New(`ent: missing required field "Airport.import_flag"`)}
	}
	if _, ok := ac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Airport.create_time"`)}
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Airport.update_time"`)}
	}
	if _, ok := ac.mutation.Identifier(); !ok {
		return &ValidationError{Name: "identifier", err: errors.New(`ent: missing required field "Airport.identifier"`)}
	}
	if _, ok := ac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Airport.type"`)}
	}
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Airport.name"`)}
	}
	if _, ok := ac.mutation.Latitude(); !ok {
		return &ValidationError{Name: "latitude", err: errors.New(`ent: missing required field "Airport.latitude"`)}
	}
	if _, ok := ac.mutation.Longitude(); !ok {
		return &ValidationError{Name: "longitude", err: errors.New(`ent: missing required field "Airport.longitude"`)}
	}
	if _, ok := ac.mutation.Elevation(); !ok {
		return &ValidationError{Name: "elevation", err: errors.New(`ent: missing required field "Airport.elevation"`)}
	}
	if _, ok := ac.mutation.Continent(); !ok {
		return &ValidationError{Name: "continent", err: errors.New(`ent: missing required field "Airport.continent"`)}
	}
	if _, ok := ac.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "Airport.country"`)}
	}
	if _, ok := ac.mutation.Region(); !ok {
		return &ValidationError{Name: "region", err: errors.New(`ent: missing required field "Airport.region"`)}
	}
	if _, ok := ac.mutation.Municipality(); !ok {
		return &ValidationError{Name: "municipality", err: errors.New(`ent: missing required field "Airport.municipality"`)}
	}
	if _, ok := ac.mutation.ScheduledService(); !ok {
		return &ValidationError{Name: "scheduled_service", err: errors.New(`ent: missing required field "Airport.scheduled_service"`)}
	}
	if _, ok := ac.mutation.GpsCode(); !ok {
		return &ValidationError{Name: "gps_code", err: errors.New(`ent: missing required field "Airport.gps_code"`)}
	}
	if _, ok := ac.mutation.IataCode(); !ok {
		return &ValidationError{Name: "iata_code", err: errors.New(`ent: missing required field "Airport.iata_code"`)}
	}
	if _, ok := ac.mutation.LocalCode(); !ok {
		return &ValidationError{Name: "local_code", err: errors.New(`ent: missing required field "Airport.local_code"`)}
	}
	if _, ok := ac.mutation.Website(); !ok {
		return &ValidationError{Name: "website", err: errors.New(`ent: missing required field "Airport.website"`)}
	}
	if _, ok := ac.mutation.Wikipedia(); !ok {
		return &ValidationError{Name: "wikipedia", err: errors.New(`ent: missing required field "Airport.wikipedia"`)}
	}
	if _, ok := ac.mutation.Keywords(); !ok {
		return &ValidationError{Name: "keywords", err: errors.New(`ent: missing required field "Airport.keywords"`)}
	}
	return nil
}

func (ac *AirportCreate) sqlSave(ctx context.Context) (*Airport, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (ac *AirportCreate) createSpec() (*Airport, *sqlgraph.CreateSpec) {
	var (
		_node = &Airport{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: airport.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: airport.FieldID,
			},
		}
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.Hash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: airport.FieldHash,
		})
		_node.Hash = value
	}
	if value, ok := ac.mutation.ImportFlag(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: airport.FieldImportFlag,
		})
		_node.ImportFlag = value
	}
	if value, ok := ac.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: airport.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ac.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: airport.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := ac.mutation.Identifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldIdentifier,
		})
		_node.Identifier = value
	}
	if value, ok := ac.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldType,
		})
		_node.Type = value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ac.mutation.Latitude(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: airport.FieldLatitude,
		})
		_node.Latitude = value
	}
	if value, ok := ac.mutation.Longitude(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: airport.FieldLongitude,
		})
		_node.Longitude = value
	}
	if value, ok := ac.mutation.Elevation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: airport.FieldElevation,
		})
		_node.Elevation = value
	}
	if value, ok := ac.mutation.Continent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldContinent,
		})
		_node.Continent = value
	}
	if value, ok := ac.mutation.Country(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldCountry,
		})
		_node.Country = value
	}
	if value, ok := ac.mutation.Region(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldRegion,
		})
		_node.Region = value
	}
	if value, ok := ac.mutation.Municipality(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldMunicipality,
		})
		_node.Municipality = value
	}
	if value, ok := ac.mutation.ScheduledService(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: airport.FieldScheduledService,
		})
		_node.ScheduledService = value
	}
	if value, ok := ac.mutation.GpsCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldGpsCode,
		})
		_node.GpsCode = value
	}
	if value, ok := ac.mutation.IataCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldIataCode,
		})
		_node.IataCode = value
	}
	if value, ok := ac.mutation.LocalCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldLocalCode,
		})
		_node.LocalCode = value
	}
	if value, ok := ac.mutation.Website(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldWebsite,
		})
		_node.Website = value
	}
	if value, ok := ac.mutation.Wikipedia(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldWikipedia,
		})
		_node.Wikipedia = value
	}
	if value, ok := ac.mutation.Keywords(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: airport.FieldKeywords,
		})
		_node.Keywords = value
	}
	if nodes := ac.mutation.RunwaysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.RunwaysTable,
			Columns: []string{airport.RunwaysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: runway.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Airport.Create().
//		SetHash(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AirportUpsert) {
//			SetHash(v+v).
//		}).
//		Exec(ctx)
//
func (ac *AirportCreate) OnConflict(opts ...sql.ConflictOption) *AirportUpsertOne {
	ac.conflict = opts
	return &AirportUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Airport.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ac *AirportCreate) OnConflictColumns(columns ...string) *AirportUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AirportUpsertOne{
		create: ac,
	}
}

type (
	// AirportUpsertOne is the builder for "upsert"-ing
	//  one Airport node.
	AirportUpsertOne struct {
		create *AirportCreate
	}

	// AirportUpsert is the "OnConflict" setter.
	AirportUpsert struct {
		*sql.UpdateSet
	}
)

// SetHash sets the "hash" field.
func (u *AirportUpsert) SetHash(v uint64) *AirportUpsert {
	u.Set(airport.FieldHash, v)
	return u
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *AirportUpsert) UpdateHash() *AirportUpsert {
	u.SetExcluded(airport.FieldHash)
	return u
}

// AddHash adds v to the "hash" field.
func (u *AirportUpsert) AddHash(v uint64) *AirportUpsert {
	u.Add(airport.FieldHash, v)
	return u
}

// SetImportFlag sets the "import_flag" field.
func (u *AirportUpsert) SetImportFlag(v bool) *AirportUpsert {
	u.Set(airport.FieldImportFlag, v)
	return u
}

// UpdateImportFlag sets the "import_flag" field to the value that was provided on create.
func (u *AirportUpsert) UpdateImportFlag() *AirportUpsert {
	u.SetExcluded(airport.FieldImportFlag)
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *AirportUpsert) SetCreateTime(v time.Time) *AirportUpsert {
	u.Set(airport.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *AirportUpsert) UpdateCreateTime() *AirportUpsert {
	u.SetExcluded(airport.FieldCreateTime)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *AirportUpsert) SetUpdateTime(v time.Time) *AirportUpsert {
	u.Set(airport.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AirportUpsert) UpdateUpdateTime() *AirportUpsert {
	u.SetExcluded(airport.FieldUpdateTime)
	return u
}

// SetIdentifier sets the "identifier" field.
func (u *AirportUpsert) SetIdentifier(v string) *AirportUpsert {
	u.Set(airport.FieldIdentifier, v)
	return u
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *AirportUpsert) UpdateIdentifier() *AirportUpsert {
	u.SetExcluded(airport.FieldIdentifier)
	return u
}

// SetType sets the "type" field.
func (u *AirportUpsert) SetType(v string) *AirportUpsert {
	u.Set(airport.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AirportUpsert) UpdateType() *AirportUpsert {
	u.SetExcluded(airport.FieldType)
	return u
}

// SetName sets the "name" field.
func (u *AirportUpsert) SetName(v string) *AirportUpsert {
	u.Set(airport.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AirportUpsert) UpdateName() *AirportUpsert {
	u.SetExcluded(airport.FieldName)
	return u
}

// SetLatitude sets the "latitude" field.
func (u *AirportUpsert) SetLatitude(v float64) *AirportUpsert {
	u.Set(airport.FieldLatitude, v)
	return u
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *AirportUpsert) UpdateLatitude() *AirportUpsert {
	u.SetExcluded(airport.FieldLatitude)
	return u
}

// AddLatitude adds v to the "latitude" field.
func (u *AirportUpsert) AddLatitude(v float64) *AirportUpsert {
	u.Add(airport.FieldLatitude, v)
	return u
}

// SetLongitude sets the "longitude" field.
func (u *AirportUpsert) SetLongitude(v float64) *AirportUpsert {
	u.Set(airport.FieldLongitude, v)
	return u
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *AirportUpsert) UpdateLongitude() *AirportUpsert {
	u.SetExcluded(airport.FieldLongitude)
	return u
}

// AddLongitude adds v to the "longitude" field.
func (u *AirportUpsert) AddLongitude(v float64) *AirportUpsert {
	u.Add(airport.FieldLongitude, v)
	return u
}

// SetElevation sets the "elevation" field.
func (u *AirportUpsert) SetElevation(v int) *AirportUpsert {
	u.Set(airport.FieldElevation, v)
	return u
}

// UpdateElevation sets the "elevation" field to the value that was provided on create.
func (u *AirportUpsert) UpdateElevation() *AirportUpsert {
	u.SetExcluded(airport.FieldElevation)
	return u
}

// AddElevation adds v to the "elevation" field.
func (u *AirportUpsert) AddElevation(v int) *AirportUpsert {
	u.Add(airport.FieldElevation, v)
	return u
}

// SetContinent sets the "continent" field.
func (u *AirportUpsert) SetContinent(v string) *AirportUpsert {
	u.Set(airport.FieldContinent, v)
	return u
}

// UpdateContinent sets the "continent" field to the value that was provided on create.
func (u *AirportUpsert) UpdateContinent() *AirportUpsert {
	u.SetExcluded(airport.FieldContinent)
	return u
}

// SetCountry sets the "country" field.
func (u *AirportUpsert) SetCountry(v string) *AirportUpsert {
	u.Set(airport.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *AirportUpsert) UpdateCountry() *AirportUpsert {
	u.SetExcluded(airport.FieldCountry)
	return u
}

// SetRegion sets the "region" field.
func (u *AirportUpsert) SetRegion(v string) *AirportUpsert {
	u.Set(airport.FieldRegion, v)
	return u
}

// UpdateRegion sets the "region" field to the value that was provided on create.
func (u *AirportUpsert) UpdateRegion() *AirportUpsert {
	u.SetExcluded(airport.FieldRegion)
	return u
}

// SetMunicipality sets the "municipality" field.
func (u *AirportUpsert) SetMunicipality(v string) *AirportUpsert {
	u.Set(airport.FieldMunicipality, v)
	return u
}

// UpdateMunicipality sets the "municipality" field to the value that was provided on create.
func (u *AirportUpsert) UpdateMunicipality() *AirportUpsert {
	u.SetExcluded(airport.FieldMunicipality)
	return u
}

// SetScheduledService sets the "scheduled_service" field.
func (u *AirportUpsert) SetScheduledService(v bool) *AirportUpsert {
	u.Set(airport.FieldScheduledService, v)
	return u
}

// UpdateScheduledService sets the "scheduled_service" field to the value that was provided on create.
func (u *AirportUpsert) UpdateScheduledService() *AirportUpsert {
	u.SetExcluded(airport.FieldScheduledService)
	return u
}

// SetGpsCode sets the "gps_code" field.
func (u *AirportUpsert) SetGpsCode(v string) *AirportUpsert {
	u.Set(airport.FieldGpsCode, v)
	return u
}

// UpdateGpsCode sets the "gps_code" field to the value that was provided on create.
func (u *AirportUpsert) UpdateGpsCode() *AirportUpsert {
	u.SetExcluded(airport.FieldGpsCode)
	return u
}

// SetIataCode sets the "iata_code" field.
func (u *AirportUpsert) SetIataCode(v string) *AirportUpsert {
	u.Set(airport.FieldIataCode, v)
	return u
}

// UpdateIataCode sets the "iata_code" field to the value that was provided on create.
func (u *AirportUpsert) UpdateIataCode() *AirportUpsert {
	u.SetExcluded(airport.FieldIataCode)
	return u
}

// SetLocalCode sets the "local_code" field.
func (u *AirportUpsert) SetLocalCode(v string) *AirportUpsert {
	u.Set(airport.FieldLocalCode, v)
	return u
}

// UpdateLocalCode sets the "local_code" field to the value that was provided on create.
func (u *AirportUpsert) UpdateLocalCode() *AirportUpsert {
	u.SetExcluded(airport.FieldLocalCode)
	return u
}

// SetWebsite sets the "website" field.
func (u *AirportUpsert) SetWebsite(v string) *AirportUpsert {
	u.Set(airport.FieldWebsite, v)
	return u
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *AirportUpsert) UpdateWebsite() *AirportUpsert {
	u.SetExcluded(airport.FieldWebsite)
	return u
}

// SetWikipedia sets the "wikipedia" field.
func (u *AirportUpsert) SetWikipedia(v string) *AirportUpsert {
	u.Set(airport.FieldWikipedia, v)
	return u
}

// UpdateWikipedia sets the "wikipedia" field to the value that was provided on create.
func (u *AirportUpsert) UpdateWikipedia() *AirportUpsert {
	u.SetExcluded(airport.FieldWikipedia)
	return u
}

// SetKeywords sets the "keywords" field.
func (u *AirportUpsert) SetKeywords(v []string) *AirportUpsert {
	u.Set(airport.FieldKeywords, v)
	return u
}

// UpdateKeywords sets the "keywords" field to the value that was provided on create.
func (u *AirportUpsert) UpdateKeywords() *AirportUpsert {
	u.SetExcluded(airport.FieldKeywords)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Airport.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(airport.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AirportUpsertOne) UpdateNewValues() *AirportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(airport.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(airport.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Airport.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AirportUpsertOne) Ignore() *AirportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AirportUpsertOne) DoNothing() *AirportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AirportCreate.OnConflict
// documentation for more info.
func (u *AirportUpsertOne) Update(set func(*AirportUpsert)) *AirportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AirportUpsert{UpdateSet: update})
	}))
	return u
}

// SetHash sets the "hash" field.
func (u *AirportUpsertOne) SetHash(v uint64) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetHash(v)
	})
}

// AddHash adds v to the "hash" field.
func (u *AirportUpsertOne) AddHash(v uint64) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.AddHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateHash() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateHash()
	})
}

// SetImportFlag sets the "import_flag" field.
func (u *AirportUpsertOne) SetImportFlag(v bool) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetImportFlag(v)
	})
}

// UpdateImportFlag sets the "import_flag" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateImportFlag() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateImportFlag()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *AirportUpsertOne) SetCreateTime(v time.Time) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateCreateTime() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *AirportUpsertOne) SetUpdateTime(v time.Time) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateUpdateTime() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetIdentifier sets the "identifier" field.
func (u *AirportUpsertOne) SetIdentifier(v string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetIdentifier(v)
	})
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateIdentifier() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateIdentifier()
	})
}

// SetType sets the "type" field.
func (u *AirportUpsertOne) SetType(v string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateType() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *AirportUpsertOne) SetName(v string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateName() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateName()
	})
}

// SetLatitude sets the "latitude" field.
func (u *AirportUpsertOne) SetLatitude(v float64) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *AirportUpsertOne) AddLatitude(v float64) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateLatitude() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *AirportUpsertOne) SetLongitude(v float64) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *AirportUpsertOne) AddLongitude(v float64) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateLongitude() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateLongitude()
	})
}

// SetElevation sets the "elevation" field.
func (u *AirportUpsertOne) SetElevation(v int) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetElevation(v)
	})
}

// AddElevation adds v to the "elevation" field.
func (u *AirportUpsertOne) AddElevation(v int) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.AddElevation(v)
	})
}

// UpdateElevation sets the "elevation" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateElevation() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateElevation()
	})
}

// SetContinent sets the "continent" field.
func (u *AirportUpsertOne) SetContinent(v string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetContinent(v)
	})
}

// UpdateContinent sets the "continent" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateContinent() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateContinent()
	})
}

// SetCountry sets the "country" field.
func (u *AirportUpsertOne) SetCountry(v string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateCountry() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateCountry()
	})
}

// SetRegion sets the "region" field.
func (u *AirportUpsertOne) SetRegion(v string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetRegion(v)
	})
}

// UpdateRegion sets the "region" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateRegion() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateRegion()
	})
}

// SetMunicipality sets the "municipality" field.
func (u *AirportUpsertOne) SetMunicipality(v string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetMunicipality(v)
	})
}

// UpdateMunicipality sets the "municipality" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateMunicipality() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateMunicipality()
	})
}

// SetScheduledService sets the "scheduled_service" field.
func (u *AirportUpsertOne) SetScheduledService(v bool) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetScheduledService(v)
	})
}

// UpdateScheduledService sets the "scheduled_service" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateScheduledService() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateScheduledService()
	})
}

// SetGpsCode sets the "gps_code" field.
func (u *AirportUpsertOne) SetGpsCode(v string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetGpsCode(v)
	})
}

// UpdateGpsCode sets the "gps_code" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateGpsCode() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateGpsCode()
	})
}

// SetIataCode sets the "iata_code" field.
func (u *AirportUpsertOne) SetIataCode(v string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetIataCode(v)
	})
}

// UpdateIataCode sets the "iata_code" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateIataCode() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateIataCode()
	})
}

// SetLocalCode sets the "local_code" field.
func (u *AirportUpsertOne) SetLocalCode(v string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetLocalCode(v)
	})
}

// UpdateLocalCode sets the "local_code" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateLocalCode() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateLocalCode()
	})
}

// SetWebsite sets the "website" field.
func (u *AirportUpsertOne) SetWebsite(v string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetWebsite(v)
	})
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateWebsite() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateWebsite()
	})
}

// SetWikipedia sets the "wikipedia" field.
func (u *AirportUpsertOne) SetWikipedia(v string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetWikipedia(v)
	})
}

// UpdateWikipedia sets the "wikipedia" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateWikipedia() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateWikipedia()
	})
}

// SetKeywords sets the "keywords" field.
func (u *AirportUpsertOne) SetKeywords(v []string) *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.SetKeywords(v)
	})
}

// UpdateKeywords sets the "keywords" field to the value that was provided on create.
func (u *AirportUpsertOne) UpdateKeywords() *AirportUpsertOne {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateKeywords()
	})
}

// Exec executes the query.
func (u *AirportUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AirportCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AirportUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AirportUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AirportUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AirportCreateBulk is the builder for creating many Airport entities in bulk.
type AirportCreateBulk struct {
	config
	builders []*AirportCreate
	conflict []sql.ConflictOption
}

// Save creates the Airport entities in the database.
func (acb *AirportCreateBulk) Save(ctx context.Context) ([]*Airport, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Airport, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AirportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AirportCreateBulk) SaveX(ctx context.Context) []*Airport {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AirportCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AirportCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Airport.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AirportUpsert) {
//			SetHash(v+v).
//		}).
//		Exec(ctx)
//
func (acb *AirportCreateBulk) OnConflict(opts ...sql.ConflictOption) *AirportUpsertBulk {
	acb.conflict = opts
	return &AirportUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Airport.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (acb *AirportCreateBulk) OnConflictColumns(columns ...string) *AirportUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AirportUpsertBulk{
		create: acb,
	}
}

// AirportUpsertBulk is the builder for "upsert"-ing
// a bulk of Airport nodes.
type AirportUpsertBulk struct {
	create *AirportCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Airport.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(airport.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AirportUpsertBulk) UpdateNewValues() *AirportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(airport.FieldID)
				return
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(airport.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Airport.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AirportUpsertBulk) Ignore() *AirportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AirportUpsertBulk) DoNothing() *AirportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AirportCreateBulk.OnConflict
// documentation for more info.
func (u *AirportUpsertBulk) Update(set func(*AirportUpsert)) *AirportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AirportUpsert{UpdateSet: update})
	}))
	return u
}

// SetHash sets the "hash" field.
func (u *AirportUpsertBulk) SetHash(v uint64) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetHash(v)
	})
}

// AddHash adds v to the "hash" field.
func (u *AirportUpsertBulk) AddHash(v uint64) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.AddHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateHash() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateHash()
	})
}

// SetImportFlag sets the "import_flag" field.
func (u *AirportUpsertBulk) SetImportFlag(v bool) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetImportFlag(v)
	})
}

// UpdateImportFlag sets the "import_flag" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateImportFlag() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateImportFlag()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *AirportUpsertBulk) SetCreateTime(v time.Time) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateCreateTime() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *AirportUpsertBulk) SetUpdateTime(v time.Time) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateUpdateTime() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetIdentifier sets the "identifier" field.
func (u *AirportUpsertBulk) SetIdentifier(v string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetIdentifier(v)
	})
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateIdentifier() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateIdentifier()
	})
}

// SetType sets the "type" field.
func (u *AirportUpsertBulk) SetType(v string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateType() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *AirportUpsertBulk) SetName(v string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateName() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateName()
	})
}

// SetLatitude sets the "latitude" field.
func (u *AirportUpsertBulk) SetLatitude(v float64) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *AirportUpsertBulk) AddLatitude(v float64) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateLatitude() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *AirportUpsertBulk) SetLongitude(v float64) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *AirportUpsertBulk) AddLongitude(v float64) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateLongitude() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateLongitude()
	})
}

// SetElevation sets the "elevation" field.
func (u *AirportUpsertBulk) SetElevation(v int) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetElevation(v)
	})
}

// AddElevation adds v to the "elevation" field.
func (u *AirportUpsertBulk) AddElevation(v int) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.AddElevation(v)
	})
}

// UpdateElevation sets the "elevation" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateElevation() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateElevation()
	})
}

// SetContinent sets the "continent" field.
func (u *AirportUpsertBulk) SetContinent(v string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetContinent(v)
	})
}

// UpdateContinent sets the "continent" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateContinent() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateContinent()
	})
}

// SetCountry sets the "country" field.
func (u *AirportUpsertBulk) SetCountry(v string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateCountry() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateCountry()
	})
}

// SetRegion sets the "region" field.
func (u *AirportUpsertBulk) SetRegion(v string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetRegion(v)
	})
}

// UpdateRegion sets the "region" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateRegion() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateRegion()
	})
}

// SetMunicipality sets the "municipality" field.
func (u *AirportUpsertBulk) SetMunicipality(v string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetMunicipality(v)
	})
}

// UpdateMunicipality sets the "municipality" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateMunicipality() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateMunicipality()
	})
}

// SetScheduledService sets the "scheduled_service" field.
func (u *AirportUpsertBulk) SetScheduledService(v bool) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetScheduledService(v)
	})
}

// UpdateScheduledService sets the "scheduled_service" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateScheduledService() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateScheduledService()
	})
}

// SetGpsCode sets the "gps_code" field.
func (u *AirportUpsertBulk) SetGpsCode(v string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetGpsCode(v)
	})
}

// UpdateGpsCode sets the "gps_code" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateGpsCode() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateGpsCode()
	})
}

// SetIataCode sets the "iata_code" field.
func (u *AirportUpsertBulk) SetIataCode(v string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetIataCode(v)
	})
}

// UpdateIataCode sets the "iata_code" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateIataCode() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateIataCode()
	})
}

// SetLocalCode sets the "local_code" field.
func (u *AirportUpsertBulk) SetLocalCode(v string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetLocalCode(v)
	})
}

// UpdateLocalCode sets the "local_code" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateLocalCode() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateLocalCode()
	})
}

// SetWebsite sets the "website" field.
func (u *AirportUpsertBulk) SetWebsite(v string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetWebsite(v)
	})
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateWebsite() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateWebsite()
	})
}

// SetWikipedia sets the "wikipedia" field.
func (u *AirportUpsertBulk) SetWikipedia(v string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetWikipedia(v)
	})
}

// UpdateWikipedia sets the "wikipedia" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateWikipedia() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateWikipedia()
	})
}

// SetKeywords sets the "keywords" field.
func (u *AirportUpsertBulk) SetKeywords(v []string) *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.SetKeywords(v)
	})
}

// UpdateKeywords sets the "keywords" field to the value that was provided on create.
func (u *AirportUpsertBulk) UpdateKeywords() *AirportUpsertBulk {
	return u.Update(func(s *AirportUpsert) {
		s.UpdateKeywords()
	})
}

// Exec executes the query.
func (u *AirportUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AirportCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AirportCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AirportUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
