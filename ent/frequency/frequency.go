// Code generated by ent, DO NOT EDIT.

package frequency

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the frequency type in the database.
	Label = "frequency"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldImportID holds the string denoting the import_id field in the database.
	FieldImportID = "import_id"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// FieldImportFlag holds the string denoting the import_flag field in the database.
	FieldImportFlag = "import_flag"
	// FieldLastUpdated holds the string denoting the last_updated field in the database.
	FieldLastUpdated = "last_updated"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldFrequency holds the string denoting the frequency field in the database.
	FieldFrequency = "frequency"
	// EdgeAirport holds the string denoting the airport edge name in mutations.
	EdgeAirport = "airport"
	// Table holds the table name of the frequency in the database.
	Table = "frequencies"
	// AirportTable is the table that holds the airport relation/edge.
	AirportTable = "frequencies"
	// AirportInverseTable is the table name for the Airport entity.
	// It exists in this package in order to avoid circular dependency with the "airport" package.
	AirportInverseTable = "airports"
	// AirportColumn is the table column denoting the airport relation/edge.
	AirportColumn = "airport_frequencies"
)

// Columns holds all SQL columns for frequency fields.
var Columns = []string{
	FieldID,
	FieldImportID,
	FieldHash,
	FieldImportFlag,
	FieldLastUpdated,
	FieldType,
	FieldDescription,
	FieldFrequency,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "frequencies"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"airport_frequencies",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultImportFlag holds the default value on creation for the "import_flag" field.
	DefaultImportFlag bool
	// DefaultLastUpdated holds the default value on creation for the "last_updated" field.
	DefaultLastUpdated func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Frequency queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByImportID orders the results by the import_id field.
func ByImportID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImportID, opts...).ToFunc()
}

// ByHash orders the results by the hash field.
func ByHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHash, opts...).ToFunc()
}

// ByImportFlag orders the results by the import_flag field.
func ByImportFlag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImportFlag, opts...).ToFunc()
}

// ByLastUpdated orders the results by the last_updated field.
func ByLastUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUpdated, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByFrequency orders the results by the frequency field.
func ByFrequency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFrequency, opts...).ToFunc()
}

// ByAirportField orders the results by airport field.
func ByAirportField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAirportStep(), sql.OrderByField(field, opts...))
	}
}
func newAirportStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AirportInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AirportTable, AirportColumn),
	)
}
