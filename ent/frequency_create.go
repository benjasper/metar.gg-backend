// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"metar.gg/ent/airport"
	"metar.gg/ent/frequency"
)

// FrequencyCreate is the builder for creating a Frequency entity.
type FrequencyCreate struct {
	config
	mutation *FrequencyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetImportID sets the "import_id" field.
func (fc *FrequencyCreate) SetImportID(i int) *FrequencyCreate {
	fc.mutation.SetImportID(i)
	return fc
}

// SetHash sets the "hash" field.
func (fc *FrequencyCreate) SetHash(s string) *FrequencyCreate {
	fc.mutation.SetHash(s)
	return fc
}

// SetImportFlag sets the "import_flag" field.
func (fc *FrequencyCreate) SetImportFlag(b bool) *FrequencyCreate {
	fc.mutation.SetImportFlag(b)
	return fc
}

// SetNillableImportFlag sets the "import_flag" field if the given value is not nil.
func (fc *FrequencyCreate) SetNillableImportFlag(b *bool) *FrequencyCreate {
	if b != nil {
		fc.SetImportFlag(*b)
	}
	return fc
}

// SetLastUpdated sets the "last_updated" field.
func (fc *FrequencyCreate) SetLastUpdated(t time.Time) *FrequencyCreate {
	fc.mutation.SetLastUpdated(t)
	return fc
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (fc *FrequencyCreate) SetNillableLastUpdated(t *time.Time) *FrequencyCreate {
	if t != nil {
		fc.SetLastUpdated(*t)
	}
	return fc
}

// SetType sets the "type" field.
func (fc *FrequencyCreate) SetType(s string) *FrequencyCreate {
	fc.mutation.SetType(s)
	return fc
}

// SetDescription sets the "description" field.
func (fc *FrequencyCreate) SetDescription(s string) *FrequencyCreate {
	fc.mutation.SetDescription(s)
	return fc
}

// SetFrequency sets the "frequency" field.
func (fc *FrequencyCreate) SetFrequency(f float64) *FrequencyCreate {
	fc.mutation.SetFrequency(f)
	return fc
}

// SetID sets the "id" field.
func (fc *FrequencyCreate) SetID(u uuid.UUID) *FrequencyCreate {
	fc.mutation.SetID(u)
	return fc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fc *FrequencyCreate) SetNillableID(u *uuid.UUID) *FrequencyCreate {
	if u != nil {
		fc.SetID(*u)
	}
	return fc
}

// SetAirportID sets the "airport" edge to the Airport entity by ID.
func (fc *FrequencyCreate) SetAirportID(id uuid.UUID) *FrequencyCreate {
	fc.mutation.SetAirportID(id)
	return fc
}

// SetNillableAirportID sets the "airport" edge to the Airport entity by ID if the given value is not nil.
func (fc *FrequencyCreate) SetNillableAirportID(id *uuid.UUID) *FrequencyCreate {
	if id != nil {
		fc = fc.SetAirportID(*id)
	}
	return fc
}

// SetAirport sets the "airport" edge to the Airport entity.
func (fc *FrequencyCreate) SetAirport(a *Airport) *FrequencyCreate {
	return fc.SetAirportID(a.ID)
}

// Mutation returns the FrequencyMutation object of the builder.
func (fc *FrequencyCreate) Mutation() *FrequencyMutation {
	return fc.mutation
}

// Save creates the Frequency in the database.
func (fc *FrequencyCreate) Save(ctx context.Context) (*Frequency, error) {
	fc.defaults()
	return withHooks[*Frequency, FrequencyMutation](ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FrequencyCreate) SaveX(ctx context.Context) *Frequency {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FrequencyCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FrequencyCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FrequencyCreate) defaults() {
	if _, ok := fc.mutation.ImportFlag(); !ok {
		v := frequency.DefaultImportFlag
		fc.mutation.SetImportFlag(v)
	}
	if _, ok := fc.mutation.LastUpdated(); !ok {
		v := frequency.DefaultLastUpdated()
		fc.mutation.SetLastUpdated(v)
	}
	if _, ok := fc.mutation.ID(); !ok {
		v := frequency.DefaultID()
		fc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FrequencyCreate) check() error {
	if _, ok := fc.mutation.ImportID(); !ok {
		return &ValidationError{Name: "import_id", err: errors.New(`ent: missing required field "Frequency.import_id"`)}
	}
	if _, ok := fc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "Frequency.hash"`)}
	}
	if _, ok := fc.mutation.ImportFlag(); !ok {
		return &ValidationError{Name: "import_flag", err: errors.New(`ent: missing required field "Frequency.import_flag"`)}
	}
	if _, ok := fc.mutation.LastUpdated(); !ok {
		return &ValidationError{Name: "last_updated", err: errors.New(`ent: missing required field "Frequency.last_updated"`)}
	}
	if _, ok := fc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Frequency.type"`)}
	}
	if _, ok := fc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Frequency.description"`)}
	}
	if _, ok := fc.mutation.Frequency(); !ok {
		return &ValidationError{Name: "frequency", err: errors.New(`ent: missing required field "Frequency.frequency"`)}
	}
	return nil
}

func (fc *FrequencyCreate) sqlSave(ctx context.Context) (*Frequency, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FrequencyCreate) createSpec() (*Frequency, *sqlgraph.CreateSpec) {
	var (
		_node = &Frequency{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(frequency.Table, sqlgraph.NewFieldSpec(frequency.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = fc.conflict
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := fc.mutation.ImportID(); ok {
		_spec.SetField(frequency.FieldImportID, field.TypeInt, value)
		_node.ImportID = value
	}
	if value, ok := fc.mutation.Hash(); ok {
		_spec.SetField(frequency.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := fc.mutation.ImportFlag(); ok {
		_spec.SetField(frequency.FieldImportFlag, field.TypeBool, value)
		_node.ImportFlag = value
	}
	if value, ok := fc.mutation.LastUpdated(); ok {
		_spec.SetField(frequency.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if value, ok := fc.mutation.GetType(); ok {
		_spec.SetField(frequency.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := fc.mutation.Description(); ok {
		_spec.SetField(frequency.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := fc.mutation.Frequency(); ok {
		_spec.SetField(frequency.FieldFrequency, field.TypeFloat64, value)
		_node.Frequency = value
	}
	if nodes := fc.mutation.AirportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   frequency.AirportTable,
			Columns: []string{frequency.AirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.airport_frequencies = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Frequency.Create().
//		SetImportID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FrequencyUpsert) {
//			SetImportID(v+v).
//		}).
//		Exec(ctx)
func (fc *FrequencyCreate) OnConflict(opts ...sql.ConflictOption) *FrequencyUpsertOne {
	fc.conflict = opts
	return &FrequencyUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Frequency.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fc *FrequencyCreate) OnConflictColumns(columns ...string) *FrequencyUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &FrequencyUpsertOne{
		create: fc,
	}
}

type (
	// FrequencyUpsertOne is the builder for "upsert"-ing
	//  one Frequency node.
	FrequencyUpsertOne struct {
		create *FrequencyCreate
	}

	// FrequencyUpsert is the "OnConflict" setter.
	FrequencyUpsert struct {
		*sql.UpdateSet
	}
)

// SetImportID sets the "import_id" field.
func (u *FrequencyUpsert) SetImportID(v int) *FrequencyUpsert {
	u.Set(frequency.FieldImportID, v)
	return u
}

// UpdateImportID sets the "import_id" field to the value that was provided on create.
func (u *FrequencyUpsert) UpdateImportID() *FrequencyUpsert {
	u.SetExcluded(frequency.FieldImportID)
	return u
}

// AddImportID adds v to the "import_id" field.
func (u *FrequencyUpsert) AddImportID(v int) *FrequencyUpsert {
	u.Add(frequency.FieldImportID, v)
	return u
}

// SetHash sets the "hash" field.
func (u *FrequencyUpsert) SetHash(v string) *FrequencyUpsert {
	u.Set(frequency.FieldHash, v)
	return u
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *FrequencyUpsert) UpdateHash() *FrequencyUpsert {
	u.SetExcluded(frequency.FieldHash)
	return u
}

// SetImportFlag sets the "import_flag" field.
func (u *FrequencyUpsert) SetImportFlag(v bool) *FrequencyUpsert {
	u.Set(frequency.FieldImportFlag, v)
	return u
}

// UpdateImportFlag sets the "import_flag" field to the value that was provided on create.
func (u *FrequencyUpsert) UpdateImportFlag() *FrequencyUpsert {
	u.SetExcluded(frequency.FieldImportFlag)
	return u
}

// SetLastUpdated sets the "last_updated" field.
func (u *FrequencyUpsert) SetLastUpdated(v time.Time) *FrequencyUpsert {
	u.Set(frequency.FieldLastUpdated, v)
	return u
}

// UpdateLastUpdated sets the "last_updated" field to the value that was provided on create.
func (u *FrequencyUpsert) UpdateLastUpdated() *FrequencyUpsert {
	u.SetExcluded(frequency.FieldLastUpdated)
	return u
}

// SetType sets the "type" field.
func (u *FrequencyUpsert) SetType(v string) *FrequencyUpsert {
	u.Set(frequency.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FrequencyUpsert) UpdateType() *FrequencyUpsert {
	u.SetExcluded(frequency.FieldType)
	return u
}

// SetDescription sets the "description" field.
func (u *FrequencyUpsert) SetDescription(v string) *FrequencyUpsert {
	u.Set(frequency.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FrequencyUpsert) UpdateDescription() *FrequencyUpsert {
	u.SetExcluded(frequency.FieldDescription)
	return u
}

// SetFrequency sets the "frequency" field.
func (u *FrequencyUpsert) SetFrequency(v float64) *FrequencyUpsert {
	u.Set(frequency.FieldFrequency, v)
	return u
}

// UpdateFrequency sets the "frequency" field to the value that was provided on create.
func (u *FrequencyUpsert) UpdateFrequency() *FrequencyUpsert {
	u.SetExcluded(frequency.FieldFrequency)
	return u
}

// AddFrequency adds v to the "frequency" field.
func (u *FrequencyUpsert) AddFrequency(v float64) *FrequencyUpsert {
	u.Add(frequency.FieldFrequency, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Frequency.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(frequency.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FrequencyUpsertOne) UpdateNewValues() *FrequencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(frequency.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Frequency.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FrequencyUpsertOne) Ignore() *FrequencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FrequencyUpsertOne) DoNothing() *FrequencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FrequencyCreate.OnConflict
// documentation for more info.
func (u *FrequencyUpsertOne) Update(set func(*FrequencyUpsert)) *FrequencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FrequencyUpsert{UpdateSet: update})
	}))
	return u
}

// SetImportID sets the "import_id" field.
func (u *FrequencyUpsertOne) SetImportID(v int) *FrequencyUpsertOne {
	return u.Update(func(s *FrequencyUpsert) {
		s.SetImportID(v)
	})
}

// AddImportID adds v to the "import_id" field.
func (u *FrequencyUpsertOne) AddImportID(v int) *FrequencyUpsertOne {
	return u.Update(func(s *FrequencyUpsert) {
		s.AddImportID(v)
	})
}

// UpdateImportID sets the "import_id" field to the value that was provided on create.
func (u *FrequencyUpsertOne) UpdateImportID() *FrequencyUpsertOne {
	return u.Update(func(s *FrequencyUpsert) {
		s.UpdateImportID()
	})
}

// SetHash sets the "hash" field.
func (u *FrequencyUpsertOne) SetHash(v string) *FrequencyUpsertOne {
	return u.Update(func(s *FrequencyUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *FrequencyUpsertOne) UpdateHash() *FrequencyUpsertOne {
	return u.Update(func(s *FrequencyUpsert) {
		s.UpdateHash()
	})
}

// SetImportFlag sets the "import_flag" field.
func (u *FrequencyUpsertOne) SetImportFlag(v bool) *FrequencyUpsertOne {
	return u.Update(func(s *FrequencyUpsert) {
		s.SetImportFlag(v)
	})
}

// UpdateImportFlag sets the "import_flag" field to the value that was provided on create.
func (u *FrequencyUpsertOne) UpdateImportFlag() *FrequencyUpsertOne {
	return u.Update(func(s *FrequencyUpsert) {
		s.UpdateImportFlag()
	})
}

// SetLastUpdated sets the "last_updated" field.
func (u *FrequencyUpsertOne) SetLastUpdated(v time.Time) *FrequencyUpsertOne {
	return u.Update(func(s *FrequencyUpsert) {
		s.SetLastUpdated(v)
	})
}

// UpdateLastUpdated sets the "last_updated" field to the value that was provided on create.
func (u *FrequencyUpsertOne) UpdateLastUpdated() *FrequencyUpsertOne {
	return u.Update(func(s *FrequencyUpsert) {
		s.UpdateLastUpdated()
	})
}

// SetType sets the "type" field.
func (u *FrequencyUpsertOne) SetType(v string) *FrequencyUpsertOne {
	return u.Update(func(s *FrequencyUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FrequencyUpsertOne) UpdateType() *FrequencyUpsertOne {
	return u.Update(func(s *FrequencyUpsert) {
		s.UpdateType()
	})
}

// SetDescription sets the "description" field.
func (u *FrequencyUpsertOne) SetDescription(v string) *FrequencyUpsertOne {
	return u.Update(func(s *FrequencyUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FrequencyUpsertOne) UpdateDescription() *FrequencyUpsertOne {
	return u.Update(func(s *FrequencyUpsert) {
		s.UpdateDescription()
	})
}

// SetFrequency sets the "frequency" field.
func (u *FrequencyUpsertOne) SetFrequency(v float64) *FrequencyUpsertOne {
	return u.Update(func(s *FrequencyUpsert) {
		s.SetFrequency(v)
	})
}

// AddFrequency adds v to the "frequency" field.
func (u *FrequencyUpsertOne) AddFrequency(v float64) *FrequencyUpsertOne {
	return u.Update(func(s *FrequencyUpsert) {
		s.AddFrequency(v)
	})
}

// UpdateFrequency sets the "frequency" field to the value that was provided on create.
func (u *FrequencyUpsertOne) UpdateFrequency() *FrequencyUpsertOne {
	return u.Update(func(s *FrequencyUpsert) {
		s.UpdateFrequency()
	})
}

// Exec executes the query.
func (u *FrequencyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FrequencyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FrequencyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FrequencyUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: FrequencyUpsertOne.ID is not supported by MySQL driver. Use FrequencyUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FrequencyUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FrequencyCreateBulk is the builder for creating many Frequency entities in bulk.
type FrequencyCreateBulk struct {
	config
	builders []*FrequencyCreate
	conflict []sql.ConflictOption
}

// Save creates the Frequency entities in the database.
func (fcb *FrequencyCreateBulk) Save(ctx context.Context) ([]*Frequency, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Frequency, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FrequencyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FrequencyCreateBulk) SaveX(ctx context.Context) []*Frequency {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FrequencyCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FrequencyCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Frequency.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FrequencyUpsert) {
//			SetImportID(v+v).
//		}).
//		Exec(ctx)
func (fcb *FrequencyCreateBulk) OnConflict(opts ...sql.ConflictOption) *FrequencyUpsertBulk {
	fcb.conflict = opts
	return &FrequencyUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Frequency.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcb *FrequencyCreateBulk) OnConflictColumns(columns ...string) *FrequencyUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &FrequencyUpsertBulk{
		create: fcb,
	}
}

// FrequencyUpsertBulk is the builder for "upsert"-ing
// a bulk of Frequency nodes.
type FrequencyUpsertBulk struct {
	create *FrequencyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Frequency.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(frequency.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FrequencyUpsertBulk) UpdateNewValues() *FrequencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(frequency.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Frequency.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FrequencyUpsertBulk) Ignore() *FrequencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FrequencyUpsertBulk) DoNothing() *FrequencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FrequencyCreateBulk.OnConflict
// documentation for more info.
func (u *FrequencyUpsertBulk) Update(set func(*FrequencyUpsert)) *FrequencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FrequencyUpsert{UpdateSet: update})
	}))
	return u
}

// SetImportID sets the "import_id" field.
func (u *FrequencyUpsertBulk) SetImportID(v int) *FrequencyUpsertBulk {
	return u.Update(func(s *FrequencyUpsert) {
		s.SetImportID(v)
	})
}

// AddImportID adds v to the "import_id" field.
func (u *FrequencyUpsertBulk) AddImportID(v int) *FrequencyUpsertBulk {
	return u.Update(func(s *FrequencyUpsert) {
		s.AddImportID(v)
	})
}

// UpdateImportID sets the "import_id" field to the value that was provided on create.
func (u *FrequencyUpsertBulk) UpdateImportID() *FrequencyUpsertBulk {
	return u.Update(func(s *FrequencyUpsert) {
		s.UpdateImportID()
	})
}

// SetHash sets the "hash" field.
func (u *FrequencyUpsertBulk) SetHash(v string) *FrequencyUpsertBulk {
	return u.Update(func(s *FrequencyUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *FrequencyUpsertBulk) UpdateHash() *FrequencyUpsertBulk {
	return u.Update(func(s *FrequencyUpsert) {
		s.UpdateHash()
	})
}

// SetImportFlag sets the "import_flag" field.
func (u *FrequencyUpsertBulk) SetImportFlag(v bool) *FrequencyUpsertBulk {
	return u.Update(func(s *FrequencyUpsert) {
		s.SetImportFlag(v)
	})
}

// UpdateImportFlag sets the "import_flag" field to the value that was provided on create.
func (u *FrequencyUpsertBulk) UpdateImportFlag() *FrequencyUpsertBulk {
	return u.Update(func(s *FrequencyUpsert) {
		s.UpdateImportFlag()
	})
}

// SetLastUpdated sets the "last_updated" field.
func (u *FrequencyUpsertBulk) SetLastUpdated(v time.Time) *FrequencyUpsertBulk {
	return u.Update(func(s *FrequencyUpsert) {
		s.SetLastUpdated(v)
	})
}

// UpdateLastUpdated sets the "last_updated" field to the value that was provided on create.
func (u *FrequencyUpsertBulk) UpdateLastUpdated() *FrequencyUpsertBulk {
	return u.Update(func(s *FrequencyUpsert) {
		s.UpdateLastUpdated()
	})
}

// SetType sets the "type" field.
func (u *FrequencyUpsertBulk) SetType(v string) *FrequencyUpsertBulk {
	return u.Update(func(s *FrequencyUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FrequencyUpsertBulk) UpdateType() *FrequencyUpsertBulk {
	return u.Update(func(s *FrequencyUpsert) {
		s.UpdateType()
	})
}

// SetDescription sets the "description" field.
func (u *FrequencyUpsertBulk) SetDescription(v string) *FrequencyUpsertBulk {
	return u.Update(func(s *FrequencyUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FrequencyUpsertBulk) UpdateDescription() *FrequencyUpsertBulk {
	return u.Update(func(s *FrequencyUpsert) {
		s.UpdateDescription()
	})
}

// SetFrequency sets the "frequency" field.
func (u *FrequencyUpsertBulk) SetFrequency(v float64) *FrequencyUpsertBulk {
	return u.Update(func(s *FrequencyUpsert) {
		s.SetFrequency(v)
	})
}

// AddFrequency adds v to the "frequency" field.
func (u *FrequencyUpsertBulk) AddFrequency(v float64) *FrequencyUpsertBulk {
	return u.Update(func(s *FrequencyUpsert) {
		s.AddFrequency(v)
	})
}

// UpdateFrequency sets the "frequency" field to the value that was provided on create.
func (u *FrequencyUpsertBulk) UpdateFrequency() *FrequencyUpsertBulk {
	return u.Update(func(s *FrequencyUpsert) {
		s.UpdateFrequency()
	})
}

// Exec executes the query.
func (u *FrequencyUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FrequencyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FrequencyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FrequencyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
