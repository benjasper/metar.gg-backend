// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"metar.gg/ent/airport"
	"metar.gg/ent/country"
	"metar.gg/ent/frequency"
	"metar.gg/ent/predicate"
	"metar.gg/ent/region"
	"metar.gg/ent/runway"
	"metar.gg/ent/weatherstation"
)

// AirportUpdate is the builder for updating Airport entities.
type AirportUpdate struct {
	config
	hooks     []Hook
	mutation  *AirportMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AirportUpdate builder.
func (au *AirportUpdate) Where(ps ...predicate.Airport) *AirportUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetImportID sets the "import_id" field.
func (au *AirportUpdate) SetImportID(i int) *AirportUpdate {
	au.mutation.ResetImportID()
	au.mutation.SetImportID(i)
	return au
}

// AddImportID adds i to the "import_id" field.
func (au *AirportUpdate) AddImportID(i int) *AirportUpdate {
	au.mutation.AddImportID(i)
	return au
}

// SetHash sets the "hash" field.
func (au *AirportUpdate) SetHash(s string) *AirportUpdate {
	au.mutation.SetHash(s)
	return au
}

// SetImportFlag sets the "import_flag" field.
func (au *AirportUpdate) SetImportFlag(b bool) *AirportUpdate {
	au.mutation.SetImportFlag(b)
	return au
}

// SetNillableImportFlag sets the "import_flag" field if the given value is not nil.
func (au *AirportUpdate) SetNillableImportFlag(b *bool) *AirportUpdate {
	if b != nil {
		au.SetImportFlag(*b)
	}
	return au
}

// SetLastUpdated sets the "last_updated" field.
func (au *AirportUpdate) SetLastUpdated(t time.Time) *AirportUpdate {
	au.mutation.SetLastUpdated(t)
	return au
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (au *AirportUpdate) SetNillableLastUpdated(t *time.Time) *AirportUpdate {
	if t != nil {
		au.SetLastUpdated(*t)
	}
	return au
}

// SetIcaoCode sets the "icao_code" field.
func (au *AirportUpdate) SetIcaoCode(s string) *AirportUpdate {
	au.mutation.SetIcaoCode(s)
	return au
}

// SetNillableIcaoCode sets the "icao_code" field if the given value is not nil.
func (au *AirportUpdate) SetNillableIcaoCode(s *string) *AirportUpdate {
	if s != nil {
		au.SetIcaoCode(*s)
	}
	return au
}

// ClearIcaoCode clears the value of the "icao_code" field.
func (au *AirportUpdate) ClearIcaoCode() *AirportUpdate {
	au.mutation.ClearIcaoCode()
	return au
}

// SetIataCode sets the "iata_code" field.
func (au *AirportUpdate) SetIataCode(s string) *AirportUpdate {
	au.mutation.SetIataCode(s)
	return au
}

// SetNillableIataCode sets the "iata_code" field if the given value is not nil.
func (au *AirportUpdate) SetNillableIataCode(s *string) *AirportUpdate {
	if s != nil {
		au.SetIataCode(*s)
	}
	return au
}

// ClearIataCode clears the value of the "iata_code" field.
func (au *AirportUpdate) ClearIataCode() *AirportUpdate {
	au.mutation.ClearIataCode()
	return au
}

// SetIdentifier sets the "identifier" field.
func (au *AirportUpdate) SetIdentifier(s string) *AirportUpdate {
	au.mutation.SetIdentifier(s)
	return au
}

// SetType sets the "type" field.
func (au *AirportUpdate) SetType(a airport.Type) *AirportUpdate {
	au.mutation.SetType(a)
	return au
}

// SetImportance sets the "importance" field.
func (au *AirportUpdate) SetImportance(i int) *AirportUpdate {
	au.mutation.ResetImportance()
	au.mutation.SetImportance(i)
	return au
}

// SetNillableImportance sets the "importance" field if the given value is not nil.
func (au *AirportUpdate) SetNillableImportance(i *int) *AirportUpdate {
	if i != nil {
		au.SetImportance(*i)
	}
	return au
}

// AddImportance adds i to the "importance" field.
func (au *AirportUpdate) AddImportance(i int) *AirportUpdate {
	au.mutation.AddImportance(i)
	return au
}

// SetName sets the "name" field.
func (au *AirportUpdate) SetName(s string) *AirportUpdate {
	au.mutation.SetName(s)
	return au
}

// SetLatitude sets the "latitude" field.
func (au *AirportUpdate) SetLatitude(f float64) *AirportUpdate {
	au.mutation.ResetLatitude()
	au.mutation.SetLatitude(f)
	return au
}

// AddLatitude adds f to the "latitude" field.
func (au *AirportUpdate) AddLatitude(f float64) *AirportUpdate {
	au.mutation.AddLatitude(f)
	return au
}

// SetLongitude sets the "longitude" field.
func (au *AirportUpdate) SetLongitude(f float64) *AirportUpdate {
	au.mutation.ResetLongitude()
	au.mutation.SetLongitude(f)
	return au
}

// AddLongitude adds f to the "longitude" field.
func (au *AirportUpdate) AddLongitude(f float64) *AirportUpdate {
	au.mutation.AddLongitude(f)
	return au
}

// SetTimezone sets the "timezone" field.
func (au *AirportUpdate) SetTimezone(s string) *AirportUpdate {
	au.mutation.SetTimezone(s)
	return au
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (au *AirportUpdate) SetNillableTimezone(s *string) *AirportUpdate {
	if s != nil {
		au.SetTimezone(*s)
	}
	return au
}

// ClearTimezone clears the value of the "timezone" field.
func (au *AirportUpdate) ClearTimezone() *AirportUpdate {
	au.mutation.ClearTimezone()
	return au
}

// SetElevation sets the "elevation" field.
func (au *AirportUpdate) SetElevation(i int) *AirportUpdate {
	au.mutation.ResetElevation()
	au.mutation.SetElevation(i)
	return au
}

// SetNillableElevation sets the "elevation" field if the given value is not nil.
func (au *AirportUpdate) SetNillableElevation(i *int) *AirportUpdate {
	if i != nil {
		au.SetElevation(*i)
	}
	return au
}

// AddElevation adds i to the "elevation" field.
func (au *AirportUpdate) AddElevation(i int) *AirportUpdate {
	au.mutation.AddElevation(i)
	return au
}

// ClearElevation clears the value of the "elevation" field.
func (au *AirportUpdate) ClearElevation() *AirportUpdate {
	au.mutation.ClearElevation()
	return au
}

// SetMunicipality sets the "municipality" field.
func (au *AirportUpdate) SetMunicipality(s string) *AirportUpdate {
	au.mutation.SetMunicipality(s)
	return au
}

// SetNillableMunicipality sets the "municipality" field if the given value is not nil.
func (au *AirportUpdate) SetNillableMunicipality(s *string) *AirportUpdate {
	if s != nil {
		au.SetMunicipality(*s)
	}
	return au
}

// ClearMunicipality clears the value of the "municipality" field.
func (au *AirportUpdate) ClearMunicipality() *AirportUpdate {
	au.mutation.ClearMunicipality()
	return au
}

// SetScheduledService sets the "scheduled_service" field.
func (au *AirportUpdate) SetScheduledService(b bool) *AirportUpdate {
	au.mutation.SetScheduledService(b)
	return au
}

// SetGpsCode sets the "gps_code" field.
func (au *AirportUpdate) SetGpsCode(s string) *AirportUpdate {
	au.mutation.SetGpsCode(s)
	return au
}

// SetNillableGpsCode sets the "gps_code" field if the given value is not nil.
func (au *AirportUpdate) SetNillableGpsCode(s *string) *AirportUpdate {
	if s != nil {
		au.SetGpsCode(*s)
	}
	return au
}

// ClearGpsCode clears the value of the "gps_code" field.
func (au *AirportUpdate) ClearGpsCode() *AirportUpdate {
	au.mutation.ClearGpsCode()
	return au
}

// SetLocalCode sets the "local_code" field.
func (au *AirportUpdate) SetLocalCode(s string) *AirportUpdate {
	au.mutation.SetLocalCode(s)
	return au
}

// SetNillableLocalCode sets the "local_code" field if the given value is not nil.
func (au *AirportUpdate) SetNillableLocalCode(s *string) *AirportUpdate {
	if s != nil {
		au.SetLocalCode(*s)
	}
	return au
}

// ClearLocalCode clears the value of the "local_code" field.
func (au *AirportUpdate) ClearLocalCode() *AirportUpdate {
	au.mutation.ClearLocalCode()
	return au
}

// SetWebsite sets the "website" field.
func (au *AirportUpdate) SetWebsite(s string) *AirportUpdate {
	au.mutation.SetWebsite(s)
	return au
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (au *AirportUpdate) SetNillableWebsite(s *string) *AirportUpdate {
	if s != nil {
		au.SetWebsite(*s)
	}
	return au
}

// ClearWebsite clears the value of the "website" field.
func (au *AirportUpdate) ClearWebsite() *AirportUpdate {
	au.mutation.ClearWebsite()
	return au
}

// SetWikipedia sets the "wikipedia" field.
func (au *AirportUpdate) SetWikipedia(s string) *AirportUpdate {
	au.mutation.SetWikipedia(s)
	return au
}

// SetNillableWikipedia sets the "wikipedia" field if the given value is not nil.
func (au *AirportUpdate) SetNillableWikipedia(s *string) *AirportUpdate {
	if s != nil {
		au.SetWikipedia(*s)
	}
	return au
}

// ClearWikipedia clears the value of the "wikipedia" field.
func (au *AirportUpdate) ClearWikipedia() *AirportUpdate {
	au.mutation.ClearWikipedia()
	return au
}

// SetKeywords sets the "keywords" field.
func (au *AirportUpdate) SetKeywords(s []string) *AirportUpdate {
	au.mutation.SetKeywords(s)
	return au
}

// AppendKeywords appends s to the "keywords" field.
func (au *AirportUpdate) AppendKeywords(s []string) *AirportUpdate {
	au.mutation.AppendKeywords(s)
	return au
}

// SetRegionID sets the "region" edge to the Region entity by ID.
func (au *AirportUpdate) SetRegionID(id uuid.UUID) *AirportUpdate {
	au.mutation.SetRegionID(id)
	return au
}

// SetNillableRegionID sets the "region" edge to the Region entity by ID if the given value is not nil.
func (au *AirportUpdate) SetNillableRegionID(id *uuid.UUID) *AirportUpdate {
	if id != nil {
		au = au.SetRegionID(*id)
	}
	return au
}

// SetRegion sets the "region" edge to the Region entity.
func (au *AirportUpdate) SetRegion(r *Region) *AirportUpdate {
	return au.SetRegionID(r.ID)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (au *AirportUpdate) SetCountryID(id uuid.UUID) *AirportUpdate {
	au.mutation.SetCountryID(id)
	return au
}

// SetNillableCountryID sets the "country" edge to the Country entity by ID if the given value is not nil.
func (au *AirportUpdate) SetNillableCountryID(id *uuid.UUID) *AirportUpdate {
	if id != nil {
		au = au.SetCountryID(*id)
	}
	return au
}

// SetCountry sets the "country" edge to the Country entity.
func (au *AirportUpdate) SetCountry(c *Country) *AirportUpdate {
	return au.SetCountryID(c.ID)
}

// AddRunwayIDs adds the "runways" edge to the Runway entity by IDs.
func (au *AirportUpdate) AddRunwayIDs(ids ...uuid.UUID) *AirportUpdate {
	au.mutation.AddRunwayIDs(ids...)
	return au
}

// AddRunways adds the "runways" edges to the Runway entity.
func (au *AirportUpdate) AddRunways(r ...*Runway) *AirportUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRunwayIDs(ids...)
}

// AddFrequencyIDs adds the "frequencies" edge to the Frequency entity by IDs.
func (au *AirportUpdate) AddFrequencyIDs(ids ...uuid.UUID) *AirportUpdate {
	au.mutation.AddFrequencyIDs(ids...)
	return au
}

// AddFrequencies adds the "frequencies" edges to the Frequency entity.
func (au *AirportUpdate) AddFrequencies(f ...*Frequency) *AirportUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return au.AddFrequencyIDs(ids...)
}

// SetStationID sets the "station" edge to the WeatherStation entity by ID.
func (au *AirportUpdate) SetStationID(id uuid.UUID) *AirportUpdate {
	au.mutation.SetStationID(id)
	return au
}

// SetNillableStationID sets the "station" edge to the WeatherStation entity by ID if the given value is not nil.
func (au *AirportUpdate) SetNillableStationID(id *uuid.UUID) *AirportUpdate {
	if id != nil {
		au = au.SetStationID(*id)
	}
	return au
}

// SetStation sets the "station" edge to the WeatherStation entity.
func (au *AirportUpdate) SetStation(w *WeatherStation) *AirportUpdate {
	return au.SetStationID(w.ID)
}

// Mutation returns the AirportMutation object of the builder.
func (au *AirportUpdate) Mutation() *AirportMutation {
	return au.mutation
}

// ClearRegion clears the "region" edge to the Region entity.
func (au *AirportUpdate) ClearRegion() *AirportUpdate {
	au.mutation.ClearRegion()
	return au
}

// ClearCountry clears the "country" edge to the Country entity.
func (au *AirportUpdate) ClearCountry() *AirportUpdate {
	au.mutation.ClearCountry()
	return au
}

// ClearRunways clears all "runways" edges to the Runway entity.
func (au *AirportUpdate) ClearRunways() *AirportUpdate {
	au.mutation.ClearRunways()
	return au
}

// RemoveRunwayIDs removes the "runways" edge to Runway entities by IDs.
func (au *AirportUpdate) RemoveRunwayIDs(ids ...uuid.UUID) *AirportUpdate {
	au.mutation.RemoveRunwayIDs(ids...)
	return au
}

// RemoveRunways removes "runways" edges to Runway entities.
func (au *AirportUpdate) RemoveRunways(r ...*Runway) *AirportUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRunwayIDs(ids...)
}

// ClearFrequencies clears all "frequencies" edges to the Frequency entity.
func (au *AirportUpdate) ClearFrequencies() *AirportUpdate {
	au.mutation.ClearFrequencies()
	return au
}

// RemoveFrequencyIDs removes the "frequencies" edge to Frequency entities by IDs.
func (au *AirportUpdate) RemoveFrequencyIDs(ids ...uuid.UUID) *AirportUpdate {
	au.mutation.RemoveFrequencyIDs(ids...)
	return au
}

// RemoveFrequencies removes "frequencies" edges to Frequency entities.
func (au *AirportUpdate) RemoveFrequencies(f ...*Frequency) *AirportUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return au.RemoveFrequencyIDs(ids...)
}

// ClearStation clears the "station" edge to the WeatherStation entity.
func (au *AirportUpdate) ClearStation() *AirportUpdate {
	au.mutation.ClearStation()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AirportUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, AirportMutation](ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AirportUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AirportUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AirportUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AirportUpdate) check() error {
	if v, ok := au.mutation.IcaoCode(); ok {
		if err := airport.IcaoCodeValidator(v); err != nil {
			return &ValidationError{Name: "icao_code", err: fmt.Errorf(`ent: validator failed for field "Airport.icao_code": %w`, err)}
		}
	}
	if v, ok := au.mutation.GetType(); ok {
		if err := airport.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Airport.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AirportUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AirportUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AirportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(airport.Table, airport.Columns, sqlgraph.NewFieldSpec(airport.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.ImportID(); ok {
		_spec.SetField(airport.FieldImportID, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedImportID(); ok {
		_spec.AddField(airport.FieldImportID, field.TypeInt, value)
	}
	if value, ok := au.mutation.Hash(); ok {
		_spec.SetField(airport.FieldHash, field.TypeString, value)
	}
	if value, ok := au.mutation.ImportFlag(); ok {
		_spec.SetField(airport.FieldImportFlag, field.TypeBool, value)
	}
	if value, ok := au.mutation.LastUpdated(); ok {
		_spec.SetField(airport.FieldLastUpdated, field.TypeTime, value)
	}
	if value, ok := au.mutation.IcaoCode(); ok {
		_spec.SetField(airport.FieldIcaoCode, field.TypeString, value)
	}
	if au.mutation.IcaoCodeCleared() {
		_spec.ClearField(airport.FieldIcaoCode, field.TypeString)
	}
	if value, ok := au.mutation.IataCode(); ok {
		_spec.SetField(airport.FieldIataCode, field.TypeString, value)
	}
	if au.mutation.IataCodeCleared() {
		_spec.ClearField(airport.FieldIataCode, field.TypeString)
	}
	if value, ok := au.mutation.Identifier(); ok {
		_spec.SetField(airport.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.SetField(airport.FieldType, field.TypeEnum, value)
	}
	if value, ok := au.mutation.Importance(); ok {
		_spec.SetField(airport.FieldImportance, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedImportance(); ok {
		_spec.AddField(airport.FieldImportance, field.TypeInt, value)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(airport.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Latitude(); ok {
		_spec.SetField(airport.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedLatitude(); ok {
		_spec.AddField(airport.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.Longitude(); ok {
		_spec.SetField(airport.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedLongitude(); ok {
		_spec.AddField(airport.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.Timezone(); ok {
		_spec.SetField(airport.FieldTimezone, field.TypeString, value)
	}
	if au.mutation.TimezoneCleared() {
		_spec.ClearField(airport.FieldTimezone, field.TypeString)
	}
	if value, ok := au.mutation.Elevation(); ok {
		_spec.SetField(airport.FieldElevation, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedElevation(); ok {
		_spec.AddField(airport.FieldElevation, field.TypeInt, value)
	}
	if au.mutation.ElevationCleared() {
		_spec.ClearField(airport.FieldElevation, field.TypeInt)
	}
	if value, ok := au.mutation.Municipality(); ok {
		_spec.SetField(airport.FieldMunicipality, field.TypeString, value)
	}
	if au.mutation.MunicipalityCleared() {
		_spec.ClearField(airport.FieldMunicipality, field.TypeString)
	}
	if value, ok := au.mutation.ScheduledService(); ok {
		_spec.SetField(airport.FieldScheduledService, field.TypeBool, value)
	}
	if value, ok := au.mutation.GpsCode(); ok {
		_spec.SetField(airport.FieldGpsCode, field.TypeString, value)
	}
	if au.mutation.GpsCodeCleared() {
		_spec.ClearField(airport.FieldGpsCode, field.TypeString)
	}
	if value, ok := au.mutation.LocalCode(); ok {
		_spec.SetField(airport.FieldLocalCode, field.TypeString, value)
	}
	if au.mutation.LocalCodeCleared() {
		_spec.ClearField(airport.FieldLocalCode, field.TypeString)
	}
	if value, ok := au.mutation.Website(); ok {
		_spec.SetField(airport.FieldWebsite, field.TypeString, value)
	}
	if au.mutation.WebsiteCleared() {
		_spec.ClearField(airport.FieldWebsite, field.TypeString)
	}
	if value, ok := au.mutation.Wikipedia(); ok {
		_spec.SetField(airport.FieldWikipedia, field.TypeString, value)
	}
	if au.mutation.WikipediaCleared() {
		_spec.ClearField(airport.FieldWikipedia, field.TypeString)
	}
	if value, ok := au.mutation.Keywords(); ok {
		_spec.SetField(airport.FieldKeywords, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedKeywords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, airport.FieldKeywords, value)
		})
	}
	if au.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.RegionTable,
			Columns: []string{airport.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: region.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.RegionTable,
			Columns: []string{airport.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: region.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.CountryTable,
			Columns: []string{airport.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: country.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.CountryTable,
			Columns: []string{airport.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: country.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RunwaysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.RunwaysTable,
			Columns: []string{airport.RunwaysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: runway.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRunwaysIDs(); len(nodes) > 0 && !au.mutation.RunwaysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.RunwaysTable,
			Columns: []string{airport.RunwaysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: runway.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RunwaysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.RunwaysTable,
			Columns: []string{airport.RunwaysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: runway.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.FrequenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.FrequenciesTable,
			Columns: []string{airport.FrequenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: frequency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedFrequenciesIDs(); len(nodes) > 0 && !au.mutation.FrequenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.FrequenciesTable,
			Columns: []string{airport.FrequenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: frequency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.FrequenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.FrequenciesTable,
			Columns: []string{airport.FrequenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: frequency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   airport.StationTable,
			Columns: []string{airport.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: weatherstation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   airport.StationTable,
			Columns: []string{airport.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: weatherstation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{airport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AirportUpdateOne is the builder for updating a single Airport entity.
type AirportUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AirportMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetImportID sets the "import_id" field.
func (auo *AirportUpdateOne) SetImportID(i int) *AirportUpdateOne {
	auo.mutation.ResetImportID()
	auo.mutation.SetImportID(i)
	return auo
}

// AddImportID adds i to the "import_id" field.
func (auo *AirportUpdateOne) AddImportID(i int) *AirportUpdateOne {
	auo.mutation.AddImportID(i)
	return auo
}

// SetHash sets the "hash" field.
func (auo *AirportUpdateOne) SetHash(s string) *AirportUpdateOne {
	auo.mutation.SetHash(s)
	return auo
}

// SetImportFlag sets the "import_flag" field.
func (auo *AirportUpdateOne) SetImportFlag(b bool) *AirportUpdateOne {
	auo.mutation.SetImportFlag(b)
	return auo
}

// SetNillableImportFlag sets the "import_flag" field if the given value is not nil.
func (auo *AirportUpdateOne) SetNillableImportFlag(b *bool) *AirportUpdateOne {
	if b != nil {
		auo.SetImportFlag(*b)
	}
	return auo
}

// SetLastUpdated sets the "last_updated" field.
func (auo *AirportUpdateOne) SetLastUpdated(t time.Time) *AirportUpdateOne {
	auo.mutation.SetLastUpdated(t)
	return auo
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (auo *AirportUpdateOne) SetNillableLastUpdated(t *time.Time) *AirportUpdateOne {
	if t != nil {
		auo.SetLastUpdated(*t)
	}
	return auo
}

// SetIcaoCode sets the "icao_code" field.
func (auo *AirportUpdateOne) SetIcaoCode(s string) *AirportUpdateOne {
	auo.mutation.SetIcaoCode(s)
	return auo
}

// SetNillableIcaoCode sets the "icao_code" field if the given value is not nil.
func (auo *AirportUpdateOne) SetNillableIcaoCode(s *string) *AirportUpdateOne {
	if s != nil {
		auo.SetIcaoCode(*s)
	}
	return auo
}

// ClearIcaoCode clears the value of the "icao_code" field.
func (auo *AirportUpdateOne) ClearIcaoCode() *AirportUpdateOne {
	auo.mutation.ClearIcaoCode()
	return auo
}

// SetIataCode sets the "iata_code" field.
func (auo *AirportUpdateOne) SetIataCode(s string) *AirportUpdateOne {
	auo.mutation.SetIataCode(s)
	return auo
}

// SetNillableIataCode sets the "iata_code" field if the given value is not nil.
func (auo *AirportUpdateOne) SetNillableIataCode(s *string) *AirportUpdateOne {
	if s != nil {
		auo.SetIataCode(*s)
	}
	return auo
}

// ClearIataCode clears the value of the "iata_code" field.
func (auo *AirportUpdateOne) ClearIataCode() *AirportUpdateOne {
	auo.mutation.ClearIataCode()
	return auo
}

// SetIdentifier sets the "identifier" field.
func (auo *AirportUpdateOne) SetIdentifier(s string) *AirportUpdateOne {
	auo.mutation.SetIdentifier(s)
	return auo
}

// SetType sets the "type" field.
func (auo *AirportUpdateOne) SetType(a airport.Type) *AirportUpdateOne {
	auo.mutation.SetType(a)
	return auo
}

// SetImportance sets the "importance" field.
func (auo *AirportUpdateOne) SetImportance(i int) *AirportUpdateOne {
	auo.mutation.ResetImportance()
	auo.mutation.SetImportance(i)
	return auo
}

// SetNillableImportance sets the "importance" field if the given value is not nil.
func (auo *AirportUpdateOne) SetNillableImportance(i *int) *AirportUpdateOne {
	if i != nil {
		auo.SetImportance(*i)
	}
	return auo
}

// AddImportance adds i to the "importance" field.
func (auo *AirportUpdateOne) AddImportance(i int) *AirportUpdateOne {
	auo.mutation.AddImportance(i)
	return auo
}

// SetName sets the "name" field.
func (auo *AirportUpdateOne) SetName(s string) *AirportUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetLatitude sets the "latitude" field.
func (auo *AirportUpdateOne) SetLatitude(f float64) *AirportUpdateOne {
	auo.mutation.ResetLatitude()
	auo.mutation.SetLatitude(f)
	return auo
}

// AddLatitude adds f to the "latitude" field.
func (auo *AirportUpdateOne) AddLatitude(f float64) *AirportUpdateOne {
	auo.mutation.AddLatitude(f)
	return auo
}

// SetLongitude sets the "longitude" field.
func (auo *AirportUpdateOne) SetLongitude(f float64) *AirportUpdateOne {
	auo.mutation.ResetLongitude()
	auo.mutation.SetLongitude(f)
	return auo
}

// AddLongitude adds f to the "longitude" field.
func (auo *AirportUpdateOne) AddLongitude(f float64) *AirportUpdateOne {
	auo.mutation.AddLongitude(f)
	return auo
}

// SetTimezone sets the "timezone" field.
func (auo *AirportUpdateOne) SetTimezone(s string) *AirportUpdateOne {
	auo.mutation.SetTimezone(s)
	return auo
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (auo *AirportUpdateOne) SetNillableTimezone(s *string) *AirportUpdateOne {
	if s != nil {
		auo.SetTimezone(*s)
	}
	return auo
}

// ClearTimezone clears the value of the "timezone" field.
func (auo *AirportUpdateOne) ClearTimezone() *AirportUpdateOne {
	auo.mutation.ClearTimezone()
	return auo
}

// SetElevation sets the "elevation" field.
func (auo *AirportUpdateOne) SetElevation(i int) *AirportUpdateOne {
	auo.mutation.ResetElevation()
	auo.mutation.SetElevation(i)
	return auo
}

// SetNillableElevation sets the "elevation" field if the given value is not nil.
func (auo *AirportUpdateOne) SetNillableElevation(i *int) *AirportUpdateOne {
	if i != nil {
		auo.SetElevation(*i)
	}
	return auo
}

// AddElevation adds i to the "elevation" field.
func (auo *AirportUpdateOne) AddElevation(i int) *AirportUpdateOne {
	auo.mutation.AddElevation(i)
	return auo
}

// ClearElevation clears the value of the "elevation" field.
func (auo *AirportUpdateOne) ClearElevation() *AirportUpdateOne {
	auo.mutation.ClearElevation()
	return auo
}

// SetMunicipality sets the "municipality" field.
func (auo *AirportUpdateOne) SetMunicipality(s string) *AirportUpdateOne {
	auo.mutation.SetMunicipality(s)
	return auo
}

// SetNillableMunicipality sets the "municipality" field if the given value is not nil.
func (auo *AirportUpdateOne) SetNillableMunicipality(s *string) *AirportUpdateOne {
	if s != nil {
		auo.SetMunicipality(*s)
	}
	return auo
}

// ClearMunicipality clears the value of the "municipality" field.
func (auo *AirportUpdateOne) ClearMunicipality() *AirportUpdateOne {
	auo.mutation.ClearMunicipality()
	return auo
}

// SetScheduledService sets the "scheduled_service" field.
func (auo *AirportUpdateOne) SetScheduledService(b bool) *AirportUpdateOne {
	auo.mutation.SetScheduledService(b)
	return auo
}

// SetGpsCode sets the "gps_code" field.
func (auo *AirportUpdateOne) SetGpsCode(s string) *AirportUpdateOne {
	auo.mutation.SetGpsCode(s)
	return auo
}

// SetNillableGpsCode sets the "gps_code" field if the given value is not nil.
func (auo *AirportUpdateOne) SetNillableGpsCode(s *string) *AirportUpdateOne {
	if s != nil {
		auo.SetGpsCode(*s)
	}
	return auo
}

// ClearGpsCode clears the value of the "gps_code" field.
func (auo *AirportUpdateOne) ClearGpsCode() *AirportUpdateOne {
	auo.mutation.ClearGpsCode()
	return auo
}

// SetLocalCode sets the "local_code" field.
func (auo *AirportUpdateOne) SetLocalCode(s string) *AirportUpdateOne {
	auo.mutation.SetLocalCode(s)
	return auo
}

// SetNillableLocalCode sets the "local_code" field if the given value is not nil.
func (auo *AirportUpdateOne) SetNillableLocalCode(s *string) *AirportUpdateOne {
	if s != nil {
		auo.SetLocalCode(*s)
	}
	return auo
}

// ClearLocalCode clears the value of the "local_code" field.
func (auo *AirportUpdateOne) ClearLocalCode() *AirportUpdateOne {
	auo.mutation.ClearLocalCode()
	return auo
}

// SetWebsite sets the "website" field.
func (auo *AirportUpdateOne) SetWebsite(s string) *AirportUpdateOne {
	auo.mutation.SetWebsite(s)
	return auo
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (auo *AirportUpdateOne) SetNillableWebsite(s *string) *AirportUpdateOne {
	if s != nil {
		auo.SetWebsite(*s)
	}
	return auo
}

// ClearWebsite clears the value of the "website" field.
func (auo *AirportUpdateOne) ClearWebsite() *AirportUpdateOne {
	auo.mutation.ClearWebsite()
	return auo
}

// SetWikipedia sets the "wikipedia" field.
func (auo *AirportUpdateOne) SetWikipedia(s string) *AirportUpdateOne {
	auo.mutation.SetWikipedia(s)
	return auo
}

// SetNillableWikipedia sets the "wikipedia" field if the given value is not nil.
func (auo *AirportUpdateOne) SetNillableWikipedia(s *string) *AirportUpdateOne {
	if s != nil {
		auo.SetWikipedia(*s)
	}
	return auo
}

// ClearWikipedia clears the value of the "wikipedia" field.
func (auo *AirportUpdateOne) ClearWikipedia() *AirportUpdateOne {
	auo.mutation.ClearWikipedia()
	return auo
}

// SetKeywords sets the "keywords" field.
func (auo *AirportUpdateOne) SetKeywords(s []string) *AirportUpdateOne {
	auo.mutation.SetKeywords(s)
	return auo
}

// AppendKeywords appends s to the "keywords" field.
func (auo *AirportUpdateOne) AppendKeywords(s []string) *AirportUpdateOne {
	auo.mutation.AppendKeywords(s)
	return auo
}

// SetRegionID sets the "region" edge to the Region entity by ID.
func (auo *AirportUpdateOne) SetRegionID(id uuid.UUID) *AirportUpdateOne {
	auo.mutation.SetRegionID(id)
	return auo
}

// SetNillableRegionID sets the "region" edge to the Region entity by ID if the given value is not nil.
func (auo *AirportUpdateOne) SetNillableRegionID(id *uuid.UUID) *AirportUpdateOne {
	if id != nil {
		auo = auo.SetRegionID(*id)
	}
	return auo
}

// SetRegion sets the "region" edge to the Region entity.
func (auo *AirportUpdateOne) SetRegion(r *Region) *AirportUpdateOne {
	return auo.SetRegionID(r.ID)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (auo *AirportUpdateOne) SetCountryID(id uuid.UUID) *AirportUpdateOne {
	auo.mutation.SetCountryID(id)
	return auo
}

// SetNillableCountryID sets the "country" edge to the Country entity by ID if the given value is not nil.
func (auo *AirportUpdateOne) SetNillableCountryID(id *uuid.UUID) *AirportUpdateOne {
	if id != nil {
		auo = auo.SetCountryID(*id)
	}
	return auo
}

// SetCountry sets the "country" edge to the Country entity.
func (auo *AirportUpdateOne) SetCountry(c *Country) *AirportUpdateOne {
	return auo.SetCountryID(c.ID)
}

// AddRunwayIDs adds the "runways" edge to the Runway entity by IDs.
func (auo *AirportUpdateOne) AddRunwayIDs(ids ...uuid.UUID) *AirportUpdateOne {
	auo.mutation.AddRunwayIDs(ids...)
	return auo
}

// AddRunways adds the "runways" edges to the Runway entity.
func (auo *AirportUpdateOne) AddRunways(r ...*Runway) *AirportUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRunwayIDs(ids...)
}

// AddFrequencyIDs adds the "frequencies" edge to the Frequency entity by IDs.
func (auo *AirportUpdateOne) AddFrequencyIDs(ids ...uuid.UUID) *AirportUpdateOne {
	auo.mutation.AddFrequencyIDs(ids...)
	return auo
}

// AddFrequencies adds the "frequencies" edges to the Frequency entity.
func (auo *AirportUpdateOne) AddFrequencies(f ...*Frequency) *AirportUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return auo.AddFrequencyIDs(ids...)
}

// SetStationID sets the "station" edge to the WeatherStation entity by ID.
func (auo *AirportUpdateOne) SetStationID(id uuid.UUID) *AirportUpdateOne {
	auo.mutation.SetStationID(id)
	return auo
}

// SetNillableStationID sets the "station" edge to the WeatherStation entity by ID if the given value is not nil.
func (auo *AirportUpdateOne) SetNillableStationID(id *uuid.UUID) *AirportUpdateOne {
	if id != nil {
		auo = auo.SetStationID(*id)
	}
	return auo
}

// SetStation sets the "station" edge to the WeatherStation entity.
func (auo *AirportUpdateOne) SetStation(w *WeatherStation) *AirportUpdateOne {
	return auo.SetStationID(w.ID)
}

// Mutation returns the AirportMutation object of the builder.
func (auo *AirportUpdateOne) Mutation() *AirportMutation {
	return auo.mutation
}

// ClearRegion clears the "region" edge to the Region entity.
func (auo *AirportUpdateOne) ClearRegion() *AirportUpdateOne {
	auo.mutation.ClearRegion()
	return auo
}

// ClearCountry clears the "country" edge to the Country entity.
func (auo *AirportUpdateOne) ClearCountry() *AirportUpdateOne {
	auo.mutation.ClearCountry()
	return auo
}

// ClearRunways clears all "runways" edges to the Runway entity.
func (auo *AirportUpdateOne) ClearRunways() *AirportUpdateOne {
	auo.mutation.ClearRunways()
	return auo
}

// RemoveRunwayIDs removes the "runways" edge to Runway entities by IDs.
func (auo *AirportUpdateOne) RemoveRunwayIDs(ids ...uuid.UUID) *AirportUpdateOne {
	auo.mutation.RemoveRunwayIDs(ids...)
	return auo
}

// RemoveRunways removes "runways" edges to Runway entities.
func (auo *AirportUpdateOne) RemoveRunways(r ...*Runway) *AirportUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRunwayIDs(ids...)
}

// ClearFrequencies clears all "frequencies" edges to the Frequency entity.
func (auo *AirportUpdateOne) ClearFrequencies() *AirportUpdateOne {
	auo.mutation.ClearFrequencies()
	return auo
}

// RemoveFrequencyIDs removes the "frequencies" edge to Frequency entities by IDs.
func (auo *AirportUpdateOne) RemoveFrequencyIDs(ids ...uuid.UUID) *AirportUpdateOne {
	auo.mutation.RemoveFrequencyIDs(ids...)
	return auo
}

// RemoveFrequencies removes "frequencies" edges to Frequency entities.
func (auo *AirportUpdateOne) RemoveFrequencies(f ...*Frequency) *AirportUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return auo.RemoveFrequencyIDs(ids...)
}

// ClearStation clears the "station" edge to the WeatherStation entity.
func (auo *AirportUpdateOne) ClearStation() *AirportUpdateOne {
	auo.mutation.ClearStation()
	return auo
}

// Where appends a list predicates to the AirportUpdate builder.
func (auo *AirportUpdateOne) Where(ps ...predicate.Airport) *AirportUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AirportUpdateOne) Select(field string, fields ...string) *AirportUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Airport entity.
func (auo *AirportUpdateOne) Save(ctx context.Context) (*Airport, error) {
	return withHooks[*Airport, AirportMutation](ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AirportUpdateOne) SaveX(ctx context.Context) *Airport {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AirportUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AirportUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AirportUpdateOne) check() error {
	if v, ok := auo.mutation.IcaoCode(); ok {
		if err := airport.IcaoCodeValidator(v); err != nil {
			return &ValidationError{Name: "icao_code", err: fmt.Errorf(`ent: validator failed for field "Airport.icao_code": %w`, err)}
		}
	}
	if v, ok := auo.mutation.GetType(); ok {
		if err := airport.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Airport.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AirportUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AirportUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AirportUpdateOne) sqlSave(ctx context.Context) (_node *Airport, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(airport.Table, airport.Columns, sqlgraph.NewFieldSpec(airport.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Airport.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, airport.FieldID)
		for _, f := range fields {
			if !airport.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != airport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.ImportID(); ok {
		_spec.SetField(airport.FieldImportID, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedImportID(); ok {
		_spec.AddField(airport.FieldImportID, field.TypeInt, value)
	}
	if value, ok := auo.mutation.Hash(); ok {
		_spec.SetField(airport.FieldHash, field.TypeString, value)
	}
	if value, ok := auo.mutation.ImportFlag(); ok {
		_spec.SetField(airport.FieldImportFlag, field.TypeBool, value)
	}
	if value, ok := auo.mutation.LastUpdated(); ok {
		_spec.SetField(airport.FieldLastUpdated, field.TypeTime, value)
	}
	if value, ok := auo.mutation.IcaoCode(); ok {
		_spec.SetField(airport.FieldIcaoCode, field.TypeString, value)
	}
	if auo.mutation.IcaoCodeCleared() {
		_spec.ClearField(airport.FieldIcaoCode, field.TypeString)
	}
	if value, ok := auo.mutation.IataCode(); ok {
		_spec.SetField(airport.FieldIataCode, field.TypeString, value)
	}
	if auo.mutation.IataCodeCleared() {
		_spec.ClearField(airport.FieldIataCode, field.TypeString)
	}
	if value, ok := auo.mutation.Identifier(); ok {
		_spec.SetField(airport.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.SetField(airport.FieldType, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.Importance(); ok {
		_spec.SetField(airport.FieldImportance, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedImportance(); ok {
		_spec.AddField(airport.FieldImportance, field.TypeInt, value)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(airport.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Latitude(); ok {
		_spec.SetField(airport.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedLatitude(); ok {
		_spec.AddField(airport.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.Longitude(); ok {
		_spec.SetField(airport.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedLongitude(); ok {
		_spec.AddField(airport.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.Timezone(); ok {
		_spec.SetField(airport.FieldTimezone, field.TypeString, value)
	}
	if auo.mutation.TimezoneCleared() {
		_spec.ClearField(airport.FieldTimezone, field.TypeString)
	}
	if value, ok := auo.mutation.Elevation(); ok {
		_spec.SetField(airport.FieldElevation, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedElevation(); ok {
		_spec.AddField(airport.FieldElevation, field.TypeInt, value)
	}
	if auo.mutation.ElevationCleared() {
		_spec.ClearField(airport.FieldElevation, field.TypeInt)
	}
	if value, ok := auo.mutation.Municipality(); ok {
		_spec.SetField(airport.FieldMunicipality, field.TypeString, value)
	}
	if auo.mutation.MunicipalityCleared() {
		_spec.ClearField(airport.FieldMunicipality, field.TypeString)
	}
	if value, ok := auo.mutation.ScheduledService(); ok {
		_spec.SetField(airport.FieldScheduledService, field.TypeBool, value)
	}
	if value, ok := auo.mutation.GpsCode(); ok {
		_spec.SetField(airport.FieldGpsCode, field.TypeString, value)
	}
	if auo.mutation.GpsCodeCleared() {
		_spec.ClearField(airport.FieldGpsCode, field.TypeString)
	}
	if value, ok := auo.mutation.LocalCode(); ok {
		_spec.SetField(airport.FieldLocalCode, field.TypeString, value)
	}
	if auo.mutation.LocalCodeCleared() {
		_spec.ClearField(airport.FieldLocalCode, field.TypeString)
	}
	if value, ok := auo.mutation.Website(); ok {
		_spec.SetField(airport.FieldWebsite, field.TypeString, value)
	}
	if auo.mutation.WebsiteCleared() {
		_spec.ClearField(airport.FieldWebsite, field.TypeString)
	}
	if value, ok := auo.mutation.Wikipedia(); ok {
		_spec.SetField(airport.FieldWikipedia, field.TypeString, value)
	}
	if auo.mutation.WikipediaCleared() {
		_spec.ClearField(airport.FieldWikipedia, field.TypeString)
	}
	if value, ok := auo.mutation.Keywords(); ok {
		_spec.SetField(airport.FieldKeywords, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedKeywords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, airport.FieldKeywords, value)
		})
	}
	if auo.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.RegionTable,
			Columns: []string{airport.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: region.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.RegionTable,
			Columns: []string{airport.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: region.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.CountryTable,
			Columns: []string{airport.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: country.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.CountryTable,
			Columns: []string{airport.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: country.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RunwaysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.RunwaysTable,
			Columns: []string{airport.RunwaysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: runway.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRunwaysIDs(); len(nodes) > 0 && !auo.mutation.RunwaysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.RunwaysTable,
			Columns: []string{airport.RunwaysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: runway.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RunwaysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.RunwaysTable,
			Columns: []string{airport.RunwaysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: runway.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.FrequenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.FrequenciesTable,
			Columns: []string{airport.FrequenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: frequency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedFrequenciesIDs(); len(nodes) > 0 && !auo.mutation.FrequenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.FrequenciesTable,
			Columns: []string{airport.FrequenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: frequency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.FrequenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.FrequenciesTable,
			Columns: []string{airport.FrequenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: frequency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   airport.StationTable,
			Columns: []string{airport.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: weatherstation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   airport.StationTable,
			Columns: []string{airport.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: weatherstation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &Airport{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{airport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
