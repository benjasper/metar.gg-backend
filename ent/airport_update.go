// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"metar.gg/ent/airport"
	"metar.gg/ent/predicate"
	"metar.gg/ent/runway"
)

// AirportUpdate is the builder for updating Airport entities.
type AirportUpdate struct {
	config
	hooks    []Hook
	mutation *AirportMutation
}

// Where appends a list predicates to the AirportUpdate builder.
func (au *AirportUpdate) Where(ps ...predicate.Airport) *AirportUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetHash sets the "hash" field.
func (au *AirportUpdate) SetHash(u uint64) *AirportUpdate {
	au.mutation.ResetHash()
	au.mutation.SetHash(u)
	return au
}

// AddHash adds u to the "hash" field.
func (au *AirportUpdate) AddHash(u int64) *AirportUpdate {
	au.mutation.AddHash(u)
	return au
}

// SetImportFlag sets the "import_flag" field.
func (au *AirportUpdate) SetImportFlag(b bool) *AirportUpdate {
	au.mutation.SetImportFlag(b)
	return au
}

// SetNillableImportFlag sets the "import_flag" field if the given value is not nil.
func (au *AirportUpdate) SetNillableImportFlag(b *bool) *AirportUpdate {
	if b != nil {
		au.SetImportFlag(*b)
	}
	return au
}

// SetUpdateTime sets the "update_time" field.
func (au *AirportUpdate) SetUpdateTime(t time.Time) *AirportUpdate {
	au.mutation.SetUpdateTime(t)
	return au
}

// SetIdentifier sets the "identifier" field.
func (au *AirportUpdate) SetIdentifier(s string) *AirportUpdate {
	au.mutation.SetIdentifier(s)
	return au
}

// SetType sets the "type" field.
func (au *AirportUpdate) SetType(s string) *AirportUpdate {
	au.mutation.SetType(s)
	return au
}

// SetName sets the "name" field.
func (au *AirportUpdate) SetName(s string) *AirportUpdate {
	au.mutation.SetName(s)
	return au
}

// SetLatitude sets the "latitude" field.
func (au *AirportUpdate) SetLatitude(f float64) *AirportUpdate {
	au.mutation.ResetLatitude()
	au.mutation.SetLatitude(f)
	return au
}

// AddLatitude adds f to the "latitude" field.
func (au *AirportUpdate) AddLatitude(f float64) *AirportUpdate {
	au.mutation.AddLatitude(f)
	return au
}

// SetLongitude sets the "longitude" field.
func (au *AirportUpdate) SetLongitude(f float64) *AirportUpdate {
	au.mutation.ResetLongitude()
	au.mutation.SetLongitude(f)
	return au
}

// AddLongitude adds f to the "longitude" field.
func (au *AirportUpdate) AddLongitude(f float64) *AirportUpdate {
	au.mutation.AddLongitude(f)
	return au
}

// SetElevation sets the "elevation" field.
func (au *AirportUpdate) SetElevation(i int) *AirportUpdate {
	au.mutation.ResetElevation()
	au.mutation.SetElevation(i)
	return au
}

// AddElevation adds i to the "elevation" field.
func (au *AirportUpdate) AddElevation(i int) *AirportUpdate {
	au.mutation.AddElevation(i)
	return au
}

// SetContinent sets the "continent" field.
func (au *AirportUpdate) SetContinent(s string) *AirportUpdate {
	au.mutation.SetContinent(s)
	return au
}

// SetCountry sets the "country" field.
func (au *AirportUpdate) SetCountry(s string) *AirportUpdate {
	au.mutation.SetCountry(s)
	return au
}

// SetRegion sets the "region" field.
func (au *AirportUpdate) SetRegion(s string) *AirportUpdate {
	au.mutation.SetRegion(s)
	return au
}

// SetMunicipality sets the "municipality" field.
func (au *AirportUpdate) SetMunicipality(s string) *AirportUpdate {
	au.mutation.SetMunicipality(s)
	return au
}

// SetScheduledService sets the "scheduled_service" field.
func (au *AirportUpdate) SetScheduledService(b bool) *AirportUpdate {
	au.mutation.SetScheduledService(b)
	return au
}

// SetGpsCode sets the "gps_code" field.
func (au *AirportUpdate) SetGpsCode(s string) *AirportUpdate {
	au.mutation.SetGpsCode(s)
	return au
}

// SetIataCode sets the "iata_code" field.
func (au *AirportUpdate) SetIataCode(s string) *AirportUpdate {
	au.mutation.SetIataCode(s)
	return au
}

// SetLocalCode sets the "local_code" field.
func (au *AirportUpdate) SetLocalCode(s string) *AirportUpdate {
	au.mutation.SetLocalCode(s)
	return au
}

// SetWebsite sets the "website" field.
func (au *AirportUpdate) SetWebsite(s string) *AirportUpdate {
	au.mutation.SetWebsite(s)
	return au
}

// SetWikipedia sets the "wikipedia" field.
func (au *AirportUpdate) SetWikipedia(s string) *AirportUpdate {
	au.mutation.SetWikipedia(s)
	return au
}

// SetKeywords sets the "keywords" field.
func (au *AirportUpdate) SetKeywords(s []string) *AirportUpdate {
	au.mutation.SetKeywords(s)
	return au
}

// AddRunwayIDs adds the "runways" edge to the Runway entity by IDs.
func (au *AirportUpdate) AddRunwayIDs(ids ...int) *AirportUpdate {
	au.mutation.AddRunwayIDs(ids...)
	return au
}

// AddRunways adds the "runways" edges to the Runway entity.
func (au *AirportUpdate) AddRunways(r ...*Runway) *AirportUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRunwayIDs(ids...)
}

// Mutation returns the AirportMutation object of the builder.
func (au *AirportUpdate) Mutation() *AirportMutation {
	return au.mutation
}

// ClearRunways clears all "runways" edges to the Runway entity.
func (au *AirportUpdate) ClearRunways() *AirportUpdate {
	au.mutation.ClearRunways()
	return au
}

// RemoveRunwayIDs removes the "runways" edge to Runway entities by IDs.
func (au *AirportUpdate) RemoveRunwayIDs(ids ...int) *AirportUpdate {
	au.mutation.RemoveRunwayIDs(ids...)
	return au
}

// RemoveRunways removes "runways" edges to Runway entities.
func (au *AirportUpdate) RemoveRunways(r ...*Runway) *AirportUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRunwayIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AirportUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AirportMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AirportUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AirportUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AirportUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AirportUpdate) defaults() {
	if _, ok := au.mutation.UpdateTime(); !ok {
		v := airport.UpdateDefaultUpdateTime()
		au.mutation.SetUpdateTime(v)
	}
}

func (au *AirportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   airport.Table,
			Columns: airport.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: airport.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Hash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: airport.FieldHash,
		})
	}
	if value, ok := au.mutation.AddedHash(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: airport.FieldHash,
		})
	}
	if value, ok := au.mutation.ImportFlag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: airport.FieldImportFlag,
		})
	}
	if value, ok := au.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: airport.FieldUpdateTime,
		})
	}
	if value, ok := au.mutation.Identifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldIdentifier,
		})
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldType,
		})
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldName,
		})
	}
	if value, ok := au.mutation.Latitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: airport.FieldLatitude,
		})
	}
	if value, ok := au.mutation.AddedLatitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: airport.FieldLatitude,
		})
	}
	if value, ok := au.mutation.Longitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: airport.FieldLongitude,
		})
	}
	if value, ok := au.mutation.AddedLongitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: airport.FieldLongitude,
		})
	}
	if value, ok := au.mutation.Elevation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: airport.FieldElevation,
		})
	}
	if value, ok := au.mutation.AddedElevation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: airport.FieldElevation,
		})
	}
	if value, ok := au.mutation.Continent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldContinent,
		})
	}
	if value, ok := au.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldCountry,
		})
	}
	if value, ok := au.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldRegion,
		})
	}
	if value, ok := au.mutation.Municipality(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldMunicipality,
		})
	}
	if value, ok := au.mutation.ScheduledService(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: airport.FieldScheduledService,
		})
	}
	if value, ok := au.mutation.GpsCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldGpsCode,
		})
	}
	if value, ok := au.mutation.IataCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldIataCode,
		})
	}
	if value, ok := au.mutation.LocalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldLocalCode,
		})
	}
	if value, ok := au.mutation.Website(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldWebsite,
		})
	}
	if value, ok := au.mutation.Wikipedia(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldWikipedia,
		})
	}
	if value, ok := au.mutation.Keywords(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: airport.FieldKeywords,
		})
	}
	if au.mutation.RunwaysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.RunwaysTable,
			Columns: []string{airport.RunwaysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: runway.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRunwaysIDs(); len(nodes) > 0 && !au.mutation.RunwaysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.RunwaysTable,
			Columns: []string{airport.RunwaysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: runway.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RunwaysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.RunwaysTable,
			Columns: []string{airport.RunwaysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: runway.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{airport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AirportUpdateOne is the builder for updating a single Airport entity.
type AirportUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AirportMutation
}

// SetHash sets the "hash" field.
func (auo *AirportUpdateOne) SetHash(u uint64) *AirportUpdateOne {
	auo.mutation.ResetHash()
	auo.mutation.SetHash(u)
	return auo
}

// AddHash adds u to the "hash" field.
func (auo *AirportUpdateOne) AddHash(u int64) *AirportUpdateOne {
	auo.mutation.AddHash(u)
	return auo
}

// SetImportFlag sets the "import_flag" field.
func (auo *AirportUpdateOne) SetImportFlag(b bool) *AirportUpdateOne {
	auo.mutation.SetImportFlag(b)
	return auo
}

// SetNillableImportFlag sets the "import_flag" field if the given value is not nil.
func (auo *AirportUpdateOne) SetNillableImportFlag(b *bool) *AirportUpdateOne {
	if b != nil {
		auo.SetImportFlag(*b)
	}
	return auo
}

// SetUpdateTime sets the "update_time" field.
func (auo *AirportUpdateOne) SetUpdateTime(t time.Time) *AirportUpdateOne {
	auo.mutation.SetUpdateTime(t)
	return auo
}

// SetIdentifier sets the "identifier" field.
func (auo *AirportUpdateOne) SetIdentifier(s string) *AirportUpdateOne {
	auo.mutation.SetIdentifier(s)
	return auo
}

// SetType sets the "type" field.
func (auo *AirportUpdateOne) SetType(s string) *AirportUpdateOne {
	auo.mutation.SetType(s)
	return auo
}

// SetName sets the "name" field.
func (auo *AirportUpdateOne) SetName(s string) *AirportUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetLatitude sets the "latitude" field.
func (auo *AirportUpdateOne) SetLatitude(f float64) *AirportUpdateOne {
	auo.mutation.ResetLatitude()
	auo.mutation.SetLatitude(f)
	return auo
}

// AddLatitude adds f to the "latitude" field.
func (auo *AirportUpdateOne) AddLatitude(f float64) *AirportUpdateOne {
	auo.mutation.AddLatitude(f)
	return auo
}

// SetLongitude sets the "longitude" field.
func (auo *AirportUpdateOne) SetLongitude(f float64) *AirportUpdateOne {
	auo.mutation.ResetLongitude()
	auo.mutation.SetLongitude(f)
	return auo
}

// AddLongitude adds f to the "longitude" field.
func (auo *AirportUpdateOne) AddLongitude(f float64) *AirportUpdateOne {
	auo.mutation.AddLongitude(f)
	return auo
}

// SetElevation sets the "elevation" field.
func (auo *AirportUpdateOne) SetElevation(i int) *AirportUpdateOne {
	auo.mutation.ResetElevation()
	auo.mutation.SetElevation(i)
	return auo
}

// AddElevation adds i to the "elevation" field.
func (auo *AirportUpdateOne) AddElevation(i int) *AirportUpdateOne {
	auo.mutation.AddElevation(i)
	return auo
}

// SetContinent sets the "continent" field.
func (auo *AirportUpdateOne) SetContinent(s string) *AirportUpdateOne {
	auo.mutation.SetContinent(s)
	return auo
}

// SetCountry sets the "country" field.
func (auo *AirportUpdateOne) SetCountry(s string) *AirportUpdateOne {
	auo.mutation.SetCountry(s)
	return auo
}

// SetRegion sets the "region" field.
func (auo *AirportUpdateOne) SetRegion(s string) *AirportUpdateOne {
	auo.mutation.SetRegion(s)
	return auo
}

// SetMunicipality sets the "municipality" field.
func (auo *AirportUpdateOne) SetMunicipality(s string) *AirportUpdateOne {
	auo.mutation.SetMunicipality(s)
	return auo
}

// SetScheduledService sets the "scheduled_service" field.
func (auo *AirportUpdateOne) SetScheduledService(b bool) *AirportUpdateOne {
	auo.mutation.SetScheduledService(b)
	return auo
}

// SetGpsCode sets the "gps_code" field.
func (auo *AirportUpdateOne) SetGpsCode(s string) *AirportUpdateOne {
	auo.mutation.SetGpsCode(s)
	return auo
}

// SetIataCode sets the "iata_code" field.
func (auo *AirportUpdateOne) SetIataCode(s string) *AirportUpdateOne {
	auo.mutation.SetIataCode(s)
	return auo
}

// SetLocalCode sets the "local_code" field.
func (auo *AirportUpdateOne) SetLocalCode(s string) *AirportUpdateOne {
	auo.mutation.SetLocalCode(s)
	return auo
}

// SetWebsite sets the "website" field.
func (auo *AirportUpdateOne) SetWebsite(s string) *AirportUpdateOne {
	auo.mutation.SetWebsite(s)
	return auo
}

// SetWikipedia sets the "wikipedia" field.
func (auo *AirportUpdateOne) SetWikipedia(s string) *AirportUpdateOne {
	auo.mutation.SetWikipedia(s)
	return auo
}

// SetKeywords sets the "keywords" field.
func (auo *AirportUpdateOne) SetKeywords(s []string) *AirportUpdateOne {
	auo.mutation.SetKeywords(s)
	return auo
}

// AddRunwayIDs adds the "runways" edge to the Runway entity by IDs.
func (auo *AirportUpdateOne) AddRunwayIDs(ids ...int) *AirportUpdateOne {
	auo.mutation.AddRunwayIDs(ids...)
	return auo
}

// AddRunways adds the "runways" edges to the Runway entity.
func (auo *AirportUpdateOne) AddRunways(r ...*Runway) *AirportUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRunwayIDs(ids...)
}

// Mutation returns the AirportMutation object of the builder.
func (auo *AirportUpdateOne) Mutation() *AirportMutation {
	return auo.mutation
}

// ClearRunways clears all "runways" edges to the Runway entity.
func (auo *AirportUpdateOne) ClearRunways() *AirportUpdateOne {
	auo.mutation.ClearRunways()
	return auo
}

// RemoveRunwayIDs removes the "runways" edge to Runway entities by IDs.
func (auo *AirportUpdateOne) RemoveRunwayIDs(ids ...int) *AirportUpdateOne {
	auo.mutation.RemoveRunwayIDs(ids...)
	return auo
}

// RemoveRunways removes "runways" edges to Runway entities.
func (auo *AirportUpdateOne) RemoveRunways(r ...*Runway) *AirportUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRunwayIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AirportUpdateOne) Select(field string, fields ...string) *AirportUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Airport entity.
func (auo *AirportUpdateOne) Save(ctx context.Context) (*Airport, error) {
	var (
		err  error
		node *Airport
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AirportMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, auo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Airport)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AirportMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AirportUpdateOne) SaveX(ctx context.Context) *Airport {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AirportUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AirportUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AirportUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdateTime(); !ok {
		v := airport.UpdateDefaultUpdateTime()
		auo.mutation.SetUpdateTime(v)
	}
}

func (auo *AirportUpdateOne) sqlSave(ctx context.Context) (_node *Airport, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   airport.Table,
			Columns: airport.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: airport.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Airport.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, airport.FieldID)
		for _, f := range fields {
			if !airport.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != airport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Hash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: airport.FieldHash,
		})
	}
	if value, ok := auo.mutation.AddedHash(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: airport.FieldHash,
		})
	}
	if value, ok := auo.mutation.ImportFlag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: airport.FieldImportFlag,
		})
	}
	if value, ok := auo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: airport.FieldUpdateTime,
		})
	}
	if value, ok := auo.mutation.Identifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldIdentifier,
		})
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldType,
		})
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldName,
		})
	}
	if value, ok := auo.mutation.Latitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: airport.FieldLatitude,
		})
	}
	if value, ok := auo.mutation.AddedLatitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: airport.FieldLatitude,
		})
	}
	if value, ok := auo.mutation.Longitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: airport.FieldLongitude,
		})
	}
	if value, ok := auo.mutation.AddedLongitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: airport.FieldLongitude,
		})
	}
	if value, ok := auo.mutation.Elevation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: airport.FieldElevation,
		})
	}
	if value, ok := auo.mutation.AddedElevation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: airport.FieldElevation,
		})
	}
	if value, ok := auo.mutation.Continent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldContinent,
		})
	}
	if value, ok := auo.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldCountry,
		})
	}
	if value, ok := auo.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldRegion,
		})
	}
	if value, ok := auo.mutation.Municipality(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldMunicipality,
		})
	}
	if value, ok := auo.mutation.ScheduledService(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: airport.FieldScheduledService,
		})
	}
	if value, ok := auo.mutation.GpsCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldGpsCode,
		})
	}
	if value, ok := auo.mutation.IataCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldIataCode,
		})
	}
	if value, ok := auo.mutation.LocalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldLocalCode,
		})
	}
	if value, ok := auo.mutation.Website(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldWebsite,
		})
	}
	if value, ok := auo.mutation.Wikipedia(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldWikipedia,
		})
	}
	if value, ok := auo.mutation.Keywords(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: airport.FieldKeywords,
		})
	}
	if auo.mutation.RunwaysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.RunwaysTable,
			Columns: []string{airport.RunwaysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: runway.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRunwaysIDs(); len(nodes) > 0 && !auo.mutation.RunwaysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.RunwaysTable,
			Columns: []string{airport.RunwaysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: runway.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RunwaysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.RunwaysTable,
			Columns: []string{airport.RunwaysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: runway.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Airport{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{airport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
