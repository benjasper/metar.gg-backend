// Code generated by ent, DO NOT EDIT.

package skycondition

import (
	"fmt"
	"io"
	"strconv"
)

const (
	// Label holds the string label denoting the skycondition type in the database.
	Label = "sky_condition"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSkyCover holds the string denoting the sky_cover field in the database.
	FieldSkyCover = "sky_cover"
	// FieldCloudBase holds the string denoting the cloud_base field in the database.
	FieldCloudBase = "cloud_base"
	// EdgeMetar holds the string denoting the metar edge name in mutations.
	EdgeMetar = "metar"
	// Table holds the table name of the skycondition in the database.
	Table = "sky_conditions"
	// MetarTable is the table that holds the metar relation/edge.
	MetarTable = "sky_conditions"
	// MetarInverseTable is the table name for the Metar entity.
	// It exists in this package in order to avoid circular dependency with the "metar" package.
	MetarInverseTable = "metars"
	// MetarColumn is the table column denoting the metar relation/edge.
	MetarColumn = "metar_sky_conditions"
)

// Columns holds all SQL columns for skycondition fields.
var Columns = []string{
	FieldID,
	FieldSkyCover,
	FieldCloudBase,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "sky_conditions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"metar_sky_conditions",
	"taf_sky_conditions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// SkyCover defines the type for the "sky_cover" enum field.
type SkyCover string

// SkyCover values.
const (
	SkyCoverSkyClear               SkyCover = "SKC"
	SkyCoverFew                    SkyCover = "FEW"
	SkyCoverScattered              SkyCover = "SCT"
	SkyCoverClear                  SkyCover = "CLR"
	SkyCoverBroken                 SkyCover = "BKN"
	SkyCoverOvercast               SkyCover = "OVC"
	SkyCoverVerticalVisibility     SkyCover = "OVX"
	SkyCoverCeilingAndVisibilityOK SkyCover = "CAVOK"
)

func (sc SkyCover) String() string {
	return string(sc)
}

// SkyCoverValidator is a validator for the "sky_cover" field enum values. It is called by the builders before save.
func SkyCoverValidator(sc SkyCover) error {
	switch sc {
	case SkyCoverSkyClear, SkyCoverFew, SkyCoverScattered, SkyCoverClear, SkyCoverBroken, SkyCoverOvercast, SkyCoverVerticalVisibility, SkyCoverCeilingAndVisibilityOK:
		return nil
	default:
		return fmt.Errorf("skycondition: invalid enum value for sky_cover field: %q", sc)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e SkyCover) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *SkyCover) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = SkyCover(str)
	if err := SkyCoverValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid SkyCover", str)
	}
	return nil
}
