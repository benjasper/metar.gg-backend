// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"metar.gg/ent/migrate"

	"metar.gg/ent/airport"
	"metar.gg/ent/frequency"
	"metar.gg/ent/runway"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Airport is the client for interacting with the Airport builders.
	Airport *AirportClient
	// Frequency is the client for interacting with the Frequency builders.
	Frequency *FrequencyClient
	// Runway is the client for interacting with the Runway builders.
	Runway *RunwayClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Airport = NewAirportClient(c.config)
	c.Frequency = NewFrequencyClient(c.config)
	c.Runway = NewRunwayClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Airport:   NewAirportClient(cfg),
		Frequency: NewFrequencyClient(cfg),
		Runway:    NewRunwayClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Airport:   NewAirportClient(cfg),
		Frequency: NewFrequencyClient(cfg),
		Runway:    NewRunwayClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Airport.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Airport.Use(hooks...)
	c.Frequency.Use(hooks...)
	c.Runway.Use(hooks...)
}

// AirportClient is a client for the Airport schema.
type AirportClient struct {
	config
}

// NewAirportClient returns a client for the Airport from the given config.
func NewAirportClient(c config) *AirportClient {
	return &AirportClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `airport.Hooks(f(g(h())))`.
func (c *AirportClient) Use(hooks ...Hook) {
	c.hooks.Airport = append(c.hooks.Airport, hooks...)
}

// Create returns a builder for creating a Airport entity.
func (c *AirportClient) Create() *AirportCreate {
	mutation := newAirportMutation(c.config, OpCreate)
	return &AirportCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Airport entities.
func (c *AirportClient) CreateBulk(builders ...*AirportCreate) *AirportCreateBulk {
	return &AirportCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Airport.
func (c *AirportClient) Update() *AirportUpdate {
	mutation := newAirportMutation(c.config, OpUpdate)
	return &AirportUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AirportClient) UpdateOne(a *Airport) *AirportUpdateOne {
	mutation := newAirportMutation(c.config, OpUpdateOne, withAirport(a))
	return &AirportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AirportClient) UpdateOneID(id int) *AirportUpdateOne {
	mutation := newAirportMutation(c.config, OpUpdateOne, withAirportID(id))
	return &AirportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Airport.
func (c *AirportClient) Delete() *AirportDelete {
	mutation := newAirportMutation(c.config, OpDelete)
	return &AirportDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AirportClient) DeleteOne(a *Airport) *AirportDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AirportClient) DeleteOneID(id int) *AirportDeleteOne {
	builder := c.Delete().Where(airport.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AirportDeleteOne{builder}
}

// Query returns a query builder for Airport.
func (c *AirportClient) Query() *AirportQuery {
	return &AirportQuery{
		config: c.config,
	}
}

// Get returns a Airport entity by its id.
func (c *AirportClient) Get(ctx context.Context, id int) (*Airport, error) {
	return c.Query().Where(airport.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AirportClient) GetX(ctx context.Context, id int) *Airport {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRunways queries the runways edge of a Airport.
func (c *AirportClient) QueryRunways(a *Airport) *RunwayQuery {
	query := &RunwayQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(airport.Table, airport.FieldID, id),
			sqlgraph.To(runway.Table, runway.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, airport.RunwaysTable, airport.RunwaysColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AirportClient) Hooks() []Hook {
	return c.hooks.Airport
}

// FrequencyClient is a client for the Frequency schema.
type FrequencyClient struct {
	config
}

// NewFrequencyClient returns a client for the Frequency from the given config.
func NewFrequencyClient(c config) *FrequencyClient {
	return &FrequencyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `frequency.Hooks(f(g(h())))`.
func (c *FrequencyClient) Use(hooks ...Hook) {
	c.hooks.Frequency = append(c.hooks.Frequency, hooks...)
}

// Create returns a builder for creating a Frequency entity.
func (c *FrequencyClient) Create() *FrequencyCreate {
	mutation := newFrequencyMutation(c.config, OpCreate)
	return &FrequencyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Frequency entities.
func (c *FrequencyClient) CreateBulk(builders ...*FrequencyCreate) *FrequencyCreateBulk {
	return &FrequencyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Frequency.
func (c *FrequencyClient) Update() *FrequencyUpdate {
	mutation := newFrequencyMutation(c.config, OpUpdate)
	return &FrequencyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FrequencyClient) UpdateOne(f *Frequency) *FrequencyUpdateOne {
	mutation := newFrequencyMutation(c.config, OpUpdateOne, withFrequency(f))
	return &FrequencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FrequencyClient) UpdateOneID(id int) *FrequencyUpdateOne {
	mutation := newFrequencyMutation(c.config, OpUpdateOne, withFrequencyID(id))
	return &FrequencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Frequency.
func (c *FrequencyClient) Delete() *FrequencyDelete {
	mutation := newFrequencyMutation(c.config, OpDelete)
	return &FrequencyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FrequencyClient) DeleteOne(f *Frequency) *FrequencyDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *FrequencyClient) DeleteOneID(id int) *FrequencyDeleteOne {
	builder := c.Delete().Where(frequency.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FrequencyDeleteOne{builder}
}

// Query returns a query builder for Frequency.
func (c *FrequencyClient) Query() *FrequencyQuery {
	return &FrequencyQuery{
		config: c.config,
	}
}

// Get returns a Frequency entity by its id.
func (c *FrequencyClient) Get(ctx context.Context, id int) (*Frequency, error) {
	return c.Query().Where(frequency.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FrequencyClient) GetX(ctx context.Context, id int) *Frequency {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FrequencyClient) Hooks() []Hook {
	return c.hooks.Frequency
}

// RunwayClient is a client for the Runway schema.
type RunwayClient struct {
	config
}

// NewRunwayClient returns a client for the Runway from the given config.
func NewRunwayClient(c config) *RunwayClient {
	return &RunwayClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `runway.Hooks(f(g(h())))`.
func (c *RunwayClient) Use(hooks ...Hook) {
	c.hooks.Runway = append(c.hooks.Runway, hooks...)
}

// Create returns a builder for creating a Runway entity.
func (c *RunwayClient) Create() *RunwayCreate {
	mutation := newRunwayMutation(c.config, OpCreate)
	return &RunwayCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Runway entities.
func (c *RunwayClient) CreateBulk(builders ...*RunwayCreate) *RunwayCreateBulk {
	return &RunwayCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Runway.
func (c *RunwayClient) Update() *RunwayUpdate {
	mutation := newRunwayMutation(c.config, OpUpdate)
	return &RunwayUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RunwayClient) UpdateOne(r *Runway) *RunwayUpdateOne {
	mutation := newRunwayMutation(c.config, OpUpdateOne, withRunway(r))
	return &RunwayUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RunwayClient) UpdateOneID(id int) *RunwayUpdateOne {
	mutation := newRunwayMutation(c.config, OpUpdateOne, withRunwayID(id))
	return &RunwayUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Runway.
func (c *RunwayClient) Delete() *RunwayDelete {
	mutation := newRunwayMutation(c.config, OpDelete)
	return &RunwayDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RunwayClient) DeleteOne(r *Runway) *RunwayDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *RunwayClient) DeleteOneID(id int) *RunwayDeleteOne {
	builder := c.Delete().Where(runway.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RunwayDeleteOne{builder}
}

// Query returns a query builder for Runway.
func (c *RunwayClient) Query() *RunwayQuery {
	return &RunwayQuery{
		config: c.config,
	}
}

// Get returns a Runway entity by its id.
func (c *RunwayClient) Get(ctx context.Context, id int) (*Runway, error) {
	return c.Query().Where(runway.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RunwayClient) GetX(ctx context.Context, id int) *Runway {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAirport queries the airport edge of a Runway.
func (c *RunwayClient) QueryAirport(r *Runway) *AirportQuery {
	query := &AirportQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(runway.Table, runway.FieldID, id),
			sqlgraph.To(airport.Table, airport.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, runway.AirportTable, runway.AirportColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RunwayClient) Hooks() []Hook {
	return c.hooks.Runway
}
