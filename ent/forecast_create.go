// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"metar.gg/ent/forecast"
	"metar.gg/ent/icingcondition"
	"metar.gg/ent/skycondition"
	"metar.gg/ent/temperaturedata"
	"metar.gg/ent/turbulencecondition"
)

// ForecastCreate is the builder for creating a Forecast entity.
type ForecastCreate struct {
	config
	mutation *ForecastMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetFromTime sets the "from_time" field.
func (fc *ForecastCreate) SetFromTime(t time.Time) *ForecastCreate {
	fc.mutation.SetFromTime(t)
	return fc
}

// SetToTime sets the "to_time" field.
func (fc *ForecastCreate) SetToTime(t time.Time) *ForecastCreate {
	fc.mutation.SetToTime(t)
	return fc
}

// SetChangeIndicator sets the "change_indicator" field.
func (fc *ForecastCreate) SetChangeIndicator(fi forecast.ChangeIndicator) *ForecastCreate {
	fc.mutation.SetChangeIndicator(fi)
	return fc
}

// SetNillableChangeIndicator sets the "change_indicator" field if the given value is not nil.
func (fc *ForecastCreate) SetNillableChangeIndicator(fi *forecast.ChangeIndicator) *ForecastCreate {
	if fi != nil {
		fc.SetChangeIndicator(*fi)
	}
	return fc
}

// SetChangeTime sets the "change_time" field.
func (fc *ForecastCreate) SetChangeTime(t time.Time) *ForecastCreate {
	fc.mutation.SetChangeTime(t)
	return fc
}

// SetNillableChangeTime sets the "change_time" field if the given value is not nil.
func (fc *ForecastCreate) SetNillableChangeTime(t *time.Time) *ForecastCreate {
	if t != nil {
		fc.SetChangeTime(*t)
	}
	return fc
}

// SetChangeProbability sets the "change_probability" field.
func (fc *ForecastCreate) SetChangeProbability(i int) *ForecastCreate {
	fc.mutation.SetChangeProbability(i)
	return fc
}

// SetNillableChangeProbability sets the "change_probability" field if the given value is not nil.
func (fc *ForecastCreate) SetNillableChangeProbability(i *int) *ForecastCreate {
	if i != nil {
		fc.SetChangeProbability(*i)
	}
	return fc
}

// SetWindDirection sets the "wind_direction" field.
func (fc *ForecastCreate) SetWindDirection(i int) *ForecastCreate {
	fc.mutation.SetWindDirection(i)
	return fc
}

// SetNillableWindDirection sets the "wind_direction" field if the given value is not nil.
func (fc *ForecastCreate) SetNillableWindDirection(i *int) *ForecastCreate {
	if i != nil {
		fc.SetWindDirection(*i)
	}
	return fc
}

// SetWindDirectionVariable sets the "wind_direction_variable" field.
func (fc *ForecastCreate) SetWindDirectionVariable(b bool) *ForecastCreate {
	fc.mutation.SetWindDirectionVariable(b)
	return fc
}

// SetWindSpeed sets the "wind_speed" field.
func (fc *ForecastCreate) SetWindSpeed(i int) *ForecastCreate {
	fc.mutation.SetWindSpeed(i)
	return fc
}

// SetNillableWindSpeed sets the "wind_speed" field if the given value is not nil.
func (fc *ForecastCreate) SetNillableWindSpeed(i *int) *ForecastCreate {
	if i != nil {
		fc.SetWindSpeed(*i)
	}
	return fc
}

// SetWindGust sets the "wind_gust" field.
func (fc *ForecastCreate) SetWindGust(i int) *ForecastCreate {
	fc.mutation.SetWindGust(i)
	return fc
}

// SetNillableWindGust sets the "wind_gust" field if the given value is not nil.
func (fc *ForecastCreate) SetNillableWindGust(i *int) *ForecastCreate {
	if i != nil {
		fc.SetWindGust(*i)
	}
	return fc
}

// SetWindShearHeight sets the "wind_shear_height" field.
func (fc *ForecastCreate) SetWindShearHeight(i int) *ForecastCreate {
	fc.mutation.SetWindShearHeight(i)
	return fc
}

// SetNillableWindShearHeight sets the "wind_shear_height" field if the given value is not nil.
func (fc *ForecastCreate) SetNillableWindShearHeight(i *int) *ForecastCreate {
	if i != nil {
		fc.SetWindShearHeight(*i)
	}
	return fc
}

// SetWindShearDirection sets the "wind_shear_direction" field.
func (fc *ForecastCreate) SetWindShearDirection(i int) *ForecastCreate {
	fc.mutation.SetWindShearDirection(i)
	return fc
}

// SetNillableWindShearDirection sets the "wind_shear_direction" field if the given value is not nil.
func (fc *ForecastCreate) SetNillableWindShearDirection(i *int) *ForecastCreate {
	if i != nil {
		fc.SetWindShearDirection(*i)
	}
	return fc
}

// SetWindShearSpeed sets the "wind_shear_speed" field.
func (fc *ForecastCreate) SetWindShearSpeed(i int) *ForecastCreate {
	fc.mutation.SetWindShearSpeed(i)
	return fc
}

// SetNillableWindShearSpeed sets the "wind_shear_speed" field if the given value is not nil.
func (fc *ForecastCreate) SetNillableWindShearSpeed(i *int) *ForecastCreate {
	if i != nil {
		fc.SetWindShearSpeed(*i)
	}
	return fc
}

// SetVisibilityHorizontal sets the "visibility_horizontal" field.
func (fc *ForecastCreate) SetVisibilityHorizontal(f float64) *ForecastCreate {
	fc.mutation.SetVisibilityHorizontal(f)
	return fc
}

// SetNillableVisibilityHorizontal sets the "visibility_horizontal" field if the given value is not nil.
func (fc *ForecastCreate) SetNillableVisibilityHorizontal(f *float64) *ForecastCreate {
	if f != nil {
		fc.SetVisibilityHorizontal(*f)
	}
	return fc
}

// SetVisibilityHorizontalIsMoreThan sets the "visibility_horizontal_is_more_than" field.
func (fc *ForecastCreate) SetVisibilityHorizontalIsMoreThan(b bool) *ForecastCreate {
	fc.mutation.SetVisibilityHorizontalIsMoreThan(b)
	return fc
}

// SetVisibilityVertical sets the "visibility_vertical" field.
func (fc *ForecastCreate) SetVisibilityVertical(i int) *ForecastCreate {
	fc.mutation.SetVisibilityVertical(i)
	return fc
}

// SetNillableVisibilityVertical sets the "visibility_vertical" field if the given value is not nil.
func (fc *ForecastCreate) SetNillableVisibilityVertical(i *int) *ForecastCreate {
	if i != nil {
		fc.SetVisibilityVertical(*i)
	}
	return fc
}

// SetAltimeter sets the "altimeter" field.
func (fc *ForecastCreate) SetAltimeter(f float64) *ForecastCreate {
	fc.mutation.SetAltimeter(f)
	return fc
}

// SetNillableAltimeter sets the "altimeter" field if the given value is not nil.
func (fc *ForecastCreate) SetNillableAltimeter(f *float64) *ForecastCreate {
	if f != nil {
		fc.SetAltimeter(*f)
	}
	return fc
}

// SetWeather sets the "weather" field.
func (fc *ForecastCreate) SetWeather(s string) *ForecastCreate {
	fc.mutation.SetWeather(s)
	return fc
}

// SetNillableWeather sets the "weather" field if the given value is not nil.
func (fc *ForecastCreate) SetNillableWeather(s *string) *ForecastCreate {
	if s != nil {
		fc.SetWeather(*s)
	}
	return fc
}

// SetNotDecoded sets the "not_decoded" field.
func (fc *ForecastCreate) SetNotDecoded(s string) *ForecastCreate {
	fc.mutation.SetNotDecoded(s)
	return fc
}

// SetNillableNotDecoded sets the "not_decoded" field if the given value is not nil.
func (fc *ForecastCreate) SetNillableNotDecoded(s *string) *ForecastCreate {
	if s != nil {
		fc.SetNotDecoded(*s)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *ForecastCreate) SetID(u uuid.UUID) *ForecastCreate {
	fc.mutation.SetID(u)
	return fc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fc *ForecastCreate) SetNillableID(u *uuid.UUID) *ForecastCreate {
	if u != nil {
		fc.SetID(*u)
	}
	return fc
}

// AddSkyConditionIDs adds the "sky_conditions" edge to the SkyCondition entity by IDs.
func (fc *ForecastCreate) AddSkyConditionIDs(ids ...uuid.UUID) *ForecastCreate {
	fc.mutation.AddSkyConditionIDs(ids...)
	return fc
}

// AddSkyConditions adds the "sky_conditions" edges to the SkyCondition entity.
func (fc *ForecastCreate) AddSkyConditions(s ...*SkyCondition) *ForecastCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fc.AddSkyConditionIDs(ids...)
}

// AddTurbulenceConditionIDs adds the "turbulence_conditions" edge to the TurbulenceCondition entity by IDs.
func (fc *ForecastCreate) AddTurbulenceConditionIDs(ids ...uuid.UUID) *ForecastCreate {
	fc.mutation.AddTurbulenceConditionIDs(ids...)
	return fc
}

// AddTurbulenceConditions adds the "turbulence_conditions" edges to the TurbulenceCondition entity.
func (fc *ForecastCreate) AddTurbulenceConditions(t ...*TurbulenceCondition) *ForecastCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return fc.AddTurbulenceConditionIDs(ids...)
}

// AddIcingConditionIDs adds the "icing_conditions" edge to the IcingCondition entity by IDs.
func (fc *ForecastCreate) AddIcingConditionIDs(ids ...uuid.UUID) *ForecastCreate {
	fc.mutation.AddIcingConditionIDs(ids...)
	return fc
}

// AddIcingConditions adds the "icing_conditions" edges to the IcingCondition entity.
func (fc *ForecastCreate) AddIcingConditions(i ...*IcingCondition) *ForecastCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fc.AddIcingConditionIDs(ids...)
}

// AddTemperatureDatumIDs adds the "temperature_data" edge to the TemperatureData entity by IDs.
func (fc *ForecastCreate) AddTemperatureDatumIDs(ids ...uuid.UUID) *ForecastCreate {
	fc.mutation.AddTemperatureDatumIDs(ids...)
	return fc
}

// AddTemperatureData adds the "temperature_data" edges to the TemperatureData entity.
func (fc *ForecastCreate) AddTemperatureData(t ...*TemperatureData) *ForecastCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return fc.AddTemperatureDatumIDs(ids...)
}

// Mutation returns the ForecastMutation object of the builder.
func (fc *ForecastCreate) Mutation() *ForecastMutation {
	return fc.mutation
}

// Save creates the Forecast in the database.
func (fc *ForecastCreate) Save(ctx context.Context) (*Forecast, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *ForecastCreate) SaveX(ctx context.Context) *Forecast {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *ForecastCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *ForecastCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *ForecastCreate) defaults() {
	if _, ok := fc.mutation.ID(); !ok {
		v := forecast.DefaultID()
		fc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *ForecastCreate) check() error {
	if _, ok := fc.mutation.FromTime(); !ok {
		return &ValidationError{Name: "from_time", err: errors.New(`ent: missing required field "Forecast.from_time"`)}
	}
	if _, ok := fc.mutation.ToTime(); !ok {
		return &ValidationError{Name: "to_time", err: errors.New(`ent: missing required field "Forecast.to_time"`)}
	}
	if v, ok := fc.mutation.ChangeIndicator(); ok {
		if err := forecast.ChangeIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "change_indicator", err: fmt.Errorf(`ent: validator failed for field "Forecast.change_indicator": %w`, err)}
		}
	}
	if _, ok := fc.mutation.WindDirectionVariable(); !ok {
		return &ValidationError{Name: "wind_direction_variable", err: errors.New(`ent: missing required field "Forecast.wind_direction_variable"`)}
	}
	if _, ok := fc.mutation.VisibilityHorizontalIsMoreThan(); !ok {
		return &ValidationError{Name: "visibility_horizontal_is_more_than", err: errors.New(`ent: missing required field "Forecast.visibility_horizontal_is_more_than"`)}
	}
	return nil
}

func (fc *ForecastCreate) sqlSave(ctx context.Context) (*Forecast, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *ForecastCreate) createSpec() (*Forecast, *sqlgraph.CreateSpec) {
	var (
		_node = &Forecast{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(forecast.Table, sqlgraph.NewFieldSpec(forecast.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = fc.conflict
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := fc.mutation.FromTime(); ok {
		_spec.SetField(forecast.FieldFromTime, field.TypeTime, value)
		_node.FromTime = value
	}
	if value, ok := fc.mutation.ToTime(); ok {
		_spec.SetField(forecast.FieldToTime, field.TypeTime, value)
		_node.ToTime = value
	}
	if value, ok := fc.mutation.ChangeIndicator(); ok {
		_spec.SetField(forecast.FieldChangeIndicator, field.TypeEnum, value)
		_node.ChangeIndicator = &value
	}
	if value, ok := fc.mutation.ChangeTime(); ok {
		_spec.SetField(forecast.FieldChangeTime, field.TypeTime, value)
		_node.ChangeTime = &value
	}
	if value, ok := fc.mutation.ChangeProbability(); ok {
		_spec.SetField(forecast.FieldChangeProbability, field.TypeInt, value)
		_node.ChangeProbability = &value
	}
	if value, ok := fc.mutation.WindDirection(); ok {
		_spec.SetField(forecast.FieldWindDirection, field.TypeInt, value)
		_node.WindDirection = &value
	}
	if value, ok := fc.mutation.WindDirectionVariable(); ok {
		_spec.SetField(forecast.FieldWindDirectionVariable, field.TypeBool, value)
		_node.WindDirectionVariable = value
	}
	if value, ok := fc.mutation.WindSpeed(); ok {
		_spec.SetField(forecast.FieldWindSpeed, field.TypeInt, value)
		_node.WindSpeed = &value
	}
	if value, ok := fc.mutation.WindGust(); ok {
		_spec.SetField(forecast.FieldWindGust, field.TypeInt, value)
		_node.WindGust = &value
	}
	if value, ok := fc.mutation.WindShearHeight(); ok {
		_spec.SetField(forecast.FieldWindShearHeight, field.TypeInt, value)
		_node.WindShearHeight = &value
	}
	if value, ok := fc.mutation.WindShearDirection(); ok {
		_spec.SetField(forecast.FieldWindShearDirection, field.TypeInt, value)
		_node.WindShearDirection = &value
	}
	if value, ok := fc.mutation.WindShearSpeed(); ok {
		_spec.SetField(forecast.FieldWindShearSpeed, field.TypeInt, value)
		_node.WindShearSpeed = &value
	}
	if value, ok := fc.mutation.VisibilityHorizontal(); ok {
		_spec.SetField(forecast.FieldVisibilityHorizontal, field.TypeFloat64, value)
		_node.VisibilityHorizontal = &value
	}
	if value, ok := fc.mutation.VisibilityHorizontalIsMoreThan(); ok {
		_spec.SetField(forecast.FieldVisibilityHorizontalIsMoreThan, field.TypeBool, value)
		_node.VisibilityHorizontalIsMoreThan = value
	}
	if value, ok := fc.mutation.VisibilityVertical(); ok {
		_spec.SetField(forecast.FieldVisibilityVertical, field.TypeInt, value)
		_node.VisibilityVertical = &value
	}
	if value, ok := fc.mutation.Altimeter(); ok {
		_spec.SetField(forecast.FieldAltimeter, field.TypeFloat64, value)
		_node.Altimeter = &value
	}
	if value, ok := fc.mutation.Weather(); ok {
		_spec.SetField(forecast.FieldWeather, field.TypeString, value)
		_node.Weather = value
	}
	if value, ok := fc.mutation.NotDecoded(); ok {
		_spec.SetField(forecast.FieldNotDecoded, field.TypeString, value)
		_node.NotDecoded = value
	}
	if nodes := fc.mutation.SkyConditionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.SkyConditionsTable,
			Columns: []string{forecast.SkyConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skycondition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.TurbulenceConditionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.TurbulenceConditionsTable,
			Columns: []string{forecast.TurbulenceConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(turbulencecondition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.IcingConditionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.IcingConditionsTable,
			Columns: []string{forecast.IcingConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(icingcondition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.TemperatureDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.TemperatureDataTable,
			Columns: []string{forecast.TemperatureDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(temperaturedata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Forecast.Create().
//		SetFromTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ForecastUpsert) {
//			SetFromTime(v+v).
//		}).
//		Exec(ctx)
func (fc *ForecastCreate) OnConflict(opts ...sql.ConflictOption) *ForecastUpsertOne {
	fc.conflict = opts
	return &ForecastUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Forecast.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fc *ForecastCreate) OnConflictColumns(columns ...string) *ForecastUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &ForecastUpsertOne{
		create: fc,
	}
}

type (
	// ForecastUpsertOne is the builder for "upsert"-ing
	//  one Forecast node.
	ForecastUpsertOne struct {
		create *ForecastCreate
	}

	// ForecastUpsert is the "OnConflict" setter.
	ForecastUpsert struct {
		*sql.UpdateSet
	}
)

// SetFromTime sets the "from_time" field.
func (u *ForecastUpsert) SetFromTime(v time.Time) *ForecastUpsert {
	u.Set(forecast.FieldFromTime, v)
	return u
}

// UpdateFromTime sets the "from_time" field to the value that was provided on create.
func (u *ForecastUpsert) UpdateFromTime() *ForecastUpsert {
	u.SetExcluded(forecast.FieldFromTime)
	return u
}

// SetToTime sets the "to_time" field.
func (u *ForecastUpsert) SetToTime(v time.Time) *ForecastUpsert {
	u.Set(forecast.FieldToTime, v)
	return u
}

// UpdateToTime sets the "to_time" field to the value that was provided on create.
func (u *ForecastUpsert) UpdateToTime() *ForecastUpsert {
	u.SetExcluded(forecast.FieldToTime)
	return u
}

// SetChangeIndicator sets the "change_indicator" field.
func (u *ForecastUpsert) SetChangeIndicator(v forecast.ChangeIndicator) *ForecastUpsert {
	u.Set(forecast.FieldChangeIndicator, v)
	return u
}

// UpdateChangeIndicator sets the "change_indicator" field to the value that was provided on create.
func (u *ForecastUpsert) UpdateChangeIndicator() *ForecastUpsert {
	u.SetExcluded(forecast.FieldChangeIndicator)
	return u
}

// ClearChangeIndicator clears the value of the "change_indicator" field.
func (u *ForecastUpsert) ClearChangeIndicator() *ForecastUpsert {
	u.SetNull(forecast.FieldChangeIndicator)
	return u
}

// SetChangeTime sets the "change_time" field.
func (u *ForecastUpsert) SetChangeTime(v time.Time) *ForecastUpsert {
	u.Set(forecast.FieldChangeTime, v)
	return u
}

// UpdateChangeTime sets the "change_time" field to the value that was provided on create.
func (u *ForecastUpsert) UpdateChangeTime() *ForecastUpsert {
	u.SetExcluded(forecast.FieldChangeTime)
	return u
}

// ClearChangeTime clears the value of the "change_time" field.
func (u *ForecastUpsert) ClearChangeTime() *ForecastUpsert {
	u.SetNull(forecast.FieldChangeTime)
	return u
}

// SetChangeProbability sets the "change_probability" field.
func (u *ForecastUpsert) SetChangeProbability(v int) *ForecastUpsert {
	u.Set(forecast.FieldChangeProbability, v)
	return u
}

// UpdateChangeProbability sets the "change_probability" field to the value that was provided on create.
func (u *ForecastUpsert) UpdateChangeProbability() *ForecastUpsert {
	u.SetExcluded(forecast.FieldChangeProbability)
	return u
}

// AddChangeProbability adds v to the "change_probability" field.
func (u *ForecastUpsert) AddChangeProbability(v int) *ForecastUpsert {
	u.Add(forecast.FieldChangeProbability, v)
	return u
}

// ClearChangeProbability clears the value of the "change_probability" field.
func (u *ForecastUpsert) ClearChangeProbability() *ForecastUpsert {
	u.SetNull(forecast.FieldChangeProbability)
	return u
}

// SetWindDirection sets the "wind_direction" field.
func (u *ForecastUpsert) SetWindDirection(v int) *ForecastUpsert {
	u.Set(forecast.FieldWindDirection, v)
	return u
}

// UpdateWindDirection sets the "wind_direction" field to the value that was provided on create.
func (u *ForecastUpsert) UpdateWindDirection() *ForecastUpsert {
	u.SetExcluded(forecast.FieldWindDirection)
	return u
}

// AddWindDirection adds v to the "wind_direction" field.
func (u *ForecastUpsert) AddWindDirection(v int) *ForecastUpsert {
	u.Add(forecast.FieldWindDirection, v)
	return u
}

// ClearWindDirection clears the value of the "wind_direction" field.
func (u *ForecastUpsert) ClearWindDirection() *ForecastUpsert {
	u.SetNull(forecast.FieldWindDirection)
	return u
}

// SetWindDirectionVariable sets the "wind_direction_variable" field.
func (u *ForecastUpsert) SetWindDirectionVariable(v bool) *ForecastUpsert {
	u.Set(forecast.FieldWindDirectionVariable, v)
	return u
}

// UpdateWindDirectionVariable sets the "wind_direction_variable" field to the value that was provided on create.
func (u *ForecastUpsert) UpdateWindDirectionVariable() *ForecastUpsert {
	u.SetExcluded(forecast.FieldWindDirectionVariable)
	return u
}

// SetWindSpeed sets the "wind_speed" field.
func (u *ForecastUpsert) SetWindSpeed(v int) *ForecastUpsert {
	u.Set(forecast.FieldWindSpeed, v)
	return u
}

// UpdateWindSpeed sets the "wind_speed" field to the value that was provided on create.
func (u *ForecastUpsert) UpdateWindSpeed() *ForecastUpsert {
	u.SetExcluded(forecast.FieldWindSpeed)
	return u
}

// AddWindSpeed adds v to the "wind_speed" field.
func (u *ForecastUpsert) AddWindSpeed(v int) *ForecastUpsert {
	u.Add(forecast.FieldWindSpeed, v)
	return u
}

// ClearWindSpeed clears the value of the "wind_speed" field.
func (u *ForecastUpsert) ClearWindSpeed() *ForecastUpsert {
	u.SetNull(forecast.FieldWindSpeed)
	return u
}

// SetWindGust sets the "wind_gust" field.
func (u *ForecastUpsert) SetWindGust(v int) *ForecastUpsert {
	u.Set(forecast.FieldWindGust, v)
	return u
}

// UpdateWindGust sets the "wind_gust" field to the value that was provided on create.
func (u *ForecastUpsert) UpdateWindGust() *ForecastUpsert {
	u.SetExcluded(forecast.FieldWindGust)
	return u
}

// AddWindGust adds v to the "wind_gust" field.
func (u *ForecastUpsert) AddWindGust(v int) *ForecastUpsert {
	u.Add(forecast.FieldWindGust, v)
	return u
}

// ClearWindGust clears the value of the "wind_gust" field.
func (u *ForecastUpsert) ClearWindGust() *ForecastUpsert {
	u.SetNull(forecast.FieldWindGust)
	return u
}

// SetWindShearHeight sets the "wind_shear_height" field.
func (u *ForecastUpsert) SetWindShearHeight(v int) *ForecastUpsert {
	u.Set(forecast.FieldWindShearHeight, v)
	return u
}

// UpdateWindShearHeight sets the "wind_shear_height" field to the value that was provided on create.
func (u *ForecastUpsert) UpdateWindShearHeight() *ForecastUpsert {
	u.SetExcluded(forecast.FieldWindShearHeight)
	return u
}

// AddWindShearHeight adds v to the "wind_shear_height" field.
func (u *ForecastUpsert) AddWindShearHeight(v int) *ForecastUpsert {
	u.Add(forecast.FieldWindShearHeight, v)
	return u
}

// ClearWindShearHeight clears the value of the "wind_shear_height" field.
func (u *ForecastUpsert) ClearWindShearHeight() *ForecastUpsert {
	u.SetNull(forecast.FieldWindShearHeight)
	return u
}

// SetWindShearDirection sets the "wind_shear_direction" field.
func (u *ForecastUpsert) SetWindShearDirection(v int) *ForecastUpsert {
	u.Set(forecast.FieldWindShearDirection, v)
	return u
}

// UpdateWindShearDirection sets the "wind_shear_direction" field to the value that was provided on create.
func (u *ForecastUpsert) UpdateWindShearDirection() *ForecastUpsert {
	u.SetExcluded(forecast.FieldWindShearDirection)
	return u
}

// AddWindShearDirection adds v to the "wind_shear_direction" field.
func (u *ForecastUpsert) AddWindShearDirection(v int) *ForecastUpsert {
	u.Add(forecast.FieldWindShearDirection, v)
	return u
}

// ClearWindShearDirection clears the value of the "wind_shear_direction" field.
func (u *ForecastUpsert) ClearWindShearDirection() *ForecastUpsert {
	u.SetNull(forecast.FieldWindShearDirection)
	return u
}

// SetWindShearSpeed sets the "wind_shear_speed" field.
func (u *ForecastUpsert) SetWindShearSpeed(v int) *ForecastUpsert {
	u.Set(forecast.FieldWindShearSpeed, v)
	return u
}

// UpdateWindShearSpeed sets the "wind_shear_speed" field to the value that was provided on create.
func (u *ForecastUpsert) UpdateWindShearSpeed() *ForecastUpsert {
	u.SetExcluded(forecast.FieldWindShearSpeed)
	return u
}

// AddWindShearSpeed adds v to the "wind_shear_speed" field.
func (u *ForecastUpsert) AddWindShearSpeed(v int) *ForecastUpsert {
	u.Add(forecast.FieldWindShearSpeed, v)
	return u
}

// ClearWindShearSpeed clears the value of the "wind_shear_speed" field.
func (u *ForecastUpsert) ClearWindShearSpeed() *ForecastUpsert {
	u.SetNull(forecast.FieldWindShearSpeed)
	return u
}

// SetVisibilityHorizontal sets the "visibility_horizontal" field.
func (u *ForecastUpsert) SetVisibilityHorizontal(v float64) *ForecastUpsert {
	u.Set(forecast.FieldVisibilityHorizontal, v)
	return u
}

// UpdateVisibilityHorizontal sets the "visibility_horizontal" field to the value that was provided on create.
func (u *ForecastUpsert) UpdateVisibilityHorizontal() *ForecastUpsert {
	u.SetExcluded(forecast.FieldVisibilityHorizontal)
	return u
}

// AddVisibilityHorizontal adds v to the "visibility_horizontal" field.
func (u *ForecastUpsert) AddVisibilityHorizontal(v float64) *ForecastUpsert {
	u.Add(forecast.FieldVisibilityHorizontal, v)
	return u
}

// ClearVisibilityHorizontal clears the value of the "visibility_horizontal" field.
func (u *ForecastUpsert) ClearVisibilityHorizontal() *ForecastUpsert {
	u.SetNull(forecast.FieldVisibilityHorizontal)
	return u
}

// SetVisibilityHorizontalIsMoreThan sets the "visibility_horizontal_is_more_than" field.
func (u *ForecastUpsert) SetVisibilityHorizontalIsMoreThan(v bool) *ForecastUpsert {
	u.Set(forecast.FieldVisibilityHorizontalIsMoreThan, v)
	return u
}

// UpdateVisibilityHorizontalIsMoreThan sets the "visibility_horizontal_is_more_than" field to the value that was provided on create.
func (u *ForecastUpsert) UpdateVisibilityHorizontalIsMoreThan() *ForecastUpsert {
	u.SetExcluded(forecast.FieldVisibilityHorizontalIsMoreThan)
	return u
}

// SetVisibilityVertical sets the "visibility_vertical" field.
func (u *ForecastUpsert) SetVisibilityVertical(v int) *ForecastUpsert {
	u.Set(forecast.FieldVisibilityVertical, v)
	return u
}

// UpdateVisibilityVertical sets the "visibility_vertical" field to the value that was provided on create.
func (u *ForecastUpsert) UpdateVisibilityVertical() *ForecastUpsert {
	u.SetExcluded(forecast.FieldVisibilityVertical)
	return u
}

// AddVisibilityVertical adds v to the "visibility_vertical" field.
func (u *ForecastUpsert) AddVisibilityVertical(v int) *ForecastUpsert {
	u.Add(forecast.FieldVisibilityVertical, v)
	return u
}

// ClearVisibilityVertical clears the value of the "visibility_vertical" field.
func (u *ForecastUpsert) ClearVisibilityVertical() *ForecastUpsert {
	u.SetNull(forecast.FieldVisibilityVertical)
	return u
}

// SetAltimeter sets the "altimeter" field.
func (u *ForecastUpsert) SetAltimeter(v float64) *ForecastUpsert {
	u.Set(forecast.FieldAltimeter, v)
	return u
}

// UpdateAltimeter sets the "altimeter" field to the value that was provided on create.
func (u *ForecastUpsert) UpdateAltimeter() *ForecastUpsert {
	u.SetExcluded(forecast.FieldAltimeter)
	return u
}

// AddAltimeter adds v to the "altimeter" field.
func (u *ForecastUpsert) AddAltimeter(v float64) *ForecastUpsert {
	u.Add(forecast.FieldAltimeter, v)
	return u
}

// ClearAltimeter clears the value of the "altimeter" field.
func (u *ForecastUpsert) ClearAltimeter() *ForecastUpsert {
	u.SetNull(forecast.FieldAltimeter)
	return u
}

// SetWeather sets the "weather" field.
func (u *ForecastUpsert) SetWeather(v string) *ForecastUpsert {
	u.Set(forecast.FieldWeather, v)
	return u
}

// UpdateWeather sets the "weather" field to the value that was provided on create.
func (u *ForecastUpsert) UpdateWeather() *ForecastUpsert {
	u.SetExcluded(forecast.FieldWeather)
	return u
}

// ClearWeather clears the value of the "weather" field.
func (u *ForecastUpsert) ClearWeather() *ForecastUpsert {
	u.SetNull(forecast.FieldWeather)
	return u
}

// SetNotDecoded sets the "not_decoded" field.
func (u *ForecastUpsert) SetNotDecoded(v string) *ForecastUpsert {
	u.Set(forecast.FieldNotDecoded, v)
	return u
}

// UpdateNotDecoded sets the "not_decoded" field to the value that was provided on create.
func (u *ForecastUpsert) UpdateNotDecoded() *ForecastUpsert {
	u.SetExcluded(forecast.FieldNotDecoded)
	return u
}

// ClearNotDecoded clears the value of the "not_decoded" field.
func (u *ForecastUpsert) ClearNotDecoded() *ForecastUpsert {
	u.SetNull(forecast.FieldNotDecoded)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Forecast.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(forecast.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ForecastUpsertOne) UpdateNewValues() *ForecastUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(forecast.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Forecast.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ForecastUpsertOne) Ignore() *ForecastUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ForecastUpsertOne) DoNothing() *ForecastUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ForecastCreate.OnConflict
// documentation for more info.
func (u *ForecastUpsertOne) Update(set func(*ForecastUpsert)) *ForecastUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ForecastUpsert{UpdateSet: update})
	}))
	return u
}

// SetFromTime sets the "from_time" field.
func (u *ForecastUpsertOne) SetFromTime(v time.Time) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.SetFromTime(v)
	})
}

// UpdateFromTime sets the "from_time" field to the value that was provided on create.
func (u *ForecastUpsertOne) UpdateFromTime() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateFromTime()
	})
}

// SetToTime sets the "to_time" field.
func (u *ForecastUpsertOne) SetToTime(v time.Time) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.SetToTime(v)
	})
}

// UpdateToTime sets the "to_time" field to the value that was provided on create.
func (u *ForecastUpsertOne) UpdateToTime() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateToTime()
	})
}

// SetChangeIndicator sets the "change_indicator" field.
func (u *ForecastUpsertOne) SetChangeIndicator(v forecast.ChangeIndicator) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.SetChangeIndicator(v)
	})
}

// UpdateChangeIndicator sets the "change_indicator" field to the value that was provided on create.
func (u *ForecastUpsertOne) UpdateChangeIndicator() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateChangeIndicator()
	})
}

// ClearChangeIndicator clears the value of the "change_indicator" field.
func (u *ForecastUpsertOne) ClearChangeIndicator() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearChangeIndicator()
	})
}

// SetChangeTime sets the "change_time" field.
func (u *ForecastUpsertOne) SetChangeTime(v time.Time) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.SetChangeTime(v)
	})
}

// UpdateChangeTime sets the "change_time" field to the value that was provided on create.
func (u *ForecastUpsertOne) UpdateChangeTime() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateChangeTime()
	})
}

// ClearChangeTime clears the value of the "change_time" field.
func (u *ForecastUpsertOne) ClearChangeTime() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearChangeTime()
	})
}

// SetChangeProbability sets the "change_probability" field.
func (u *ForecastUpsertOne) SetChangeProbability(v int) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.SetChangeProbability(v)
	})
}

// AddChangeProbability adds v to the "change_probability" field.
func (u *ForecastUpsertOne) AddChangeProbability(v int) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.AddChangeProbability(v)
	})
}

// UpdateChangeProbability sets the "change_probability" field to the value that was provided on create.
func (u *ForecastUpsertOne) UpdateChangeProbability() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateChangeProbability()
	})
}

// ClearChangeProbability clears the value of the "change_probability" field.
func (u *ForecastUpsertOne) ClearChangeProbability() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearChangeProbability()
	})
}

// SetWindDirection sets the "wind_direction" field.
func (u *ForecastUpsertOne) SetWindDirection(v int) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.SetWindDirection(v)
	})
}

// AddWindDirection adds v to the "wind_direction" field.
func (u *ForecastUpsertOne) AddWindDirection(v int) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.AddWindDirection(v)
	})
}

// UpdateWindDirection sets the "wind_direction" field to the value that was provided on create.
func (u *ForecastUpsertOne) UpdateWindDirection() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateWindDirection()
	})
}

// ClearWindDirection clears the value of the "wind_direction" field.
func (u *ForecastUpsertOne) ClearWindDirection() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearWindDirection()
	})
}

// SetWindDirectionVariable sets the "wind_direction_variable" field.
func (u *ForecastUpsertOne) SetWindDirectionVariable(v bool) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.SetWindDirectionVariable(v)
	})
}

// UpdateWindDirectionVariable sets the "wind_direction_variable" field to the value that was provided on create.
func (u *ForecastUpsertOne) UpdateWindDirectionVariable() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateWindDirectionVariable()
	})
}

// SetWindSpeed sets the "wind_speed" field.
func (u *ForecastUpsertOne) SetWindSpeed(v int) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.SetWindSpeed(v)
	})
}

// AddWindSpeed adds v to the "wind_speed" field.
func (u *ForecastUpsertOne) AddWindSpeed(v int) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.AddWindSpeed(v)
	})
}

// UpdateWindSpeed sets the "wind_speed" field to the value that was provided on create.
func (u *ForecastUpsertOne) UpdateWindSpeed() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateWindSpeed()
	})
}

// ClearWindSpeed clears the value of the "wind_speed" field.
func (u *ForecastUpsertOne) ClearWindSpeed() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearWindSpeed()
	})
}

// SetWindGust sets the "wind_gust" field.
func (u *ForecastUpsertOne) SetWindGust(v int) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.SetWindGust(v)
	})
}

// AddWindGust adds v to the "wind_gust" field.
func (u *ForecastUpsertOne) AddWindGust(v int) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.AddWindGust(v)
	})
}

// UpdateWindGust sets the "wind_gust" field to the value that was provided on create.
func (u *ForecastUpsertOne) UpdateWindGust() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateWindGust()
	})
}

// ClearWindGust clears the value of the "wind_gust" field.
func (u *ForecastUpsertOne) ClearWindGust() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearWindGust()
	})
}

// SetWindShearHeight sets the "wind_shear_height" field.
func (u *ForecastUpsertOne) SetWindShearHeight(v int) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.SetWindShearHeight(v)
	})
}

// AddWindShearHeight adds v to the "wind_shear_height" field.
func (u *ForecastUpsertOne) AddWindShearHeight(v int) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.AddWindShearHeight(v)
	})
}

// UpdateWindShearHeight sets the "wind_shear_height" field to the value that was provided on create.
func (u *ForecastUpsertOne) UpdateWindShearHeight() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateWindShearHeight()
	})
}

// ClearWindShearHeight clears the value of the "wind_shear_height" field.
func (u *ForecastUpsertOne) ClearWindShearHeight() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearWindShearHeight()
	})
}

// SetWindShearDirection sets the "wind_shear_direction" field.
func (u *ForecastUpsertOne) SetWindShearDirection(v int) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.SetWindShearDirection(v)
	})
}

// AddWindShearDirection adds v to the "wind_shear_direction" field.
func (u *ForecastUpsertOne) AddWindShearDirection(v int) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.AddWindShearDirection(v)
	})
}

// UpdateWindShearDirection sets the "wind_shear_direction" field to the value that was provided on create.
func (u *ForecastUpsertOne) UpdateWindShearDirection() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateWindShearDirection()
	})
}

// ClearWindShearDirection clears the value of the "wind_shear_direction" field.
func (u *ForecastUpsertOne) ClearWindShearDirection() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearWindShearDirection()
	})
}

// SetWindShearSpeed sets the "wind_shear_speed" field.
func (u *ForecastUpsertOne) SetWindShearSpeed(v int) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.SetWindShearSpeed(v)
	})
}

// AddWindShearSpeed adds v to the "wind_shear_speed" field.
func (u *ForecastUpsertOne) AddWindShearSpeed(v int) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.AddWindShearSpeed(v)
	})
}

// UpdateWindShearSpeed sets the "wind_shear_speed" field to the value that was provided on create.
func (u *ForecastUpsertOne) UpdateWindShearSpeed() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateWindShearSpeed()
	})
}

// ClearWindShearSpeed clears the value of the "wind_shear_speed" field.
func (u *ForecastUpsertOne) ClearWindShearSpeed() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearWindShearSpeed()
	})
}

// SetVisibilityHorizontal sets the "visibility_horizontal" field.
func (u *ForecastUpsertOne) SetVisibilityHorizontal(v float64) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.SetVisibilityHorizontal(v)
	})
}

// AddVisibilityHorizontal adds v to the "visibility_horizontal" field.
func (u *ForecastUpsertOne) AddVisibilityHorizontal(v float64) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.AddVisibilityHorizontal(v)
	})
}

// UpdateVisibilityHorizontal sets the "visibility_horizontal" field to the value that was provided on create.
func (u *ForecastUpsertOne) UpdateVisibilityHorizontal() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateVisibilityHorizontal()
	})
}

// ClearVisibilityHorizontal clears the value of the "visibility_horizontal" field.
func (u *ForecastUpsertOne) ClearVisibilityHorizontal() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearVisibilityHorizontal()
	})
}

// SetVisibilityHorizontalIsMoreThan sets the "visibility_horizontal_is_more_than" field.
func (u *ForecastUpsertOne) SetVisibilityHorizontalIsMoreThan(v bool) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.SetVisibilityHorizontalIsMoreThan(v)
	})
}

// UpdateVisibilityHorizontalIsMoreThan sets the "visibility_horizontal_is_more_than" field to the value that was provided on create.
func (u *ForecastUpsertOne) UpdateVisibilityHorizontalIsMoreThan() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateVisibilityHorizontalIsMoreThan()
	})
}

// SetVisibilityVertical sets the "visibility_vertical" field.
func (u *ForecastUpsertOne) SetVisibilityVertical(v int) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.SetVisibilityVertical(v)
	})
}

// AddVisibilityVertical adds v to the "visibility_vertical" field.
func (u *ForecastUpsertOne) AddVisibilityVertical(v int) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.AddVisibilityVertical(v)
	})
}

// UpdateVisibilityVertical sets the "visibility_vertical" field to the value that was provided on create.
func (u *ForecastUpsertOne) UpdateVisibilityVertical() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateVisibilityVertical()
	})
}

// ClearVisibilityVertical clears the value of the "visibility_vertical" field.
func (u *ForecastUpsertOne) ClearVisibilityVertical() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearVisibilityVertical()
	})
}

// SetAltimeter sets the "altimeter" field.
func (u *ForecastUpsertOne) SetAltimeter(v float64) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.SetAltimeter(v)
	})
}

// AddAltimeter adds v to the "altimeter" field.
func (u *ForecastUpsertOne) AddAltimeter(v float64) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.AddAltimeter(v)
	})
}

// UpdateAltimeter sets the "altimeter" field to the value that was provided on create.
func (u *ForecastUpsertOne) UpdateAltimeter() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateAltimeter()
	})
}

// ClearAltimeter clears the value of the "altimeter" field.
func (u *ForecastUpsertOne) ClearAltimeter() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearAltimeter()
	})
}

// SetWeather sets the "weather" field.
func (u *ForecastUpsertOne) SetWeather(v string) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.SetWeather(v)
	})
}

// UpdateWeather sets the "weather" field to the value that was provided on create.
func (u *ForecastUpsertOne) UpdateWeather() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateWeather()
	})
}

// ClearWeather clears the value of the "weather" field.
func (u *ForecastUpsertOne) ClearWeather() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearWeather()
	})
}

// SetNotDecoded sets the "not_decoded" field.
func (u *ForecastUpsertOne) SetNotDecoded(v string) *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.SetNotDecoded(v)
	})
}

// UpdateNotDecoded sets the "not_decoded" field to the value that was provided on create.
func (u *ForecastUpsertOne) UpdateNotDecoded() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateNotDecoded()
	})
}

// ClearNotDecoded clears the value of the "not_decoded" field.
func (u *ForecastUpsertOne) ClearNotDecoded() *ForecastUpsertOne {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearNotDecoded()
	})
}

// Exec executes the query.
func (u *ForecastUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ForecastCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ForecastUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ForecastUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ForecastUpsertOne.ID is not supported by MySQL driver. Use ForecastUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ForecastUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ForecastCreateBulk is the builder for creating many Forecast entities in bulk.
type ForecastCreateBulk struct {
	config
	builders []*ForecastCreate
	conflict []sql.ConflictOption
}

// Save creates the Forecast entities in the database.
func (fcb *ForecastCreateBulk) Save(ctx context.Context) ([]*Forecast, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Forecast, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ForecastMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *ForecastCreateBulk) SaveX(ctx context.Context) []*Forecast {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *ForecastCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *ForecastCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Forecast.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ForecastUpsert) {
//			SetFromTime(v+v).
//		}).
//		Exec(ctx)
func (fcb *ForecastCreateBulk) OnConflict(opts ...sql.ConflictOption) *ForecastUpsertBulk {
	fcb.conflict = opts
	return &ForecastUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Forecast.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcb *ForecastCreateBulk) OnConflictColumns(columns ...string) *ForecastUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &ForecastUpsertBulk{
		create: fcb,
	}
}

// ForecastUpsertBulk is the builder for "upsert"-ing
// a bulk of Forecast nodes.
type ForecastUpsertBulk struct {
	create *ForecastCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Forecast.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(forecast.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ForecastUpsertBulk) UpdateNewValues() *ForecastUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(forecast.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Forecast.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ForecastUpsertBulk) Ignore() *ForecastUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ForecastUpsertBulk) DoNothing() *ForecastUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ForecastCreateBulk.OnConflict
// documentation for more info.
func (u *ForecastUpsertBulk) Update(set func(*ForecastUpsert)) *ForecastUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ForecastUpsert{UpdateSet: update})
	}))
	return u
}

// SetFromTime sets the "from_time" field.
func (u *ForecastUpsertBulk) SetFromTime(v time.Time) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.SetFromTime(v)
	})
}

// UpdateFromTime sets the "from_time" field to the value that was provided on create.
func (u *ForecastUpsertBulk) UpdateFromTime() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateFromTime()
	})
}

// SetToTime sets the "to_time" field.
func (u *ForecastUpsertBulk) SetToTime(v time.Time) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.SetToTime(v)
	})
}

// UpdateToTime sets the "to_time" field to the value that was provided on create.
func (u *ForecastUpsertBulk) UpdateToTime() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateToTime()
	})
}

// SetChangeIndicator sets the "change_indicator" field.
func (u *ForecastUpsertBulk) SetChangeIndicator(v forecast.ChangeIndicator) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.SetChangeIndicator(v)
	})
}

// UpdateChangeIndicator sets the "change_indicator" field to the value that was provided on create.
func (u *ForecastUpsertBulk) UpdateChangeIndicator() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateChangeIndicator()
	})
}

// ClearChangeIndicator clears the value of the "change_indicator" field.
func (u *ForecastUpsertBulk) ClearChangeIndicator() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearChangeIndicator()
	})
}

// SetChangeTime sets the "change_time" field.
func (u *ForecastUpsertBulk) SetChangeTime(v time.Time) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.SetChangeTime(v)
	})
}

// UpdateChangeTime sets the "change_time" field to the value that was provided on create.
func (u *ForecastUpsertBulk) UpdateChangeTime() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateChangeTime()
	})
}

// ClearChangeTime clears the value of the "change_time" field.
func (u *ForecastUpsertBulk) ClearChangeTime() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearChangeTime()
	})
}

// SetChangeProbability sets the "change_probability" field.
func (u *ForecastUpsertBulk) SetChangeProbability(v int) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.SetChangeProbability(v)
	})
}

// AddChangeProbability adds v to the "change_probability" field.
func (u *ForecastUpsertBulk) AddChangeProbability(v int) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.AddChangeProbability(v)
	})
}

// UpdateChangeProbability sets the "change_probability" field to the value that was provided on create.
func (u *ForecastUpsertBulk) UpdateChangeProbability() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateChangeProbability()
	})
}

// ClearChangeProbability clears the value of the "change_probability" field.
func (u *ForecastUpsertBulk) ClearChangeProbability() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearChangeProbability()
	})
}

// SetWindDirection sets the "wind_direction" field.
func (u *ForecastUpsertBulk) SetWindDirection(v int) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.SetWindDirection(v)
	})
}

// AddWindDirection adds v to the "wind_direction" field.
func (u *ForecastUpsertBulk) AddWindDirection(v int) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.AddWindDirection(v)
	})
}

// UpdateWindDirection sets the "wind_direction" field to the value that was provided on create.
func (u *ForecastUpsertBulk) UpdateWindDirection() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateWindDirection()
	})
}

// ClearWindDirection clears the value of the "wind_direction" field.
func (u *ForecastUpsertBulk) ClearWindDirection() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearWindDirection()
	})
}

// SetWindDirectionVariable sets the "wind_direction_variable" field.
func (u *ForecastUpsertBulk) SetWindDirectionVariable(v bool) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.SetWindDirectionVariable(v)
	})
}

// UpdateWindDirectionVariable sets the "wind_direction_variable" field to the value that was provided on create.
func (u *ForecastUpsertBulk) UpdateWindDirectionVariable() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateWindDirectionVariable()
	})
}

// SetWindSpeed sets the "wind_speed" field.
func (u *ForecastUpsertBulk) SetWindSpeed(v int) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.SetWindSpeed(v)
	})
}

// AddWindSpeed adds v to the "wind_speed" field.
func (u *ForecastUpsertBulk) AddWindSpeed(v int) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.AddWindSpeed(v)
	})
}

// UpdateWindSpeed sets the "wind_speed" field to the value that was provided on create.
func (u *ForecastUpsertBulk) UpdateWindSpeed() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateWindSpeed()
	})
}

// ClearWindSpeed clears the value of the "wind_speed" field.
func (u *ForecastUpsertBulk) ClearWindSpeed() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearWindSpeed()
	})
}

// SetWindGust sets the "wind_gust" field.
func (u *ForecastUpsertBulk) SetWindGust(v int) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.SetWindGust(v)
	})
}

// AddWindGust adds v to the "wind_gust" field.
func (u *ForecastUpsertBulk) AddWindGust(v int) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.AddWindGust(v)
	})
}

// UpdateWindGust sets the "wind_gust" field to the value that was provided on create.
func (u *ForecastUpsertBulk) UpdateWindGust() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateWindGust()
	})
}

// ClearWindGust clears the value of the "wind_gust" field.
func (u *ForecastUpsertBulk) ClearWindGust() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearWindGust()
	})
}

// SetWindShearHeight sets the "wind_shear_height" field.
func (u *ForecastUpsertBulk) SetWindShearHeight(v int) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.SetWindShearHeight(v)
	})
}

// AddWindShearHeight adds v to the "wind_shear_height" field.
func (u *ForecastUpsertBulk) AddWindShearHeight(v int) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.AddWindShearHeight(v)
	})
}

// UpdateWindShearHeight sets the "wind_shear_height" field to the value that was provided on create.
func (u *ForecastUpsertBulk) UpdateWindShearHeight() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateWindShearHeight()
	})
}

// ClearWindShearHeight clears the value of the "wind_shear_height" field.
func (u *ForecastUpsertBulk) ClearWindShearHeight() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearWindShearHeight()
	})
}

// SetWindShearDirection sets the "wind_shear_direction" field.
func (u *ForecastUpsertBulk) SetWindShearDirection(v int) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.SetWindShearDirection(v)
	})
}

// AddWindShearDirection adds v to the "wind_shear_direction" field.
func (u *ForecastUpsertBulk) AddWindShearDirection(v int) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.AddWindShearDirection(v)
	})
}

// UpdateWindShearDirection sets the "wind_shear_direction" field to the value that was provided on create.
func (u *ForecastUpsertBulk) UpdateWindShearDirection() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateWindShearDirection()
	})
}

// ClearWindShearDirection clears the value of the "wind_shear_direction" field.
func (u *ForecastUpsertBulk) ClearWindShearDirection() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearWindShearDirection()
	})
}

// SetWindShearSpeed sets the "wind_shear_speed" field.
func (u *ForecastUpsertBulk) SetWindShearSpeed(v int) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.SetWindShearSpeed(v)
	})
}

// AddWindShearSpeed adds v to the "wind_shear_speed" field.
func (u *ForecastUpsertBulk) AddWindShearSpeed(v int) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.AddWindShearSpeed(v)
	})
}

// UpdateWindShearSpeed sets the "wind_shear_speed" field to the value that was provided on create.
func (u *ForecastUpsertBulk) UpdateWindShearSpeed() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateWindShearSpeed()
	})
}

// ClearWindShearSpeed clears the value of the "wind_shear_speed" field.
func (u *ForecastUpsertBulk) ClearWindShearSpeed() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearWindShearSpeed()
	})
}

// SetVisibilityHorizontal sets the "visibility_horizontal" field.
func (u *ForecastUpsertBulk) SetVisibilityHorizontal(v float64) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.SetVisibilityHorizontal(v)
	})
}

// AddVisibilityHorizontal adds v to the "visibility_horizontal" field.
func (u *ForecastUpsertBulk) AddVisibilityHorizontal(v float64) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.AddVisibilityHorizontal(v)
	})
}

// UpdateVisibilityHorizontal sets the "visibility_horizontal" field to the value that was provided on create.
func (u *ForecastUpsertBulk) UpdateVisibilityHorizontal() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateVisibilityHorizontal()
	})
}

// ClearVisibilityHorizontal clears the value of the "visibility_horizontal" field.
func (u *ForecastUpsertBulk) ClearVisibilityHorizontal() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearVisibilityHorizontal()
	})
}

// SetVisibilityHorizontalIsMoreThan sets the "visibility_horizontal_is_more_than" field.
func (u *ForecastUpsertBulk) SetVisibilityHorizontalIsMoreThan(v bool) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.SetVisibilityHorizontalIsMoreThan(v)
	})
}

// UpdateVisibilityHorizontalIsMoreThan sets the "visibility_horizontal_is_more_than" field to the value that was provided on create.
func (u *ForecastUpsertBulk) UpdateVisibilityHorizontalIsMoreThan() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateVisibilityHorizontalIsMoreThan()
	})
}

// SetVisibilityVertical sets the "visibility_vertical" field.
func (u *ForecastUpsertBulk) SetVisibilityVertical(v int) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.SetVisibilityVertical(v)
	})
}

// AddVisibilityVertical adds v to the "visibility_vertical" field.
func (u *ForecastUpsertBulk) AddVisibilityVertical(v int) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.AddVisibilityVertical(v)
	})
}

// UpdateVisibilityVertical sets the "visibility_vertical" field to the value that was provided on create.
func (u *ForecastUpsertBulk) UpdateVisibilityVertical() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateVisibilityVertical()
	})
}

// ClearVisibilityVertical clears the value of the "visibility_vertical" field.
func (u *ForecastUpsertBulk) ClearVisibilityVertical() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearVisibilityVertical()
	})
}

// SetAltimeter sets the "altimeter" field.
func (u *ForecastUpsertBulk) SetAltimeter(v float64) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.SetAltimeter(v)
	})
}

// AddAltimeter adds v to the "altimeter" field.
func (u *ForecastUpsertBulk) AddAltimeter(v float64) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.AddAltimeter(v)
	})
}

// UpdateAltimeter sets the "altimeter" field to the value that was provided on create.
func (u *ForecastUpsertBulk) UpdateAltimeter() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateAltimeter()
	})
}

// ClearAltimeter clears the value of the "altimeter" field.
func (u *ForecastUpsertBulk) ClearAltimeter() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearAltimeter()
	})
}

// SetWeather sets the "weather" field.
func (u *ForecastUpsertBulk) SetWeather(v string) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.SetWeather(v)
	})
}

// UpdateWeather sets the "weather" field to the value that was provided on create.
func (u *ForecastUpsertBulk) UpdateWeather() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateWeather()
	})
}

// ClearWeather clears the value of the "weather" field.
func (u *ForecastUpsertBulk) ClearWeather() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearWeather()
	})
}

// SetNotDecoded sets the "not_decoded" field.
func (u *ForecastUpsertBulk) SetNotDecoded(v string) *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.SetNotDecoded(v)
	})
}

// UpdateNotDecoded sets the "not_decoded" field to the value that was provided on create.
func (u *ForecastUpsertBulk) UpdateNotDecoded() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.UpdateNotDecoded()
	})
}

// ClearNotDecoded clears the value of the "not_decoded" field.
func (u *ForecastUpsertBulk) ClearNotDecoded() *ForecastUpsertBulk {
	return u.Update(func(s *ForecastUpsert) {
		s.ClearNotDecoded()
	})
}

// Exec executes the query.
func (u *ForecastUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ForecastCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ForecastCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ForecastUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
