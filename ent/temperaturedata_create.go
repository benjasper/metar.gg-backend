// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"metar.gg/ent/temperaturedata"
)

// TemperatureDataCreate is the builder for creating a TemperatureData entity.
type TemperatureDataCreate struct {
	config
	mutation *TemperatureDataMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetValidTime sets the "valid_time" field.
func (tdc *TemperatureDataCreate) SetValidTime(t time.Time) *TemperatureDataCreate {
	tdc.mutation.SetValidTime(t)
	return tdc
}

// SetTemperature sets the "temperature" field.
func (tdc *TemperatureDataCreate) SetTemperature(f float64) *TemperatureDataCreate {
	tdc.mutation.SetTemperature(f)
	return tdc
}

// SetMinTemperature sets the "min_temperature" field.
func (tdc *TemperatureDataCreate) SetMinTemperature(f float64) *TemperatureDataCreate {
	tdc.mutation.SetMinTemperature(f)
	return tdc
}

// SetNillableMinTemperature sets the "min_temperature" field if the given value is not nil.
func (tdc *TemperatureDataCreate) SetNillableMinTemperature(f *float64) *TemperatureDataCreate {
	if f != nil {
		tdc.SetMinTemperature(*f)
	}
	return tdc
}

// SetMaxTemperature sets the "max_temperature" field.
func (tdc *TemperatureDataCreate) SetMaxTemperature(f float64) *TemperatureDataCreate {
	tdc.mutation.SetMaxTemperature(f)
	return tdc
}

// SetNillableMaxTemperature sets the "max_temperature" field if the given value is not nil.
func (tdc *TemperatureDataCreate) SetNillableMaxTemperature(f *float64) *TemperatureDataCreate {
	if f != nil {
		tdc.SetMaxTemperature(*f)
	}
	return tdc
}

// SetID sets the "id" field.
func (tdc *TemperatureDataCreate) SetID(u uuid.UUID) *TemperatureDataCreate {
	tdc.mutation.SetID(u)
	return tdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tdc *TemperatureDataCreate) SetNillableID(u *uuid.UUID) *TemperatureDataCreate {
	if u != nil {
		tdc.SetID(*u)
	}
	return tdc
}

// Mutation returns the TemperatureDataMutation object of the builder.
func (tdc *TemperatureDataCreate) Mutation() *TemperatureDataMutation {
	return tdc.mutation
}

// Save creates the TemperatureData in the database.
func (tdc *TemperatureDataCreate) Save(ctx context.Context) (*TemperatureData, error) {
	tdc.defaults()
	return withHooks[*TemperatureData, TemperatureDataMutation](ctx, tdc.sqlSave, tdc.mutation, tdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tdc *TemperatureDataCreate) SaveX(ctx context.Context) *TemperatureData {
	v, err := tdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdc *TemperatureDataCreate) Exec(ctx context.Context) error {
	_, err := tdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdc *TemperatureDataCreate) ExecX(ctx context.Context) {
	if err := tdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tdc *TemperatureDataCreate) defaults() {
	if _, ok := tdc.mutation.ID(); !ok {
		v := temperaturedata.DefaultID()
		tdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tdc *TemperatureDataCreate) check() error {
	if _, ok := tdc.mutation.ValidTime(); !ok {
		return &ValidationError{Name: "valid_time", err: errors.New(`ent: missing required field "TemperatureData.valid_time"`)}
	}
	if _, ok := tdc.mutation.Temperature(); !ok {
		return &ValidationError{Name: "temperature", err: errors.New(`ent: missing required field "TemperatureData.temperature"`)}
	}
	return nil
}

func (tdc *TemperatureDataCreate) sqlSave(ctx context.Context) (*TemperatureData, error) {
	if err := tdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tdc.mutation.id = &_node.ID
	tdc.mutation.done = true
	return _node, nil
}

func (tdc *TemperatureDataCreate) createSpec() (*TemperatureData, *sqlgraph.CreateSpec) {
	var (
		_node = &TemperatureData{config: tdc.config}
		_spec = sqlgraph.NewCreateSpec(temperaturedata.Table, sqlgraph.NewFieldSpec(temperaturedata.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = tdc.conflict
	if id, ok := tdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tdc.mutation.ValidTime(); ok {
		_spec.SetField(temperaturedata.FieldValidTime, field.TypeTime, value)
		_node.ValidTime = value
	}
	if value, ok := tdc.mutation.Temperature(); ok {
		_spec.SetField(temperaturedata.FieldTemperature, field.TypeFloat64, value)
		_node.Temperature = value
	}
	if value, ok := tdc.mutation.MinTemperature(); ok {
		_spec.SetField(temperaturedata.FieldMinTemperature, field.TypeFloat64, value)
		_node.MinTemperature = &value
	}
	if value, ok := tdc.mutation.MaxTemperature(); ok {
		_spec.SetField(temperaturedata.FieldMaxTemperature, field.TypeFloat64, value)
		_node.MaxTemperature = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TemperatureData.Create().
//		SetValidTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TemperatureDataUpsert) {
//			SetValidTime(v+v).
//		}).
//		Exec(ctx)
func (tdc *TemperatureDataCreate) OnConflict(opts ...sql.ConflictOption) *TemperatureDataUpsertOne {
	tdc.conflict = opts
	return &TemperatureDataUpsertOne{
		create: tdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TemperatureData.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tdc *TemperatureDataCreate) OnConflictColumns(columns ...string) *TemperatureDataUpsertOne {
	tdc.conflict = append(tdc.conflict, sql.ConflictColumns(columns...))
	return &TemperatureDataUpsertOne{
		create: tdc,
	}
}

type (
	// TemperatureDataUpsertOne is the builder for "upsert"-ing
	//  one TemperatureData node.
	TemperatureDataUpsertOne struct {
		create *TemperatureDataCreate
	}

	// TemperatureDataUpsert is the "OnConflict" setter.
	TemperatureDataUpsert struct {
		*sql.UpdateSet
	}
)

// SetValidTime sets the "valid_time" field.
func (u *TemperatureDataUpsert) SetValidTime(v time.Time) *TemperatureDataUpsert {
	u.Set(temperaturedata.FieldValidTime, v)
	return u
}

// UpdateValidTime sets the "valid_time" field to the value that was provided on create.
func (u *TemperatureDataUpsert) UpdateValidTime() *TemperatureDataUpsert {
	u.SetExcluded(temperaturedata.FieldValidTime)
	return u
}

// SetTemperature sets the "temperature" field.
func (u *TemperatureDataUpsert) SetTemperature(v float64) *TemperatureDataUpsert {
	u.Set(temperaturedata.FieldTemperature, v)
	return u
}

// UpdateTemperature sets the "temperature" field to the value that was provided on create.
func (u *TemperatureDataUpsert) UpdateTemperature() *TemperatureDataUpsert {
	u.SetExcluded(temperaturedata.FieldTemperature)
	return u
}

// AddTemperature adds v to the "temperature" field.
func (u *TemperatureDataUpsert) AddTemperature(v float64) *TemperatureDataUpsert {
	u.Add(temperaturedata.FieldTemperature, v)
	return u
}

// SetMinTemperature sets the "min_temperature" field.
func (u *TemperatureDataUpsert) SetMinTemperature(v float64) *TemperatureDataUpsert {
	u.Set(temperaturedata.FieldMinTemperature, v)
	return u
}

// UpdateMinTemperature sets the "min_temperature" field to the value that was provided on create.
func (u *TemperatureDataUpsert) UpdateMinTemperature() *TemperatureDataUpsert {
	u.SetExcluded(temperaturedata.FieldMinTemperature)
	return u
}

// AddMinTemperature adds v to the "min_temperature" field.
func (u *TemperatureDataUpsert) AddMinTemperature(v float64) *TemperatureDataUpsert {
	u.Add(temperaturedata.FieldMinTemperature, v)
	return u
}

// ClearMinTemperature clears the value of the "min_temperature" field.
func (u *TemperatureDataUpsert) ClearMinTemperature() *TemperatureDataUpsert {
	u.SetNull(temperaturedata.FieldMinTemperature)
	return u
}

// SetMaxTemperature sets the "max_temperature" field.
func (u *TemperatureDataUpsert) SetMaxTemperature(v float64) *TemperatureDataUpsert {
	u.Set(temperaturedata.FieldMaxTemperature, v)
	return u
}

// UpdateMaxTemperature sets the "max_temperature" field to the value that was provided on create.
func (u *TemperatureDataUpsert) UpdateMaxTemperature() *TemperatureDataUpsert {
	u.SetExcluded(temperaturedata.FieldMaxTemperature)
	return u
}

// AddMaxTemperature adds v to the "max_temperature" field.
func (u *TemperatureDataUpsert) AddMaxTemperature(v float64) *TemperatureDataUpsert {
	u.Add(temperaturedata.FieldMaxTemperature, v)
	return u
}

// ClearMaxTemperature clears the value of the "max_temperature" field.
func (u *TemperatureDataUpsert) ClearMaxTemperature() *TemperatureDataUpsert {
	u.SetNull(temperaturedata.FieldMaxTemperature)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TemperatureData.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(temperaturedata.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TemperatureDataUpsertOne) UpdateNewValues() *TemperatureDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(temperaturedata.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TemperatureData.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TemperatureDataUpsertOne) Ignore() *TemperatureDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TemperatureDataUpsertOne) DoNothing() *TemperatureDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TemperatureDataCreate.OnConflict
// documentation for more info.
func (u *TemperatureDataUpsertOne) Update(set func(*TemperatureDataUpsert)) *TemperatureDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TemperatureDataUpsert{UpdateSet: update})
	}))
	return u
}

// SetValidTime sets the "valid_time" field.
func (u *TemperatureDataUpsertOne) SetValidTime(v time.Time) *TemperatureDataUpsertOne {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.SetValidTime(v)
	})
}

// UpdateValidTime sets the "valid_time" field to the value that was provided on create.
func (u *TemperatureDataUpsertOne) UpdateValidTime() *TemperatureDataUpsertOne {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.UpdateValidTime()
	})
}

// SetTemperature sets the "temperature" field.
func (u *TemperatureDataUpsertOne) SetTemperature(v float64) *TemperatureDataUpsertOne {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.SetTemperature(v)
	})
}

// AddTemperature adds v to the "temperature" field.
func (u *TemperatureDataUpsertOne) AddTemperature(v float64) *TemperatureDataUpsertOne {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.AddTemperature(v)
	})
}

// UpdateTemperature sets the "temperature" field to the value that was provided on create.
func (u *TemperatureDataUpsertOne) UpdateTemperature() *TemperatureDataUpsertOne {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.UpdateTemperature()
	})
}

// SetMinTemperature sets the "min_temperature" field.
func (u *TemperatureDataUpsertOne) SetMinTemperature(v float64) *TemperatureDataUpsertOne {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.SetMinTemperature(v)
	})
}

// AddMinTemperature adds v to the "min_temperature" field.
func (u *TemperatureDataUpsertOne) AddMinTemperature(v float64) *TemperatureDataUpsertOne {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.AddMinTemperature(v)
	})
}

// UpdateMinTemperature sets the "min_temperature" field to the value that was provided on create.
func (u *TemperatureDataUpsertOne) UpdateMinTemperature() *TemperatureDataUpsertOne {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.UpdateMinTemperature()
	})
}

// ClearMinTemperature clears the value of the "min_temperature" field.
func (u *TemperatureDataUpsertOne) ClearMinTemperature() *TemperatureDataUpsertOne {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.ClearMinTemperature()
	})
}

// SetMaxTemperature sets the "max_temperature" field.
func (u *TemperatureDataUpsertOne) SetMaxTemperature(v float64) *TemperatureDataUpsertOne {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.SetMaxTemperature(v)
	})
}

// AddMaxTemperature adds v to the "max_temperature" field.
func (u *TemperatureDataUpsertOne) AddMaxTemperature(v float64) *TemperatureDataUpsertOne {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.AddMaxTemperature(v)
	})
}

// UpdateMaxTemperature sets the "max_temperature" field to the value that was provided on create.
func (u *TemperatureDataUpsertOne) UpdateMaxTemperature() *TemperatureDataUpsertOne {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.UpdateMaxTemperature()
	})
}

// ClearMaxTemperature clears the value of the "max_temperature" field.
func (u *TemperatureDataUpsertOne) ClearMaxTemperature() *TemperatureDataUpsertOne {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.ClearMaxTemperature()
	})
}

// Exec executes the query.
func (u *TemperatureDataUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TemperatureDataCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TemperatureDataUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TemperatureDataUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TemperatureDataUpsertOne.ID is not supported by MySQL driver. Use TemperatureDataUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TemperatureDataUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TemperatureDataCreateBulk is the builder for creating many TemperatureData entities in bulk.
type TemperatureDataCreateBulk struct {
	config
	builders []*TemperatureDataCreate
	conflict []sql.ConflictOption
}

// Save creates the TemperatureData entities in the database.
func (tdcb *TemperatureDataCreateBulk) Save(ctx context.Context) ([]*TemperatureData, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tdcb.builders))
	nodes := make([]*TemperatureData, len(tdcb.builders))
	mutators := make([]Mutator, len(tdcb.builders))
	for i := range tdcb.builders {
		func(i int, root context.Context) {
			builder := tdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TemperatureDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tdcb *TemperatureDataCreateBulk) SaveX(ctx context.Context) []*TemperatureData {
	v, err := tdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdcb *TemperatureDataCreateBulk) Exec(ctx context.Context) error {
	_, err := tdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdcb *TemperatureDataCreateBulk) ExecX(ctx context.Context) {
	if err := tdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TemperatureData.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TemperatureDataUpsert) {
//			SetValidTime(v+v).
//		}).
//		Exec(ctx)
func (tdcb *TemperatureDataCreateBulk) OnConflict(opts ...sql.ConflictOption) *TemperatureDataUpsertBulk {
	tdcb.conflict = opts
	return &TemperatureDataUpsertBulk{
		create: tdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TemperatureData.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tdcb *TemperatureDataCreateBulk) OnConflictColumns(columns ...string) *TemperatureDataUpsertBulk {
	tdcb.conflict = append(tdcb.conflict, sql.ConflictColumns(columns...))
	return &TemperatureDataUpsertBulk{
		create: tdcb,
	}
}

// TemperatureDataUpsertBulk is the builder for "upsert"-ing
// a bulk of TemperatureData nodes.
type TemperatureDataUpsertBulk struct {
	create *TemperatureDataCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TemperatureData.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(temperaturedata.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TemperatureDataUpsertBulk) UpdateNewValues() *TemperatureDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(temperaturedata.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TemperatureData.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TemperatureDataUpsertBulk) Ignore() *TemperatureDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TemperatureDataUpsertBulk) DoNothing() *TemperatureDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TemperatureDataCreateBulk.OnConflict
// documentation for more info.
func (u *TemperatureDataUpsertBulk) Update(set func(*TemperatureDataUpsert)) *TemperatureDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TemperatureDataUpsert{UpdateSet: update})
	}))
	return u
}

// SetValidTime sets the "valid_time" field.
func (u *TemperatureDataUpsertBulk) SetValidTime(v time.Time) *TemperatureDataUpsertBulk {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.SetValidTime(v)
	})
}

// UpdateValidTime sets the "valid_time" field to the value that was provided on create.
func (u *TemperatureDataUpsertBulk) UpdateValidTime() *TemperatureDataUpsertBulk {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.UpdateValidTime()
	})
}

// SetTemperature sets the "temperature" field.
func (u *TemperatureDataUpsertBulk) SetTemperature(v float64) *TemperatureDataUpsertBulk {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.SetTemperature(v)
	})
}

// AddTemperature adds v to the "temperature" field.
func (u *TemperatureDataUpsertBulk) AddTemperature(v float64) *TemperatureDataUpsertBulk {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.AddTemperature(v)
	})
}

// UpdateTemperature sets the "temperature" field to the value that was provided on create.
func (u *TemperatureDataUpsertBulk) UpdateTemperature() *TemperatureDataUpsertBulk {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.UpdateTemperature()
	})
}

// SetMinTemperature sets the "min_temperature" field.
func (u *TemperatureDataUpsertBulk) SetMinTemperature(v float64) *TemperatureDataUpsertBulk {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.SetMinTemperature(v)
	})
}

// AddMinTemperature adds v to the "min_temperature" field.
func (u *TemperatureDataUpsertBulk) AddMinTemperature(v float64) *TemperatureDataUpsertBulk {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.AddMinTemperature(v)
	})
}

// UpdateMinTemperature sets the "min_temperature" field to the value that was provided on create.
func (u *TemperatureDataUpsertBulk) UpdateMinTemperature() *TemperatureDataUpsertBulk {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.UpdateMinTemperature()
	})
}

// ClearMinTemperature clears the value of the "min_temperature" field.
func (u *TemperatureDataUpsertBulk) ClearMinTemperature() *TemperatureDataUpsertBulk {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.ClearMinTemperature()
	})
}

// SetMaxTemperature sets the "max_temperature" field.
func (u *TemperatureDataUpsertBulk) SetMaxTemperature(v float64) *TemperatureDataUpsertBulk {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.SetMaxTemperature(v)
	})
}

// AddMaxTemperature adds v to the "max_temperature" field.
func (u *TemperatureDataUpsertBulk) AddMaxTemperature(v float64) *TemperatureDataUpsertBulk {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.AddMaxTemperature(v)
	})
}

// UpdateMaxTemperature sets the "max_temperature" field to the value that was provided on create.
func (u *TemperatureDataUpsertBulk) UpdateMaxTemperature() *TemperatureDataUpsertBulk {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.UpdateMaxTemperature()
	})
}

// ClearMaxTemperature clears the value of the "max_temperature" field.
func (u *TemperatureDataUpsertBulk) ClearMaxTemperature() *TemperatureDataUpsertBulk {
	return u.Update(func(s *TemperatureDataUpsert) {
		s.ClearMaxTemperature()
	})
}

// Exec executes the query.
func (u *TemperatureDataUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TemperatureDataCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TemperatureDataCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TemperatureDataUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
