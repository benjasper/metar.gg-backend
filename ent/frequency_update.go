// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"metar.gg/ent/airport"
	"metar.gg/ent/frequency"
	"metar.gg/ent/predicate"
)

// FrequencyUpdate is the builder for updating Frequency entities.
type FrequencyUpdate struct {
	config
	hooks    []Hook
	mutation *FrequencyMutation
}

// Where appends a list predicates to the FrequencyUpdate builder.
func (fu *FrequencyUpdate) Where(ps ...predicate.Frequency) *FrequencyUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetHash sets the "hash" field.
func (fu *FrequencyUpdate) SetHash(s string) *FrequencyUpdate {
	fu.mutation.SetHash(s)
	return fu
}

// SetImportFlag sets the "import_flag" field.
func (fu *FrequencyUpdate) SetImportFlag(b bool) *FrequencyUpdate {
	fu.mutation.SetImportFlag(b)
	return fu
}

// SetNillableImportFlag sets the "import_flag" field if the given value is not nil.
func (fu *FrequencyUpdate) SetNillableImportFlag(b *bool) *FrequencyUpdate {
	if b != nil {
		fu.SetImportFlag(*b)
	}
	return fu
}

// SetLastUpdated sets the "last_updated" field.
func (fu *FrequencyUpdate) SetLastUpdated(t time.Time) *FrequencyUpdate {
	fu.mutation.SetLastUpdated(t)
	return fu
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (fu *FrequencyUpdate) SetNillableLastUpdated(t *time.Time) *FrequencyUpdate {
	if t != nil {
		fu.SetLastUpdated(*t)
	}
	return fu
}

// SetType sets the "type" field.
func (fu *FrequencyUpdate) SetType(s string) *FrequencyUpdate {
	fu.mutation.SetType(s)
	return fu
}

// SetDescription sets the "description" field.
func (fu *FrequencyUpdate) SetDescription(s string) *FrequencyUpdate {
	fu.mutation.SetDescription(s)
	return fu
}

// SetFrequency sets the "frequency" field.
func (fu *FrequencyUpdate) SetFrequency(f float64) *FrequencyUpdate {
	fu.mutation.ResetFrequency()
	fu.mutation.SetFrequency(f)
	return fu
}

// AddFrequency adds f to the "frequency" field.
func (fu *FrequencyUpdate) AddFrequency(f float64) *FrequencyUpdate {
	fu.mutation.AddFrequency(f)
	return fu
}

// SetAirportID sets the "airport" edge to the Airport entity by ID.
func (fu *FrequencyUpdate) SetAirportID(id int) *FrequencyUpdate {
	fu.mutation.SetAirportID(id)
	return fu
}

// SetNillableAirportID sets the "airport" edge to the Airport entity by ID if the given value is not nil.
func (fu *FrequencyUpdate) SetNillableAirportID(id *int) *FrequencyUpdate {
	if id != nil {
		fu = fu.SetAirportID(*id)
	}
	return fu
}

// SetAirport sets the "airport" edge to the Airport entity.
func (fu *FrequencyUpdate) SetAirport(a *Airport) *FrequencyUpdate {
	return fu.SetAirportID(a.ID)
}

// Mutation returns the FrequencyMutation object of the builder.
func (fu *FrequencyUpdate) Mutation() *FrequencyMutation {
	return fu.mutation
}

// ClearAirport clears the "airport" edge to the Airport entity.
func (fu *FrequencyUpdate) ClearAirport() *FrequencyUpdate {
	fu.mutation.ClearAirport()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FrequencyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fu.hooks) == 0 {
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FrequencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			if fu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FrequencyUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FrequencyUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FrequencyUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FrequencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   frequency.Table,
			Columns: frequency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: frequency.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Hash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frequency.FieldHash,
		})
	}
	if value, ok := fu.mutation.ImportFlag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: frequency.FieldImportFlag,
		})
	}
	if value, ok := fu.mutation.LastUpdated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: frequency.FieldLastUpdated,
		})
	}
	if value, ok := fu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frequency.FieldType,
		})
	}
	if value, ok := fu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frequency.FieldDescription,
		})
	}
	if value, ok := fu.mutation.Frequency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: frequency.FieldFrequency,
		})
	}
	if value, ok := fu.mutation.AddedFrequency(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: frequency.FieldFrequency,
		})
	}
	if fu.mutation.AirportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   frequency.AirportTable,
			Columns: []string{frequency.AirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: airport.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.AirportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   frequency.AirportTable,
			Columns: []string{frequency.AirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: airport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{frequency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// FrequencyUpdateOne is the builder for updating a single Frequency entity.
type FrequencyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FrequencyMutation
}

// SetHash sets the "hash" field.
func (fuo *FrequencyUpdateOne) SetHash(s string) *FrequencyUpdateOne {
	fuo.mutation.SetHash(s)
	return fuo
}

// SetImportFlag sets the "import_flag" field.
func (fuo *FrequencyUpdateOne) SetImportFlag(b bool) *FrequencyUpdateOne {
	fuo.mutation.SetImportFlag(b)
	return fuo
}

// SetNillableImportFlag sets the "import_flag" field if the given value is not nil.
func (fuo *FrequencyUpdateOne) SetNillableImportFlag(b *bool) *FrequencyUpdateOne {
	if b != nil {
		fuo.SetImportFlag(*b)
	}
	return fuo
}

// SetLastUpdated sets the "last_updated" field.
func (fuo *FrequencyUpdateOne) SetLastUpdated(t time.Time) *FrequencyUpdateOne {
	fuo.mutation.SetLastUpdated(t)
	return fuo
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (fuo *FrequencyUpdateOne) SetNillableLastUpdated(t *time.Time) *FrequencyUpdateOne {
	if t != nil {
		fuo.SetLastUpdated(*t)
	}
	return fuo
}

// SetType sets the "type" field.
func (fuo *FrequencyUpdateOne) SetType(s string) *FrequencyUpdateOne {
	fuo.mutation.SetType(s)
	return fuo
}

// SetDescription sets the "description" field.
func (fuo *FrequencyUpdateOne) SetDescription(s string) *FrequencyUpdateOne {
	fuo.mutation.SetDescription(s)
	return fuo
}

// SetFrequency sets the "frequency" field.
func (fuo *FrequencyUpdateOne) SetFrequency(f float64) *FrequencyUpdateOne {
	fuo.mutation.ResetFrequency()
	fuo.mutation.SetFrequency(f)
	return fuo
}

// AddFrequency adds f to the "frequency" field.
func (fuo *FrequencyUpdateOne) AddFrequency(f float64) *FrequencyUpdateOne {
	fuo.mutation.AddFrequency(f)
	return fuo
}

// SetAirportID sets the "airport" edge to the Airport entity by ID.
func (fuo *FrequencyUpdateOne) SetAirportID(id int) *FrequencyUpdateOne {
	fuo.mutation.SetAirportID(id)
	return fuo
}

// SetNillableAirportID sets the "airport" edge to the Airport entity by ID if the given value is not nil.
func (fuo *FrequencyUpdateOne) SetNillableAirportID(id *int) *FrequencyUpdateOne {
	if id != nil {
		fuo = fuo.SetAirportID(*id)
	}
	return fuo
}

// SetAirport sets the "airport" edge to the Airport entity.
func (fuo *FrequencyUpdateOne) SetAirport(a *Airport) *FrequencyUpdateOne {
	return fuo.SetAirportID(a.ID)
}

// Mutation returns the FrequencyMutation object of the builder.
func (fuo *FrequencyUpdateOne) Mutation() *FrequencyMutation {
	return fuo.mutation
}

// ClearAirport clears the "airport" edge to the Airport entity.
func (fuo *FrequencyUpdateOne) ClearAirport() *FrequencyUpdateOne {
	fuo.mutation.ClearAirport()
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FrequencyUpdateOne) Select(field string, fields ...string) *FrequencyUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Frequency entity.
func (fuo *FrequencyUpdateOne) Save(ctx context.Context) (*Frequency, error) {
	var (
		err  error
		node *Frequency
	)
	if len(fuo.hooks) == 0 {
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FrequencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			if fuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Frequency)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FrequencyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FrequencyUpdateOne) SaveX(ctx context.Context) *Frequency {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FrequencyUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FrequencyUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FrequencyUpdateOne) sqlSave(ctx context.Context) (_node *Frequency, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   frequency.Table,
			Columns: frequency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: frequency.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Frequency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, frequency.FieldID)
		for _, f := range fields {
			if !frequency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != frequency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Hash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frequency.FieldHash,
		})
	}
	if value, ok := fuo.mutation.ImportFlag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: frequency.FieldImportFlag,
		})
	}
	if value, ok := fuo.mutation.LastUpdated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: frequency.FieldLastUpdated,
		})
	}
	if value, ok := fuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frequency.FieldType,
		})
	}
	if value, ok := fuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frequency.FieldDescription,
		})
	}
	if value, ok := fuo.mutation.Frequency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: frequency.FieldFrequency,
		})
	}
	if value, ok := fuo.mutation.AddedFrequency(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: frequency.FieldFrequency,
		})
	}
	if fuo.mutation.AirportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   frequency.AirportTable,
			Columns: []string{frequency.AirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: airport.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.AirportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   frequency.AirportTable,
			Columns: []string{frequency.AirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: airport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Frequency{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{frequency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
