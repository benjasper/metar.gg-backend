// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"metar.gg/ent/airport"
	"metar.gg/ent/metar"
	"metar.gg/ent/predicate"
	"metar.gg/ent/taf"
	"metar.gg/ent/weatherstation"
)

// WeatherStationUpdate is the builder for updating WeatherStation entities.
type WeatherStationUpdate struct {
	config
	hooks     []Hook
	mutation  *WeatherStationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WeatherStationUpdate builder.
func (wsu *WeatherStationUpdate) Where(ps ...predicate.WeatherStation) *WeatherStationUpdate {
	wsu.mutation.Where(ps...)
	return wsu
}

// SetLatitude sets the "latitude" field.
func (wsu *WeatherStationUpdate) SetLatitude(f float64) *WeatherStationUpdate {
	wsu.mutation.ResetLatitude()
	wsu.mutation.SetLatitude(f)
	return wsu
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (wsu *WeatherStationUpdate) SetNillableLatitude(f *float64) *WeatherStationUpdate {
	if f != nil {
		wsu.SetLatitude(*f)
	}
	return wsu
}

// AddLatitude adds f to the "latitude" field.
func (wsu *WeatherStationUpdate) AddLatitude(f float64) *WeatherStationUpdate {
	wsu.mutation.AddLatitude(f)
	return wsu
}

// ClearLatitude clears the value of the "latitude" field.
func (wsu *WeatherStationUpdate) ClearLatitude() *WeatherStationUpdate {
	wsu.mutation.ClearLatitude()
	return wsu
}

// SetLongitude sets the "longitude" field.
func (wsu *WeatherStationUpdate) SetLongitude(f float64) *WeatherStationUpdate {
	wsu.mutation.ResetLongitude()
	wsu.mutation.SetLongitude(f)
	return wsu
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (wsu *WeatherStationUpdate) SetNillableLongitude(f *float64) *WeatherStationUpdate {
	if f != nil {
		wsu.SetLongitude(*f)
	}
	return wsu
}

// AddLongitude adds f to the "longitude" field.
func (wsu *WeatherStationUpdate) AddLongitude(f float64) *WeatherStationUpdate {
	wsu.mutation.AddLongitude(f)
	return wsu
}

// ClearLongitude clears the value of the "longitude" field.
func (wsu *WeatherStationUpdate) ClearLongitude() *WeatherStationUpdate {
	wsu.mutation.ClearLongitude()
	return wsu
}

// SetElevation sets the "elevation" field.
func (wsu *WeatherStationUpdate) SetElevation(f float64) *WeatherStationUpdate {
	wsu.mutation.ResetElevation()
	wsu.mutation.SetElevation(f)
	return wsu
}

// SetNillableElevation sets the "elevation" field if the given value is not nil.
func (wsu *WeatherStationUpdate) SetNillableElevation(f *float64) *WeatherStationUpdate {
	if f != nil {
		wsu.SetElevation(*f)
	}
	return wsu
}

// AddElevation adds f to the "elevation" field.
func (wsu *WeatherStationUpdate) AddElevation(f float64) *WeatherStationUpdate {
	wsu.mutation.AddElevation(f)
	return wsu
}

// ClearElevation clears the value of the "elevation" field.
func (wsu *WeatherStationUpdate) ClearElevation() *WeatherStationUpdate {
	wsu.mutation.ClearElevation()
	return wsu
}

// SetHash sets the "hash" field.
func (wsu *WeatherStationUpdate) SetHash(s string) *WeatherStationUpdate {
	wsu.mutation.SetHash(s)
	return wsu
}

// SetAirportID sets the "airport" edge to the Airport entity by ID.
func (wsu *WeatherStationUpdate) SetAirportID(id uuid.UUID) *WeatherStationUpdate {
	wsu.mutation.SetAirportID(id)
	return wsu
}

// SetNillableAirportID sets the "airport" edge to the Airport entity by ID if the given value is not nil.
func (wsu *WeatherStationUpdate) SetNillableAirportID(id *uuid.UUID) *WeatherStationUpdate {
	if id != nil {
		wsu = wsu.SetAirportID(*id)
	}
	return wsu
}

// SetAirport sets the "airport" edge to the Airport entity.
func (wsu *WeatherStationUpdate) SetAirport(a *Airport) *WeatherStationUpdate {
	return wsu.SetAirportID(a.ID)
}

// AddMetarIDs adds the "metars" edge to the Metar entity by IDs.
func (wsu *WeatherStationUpdate) AddMetarIDs(ids ...uuid.UUID) *WeatherStationUpdate {
	wsu.mutation.AddMetarIDs(ids...)
	return wsu
}

// AddMetars adds the "metars" edges to the Metar entity.
func (wsu *WeatherStationUpdate) AddMetars(m ...*Metar) *WeatherStationUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return wsu.AddMetarIDs(ids...)
}

// AddTafIDs adds the "tafs" edge to the Taf entity by IDs.
func (wsu *WeatherStationUpdate) AddTafIDs(ids ...uuid.UUID) *WeatherStationUpdate {
	wsu.mutation.AddTafIDs(ids...)
	return wsu
}

// AddTafs adds the "tafs" edges to the Taf entity.
func (wsu *WeatherStationUpdate) AddTafs(t ...*Taf) *WeatherStationUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wsu.AddTafIDs(ids...)
}

// Mutation returns the WeatherStationMutation object of the builder.
func (wsu *WeatherStationUpdate) Mutation() *WeatherStationMutation {
	return wsu.mutation
}

// ClearAirport clears the "airport" edge to the Airport entity.
func (wsu *WeatherStationUpdate) ClearAirport() *WeatherStationUpdate {
	wsu.mutation.ClearAirport()
	return wsu
}

// ClearMetars clears all "metars" edges to the Metar entity.
func (wsu *WeatherStationUpdate) ClearMetars() *WeatherStationUpdate {
	wsu.mutation.ClearMetars()
	return wsu
}

// RemoveMetarIDs removes the "metars" edge to Metar entities by IDs.
func (wsu *WeatherStationUpdate) RemoveMetarIDs(ids ...uuid.UUID) *WeatherStationUpdate {
	wsu.mutation.RemoveMetarIDs(ids...)
	return wsu
}

// RemoveMetars removes "metars" edges to Metar entities.
func (wsu *WeatherStationUpdate) RemoveMetars(m ...*Metar) *WeatherStationUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return wsu.RemoveMetarIDs(ids...)
}

// ClearTafs clears all "tafs" edges to the Taf entity.
func (wsu *WeatherStationUpdate) ClearTafs() *WeatherStationUpdate {
	wsu.mutation.ClearTafs()
	return wsu
}

// RemoveTafIDs removes the "tafs" edge to Taf entities by IDs.
func (wsu *WeatherStationUpdate) RemoveTafIDs(ids ...uuid.UUID) *WeatherStationUpdate {
	wsu.mutation.RemoveTafIDs(ids...)
	return wsu
}

// RemoveTafs removes "tafs" edges to Taf entities.
func (wsu *WeatherStationUpdate) RemoveTafs(t ...*Taf) *WeatherStationUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wsu.RemoveTafIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wsu *WeatherStationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, WeatherStationMutation](ctx, wsu.sqlSave, wsu.mutation, wsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wsu *WeatherStationUpdate) SaveX(ctx context.Context) int {
	affected, err := wsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wsu *WeatherStationUpdate) Exec(ctx context.Context) error {
	_, err := wsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsu *WeatherStationUpdate) ExecX(ctx context.Context) {
	if err := wsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wsu *WeatherStationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WeatherStationUpdate {
	wsu.modifiers = append(wsu.modifiers, modifiers...)
	return wsu
}

func (wsu *WeatherStationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(weatherstation.Table, weatherstation.Columns, sqlgraph.NewFieldSpec(weatherstation.FieldID, field.TypeUUID))
	if ps := wsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wsu.mutation.Latitude(); ok {
		_spec.SetField(weatherstation.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := wsu.mutation.AddedLatitude(); ok {
		_spec.AddField(weatherstation.FieldLatitude, field.TypeFloat64, value)
	}
	if wsu.mutation.LatitudeCleared() {
		_spec.ClearField(weatherstation.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := wsu.mutation.Longitude(); ok {
		_spec.SetField(weatherstation.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := wsu.mutation.AddedLongitude(); ok {
		_spec.AddField(weatherstation.FieldLongitude, field.TypeFloat64, value)
	}
	if wsu.mutation.LongitudeCleared() {
		_spec.ClearField(weatherstation.FieldLongitude, field.TypeFloat64)
	}
	if value, ok := wsu.mutation.Elevation(); ok {
		_spec.SetField(weatherstation.FieldElevation, field.TypeFloat64, value)
	}
	if value, ok := wsu.mutation.AddedElevation(); ok {
		_spec.AddField(weatherstation.FieldElevation, field.TypeFloat64, value)
	}
	if wsu.mutation.ElevationCleared() {
		_spec.ClearField(weatherstation.FieldElevation, field.TypeFloat64)
	}
	if value, ok := wsu.mutation.Hash(); ok {
		_spec.SetField(weatherstation.FieldHash, field.TypeString, value)
	}
	if wsu.mutation.AirportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   weatherstation.AirportTable,
			Columns: []string{weatherstation.AirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airport.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wsu.mutation.AirportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   weatherstation.AirportTable,
			Columns: []string{weatherstation.AirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wsu.mutation.MetarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weatherstation.MetarsTable,
			Columns: []string{weatherstation.MetarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: metar.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wsu.mutation.RemovedMetarsIDs(); len(nodes) > 0 && !wsu.mutation.MetarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weatherstation.MetarsTable,
			Columns: []string{weatherstation.MetarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: metar.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wsu.mutation.MetarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weatherstation.MetarsTable,
			Columns: []string{weatherstation.MetarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: metar.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wsu.mutation.TafsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weatherstation.TafsTable,
			Columns: []string{weatherstation.TafsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: taf.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wsu.mutation.RemovedTafsIDs(); len(nodes) > 0 && !wsu.mutation.TafsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weatherstation.TafsTable,
			Columns: []string{weatherstation.TafsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: taf.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wsu.mutation.TafsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weatherstation.TafsTable,
			Columns: []string{weatherstation.TafsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: taf.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weatherstation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wsu.mutation.done = true
	return n, nil
}

// WeatherStationUpdateOne is the builder for updating a single WeatherStation entity.
type WeatherStationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WeatherStationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetLatitude sets the "latitude" field.
func (wsuo *WeatherStationUpdateOne) SetLatitude(f float64) *WeatherStationUpdateOne {
	wsuo.mutation.ResetLatitude()
	wsuo.mutation.SetLatitude(f)
	return wsuo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (wsuo *WeatherStationUpdateOne) SetNillableLatitude(f *float64) *WeatherStationUpdateOne {
	if f != nil {
		wsuo.SetLatitude(*f)
	}
	return wsuo
}

// AddLatitude adds f to the "latitude" field.
func (wsuo *WeatherStationUpdateOne) AddLatitude(f float64) *WeatherStationUpdateOne {
	wsuo.mutation.AddLatitude(f)
	return wsuo
}

// ClearLatitude clears the value of the "latitude" field.
func (wsuo *WeatherStationUpdateOne) ClearLatitude() *WeatherStationUpdateOne {
	wsuo.mutation.ClearLatitude()
	return wsuo
}

// SetLongitude sets the "longitude" field.
func (wsuo *WeatherStationUpdateOne) SetLongitude(f float64) *WeatherStationUpdateOne {
	wsuo.mutation.ResetLongitude()
	wsuo.mutation.SetLongitude(f)
	return wsuo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (wsuo *WeatherStationUpdateOne) SetNillableLongitude(f *float64) *WeatherStationUpdateOne {
	if f != nil {
		wsuo.SetLongitude(*f)
	}
	return wsuo
}

// AddLongitude adds f to the "longitude" field.
func (wsuo *WeatherStationUpdateOne) AddLongitude(f float64) *WeatherStationUpdateOne {
	wsuo.mutation.AddLongitude(f)
	return wsuo
}

// ClearLongitude clears the value of the "longitude" field.
func (wsuo *WeatherStationUpdateOne) ClearLongitude() *WeatherStationUpdateOne {
	wsuo.mutation.ClearLongitude()
	return wsuo
}

// SetElevation sets the "elevation" field.
func (wsuo *WeatherStationUpdateOne) SetElevation(f float64) *WeatherStationUpdateOne {
	wsuo.mutation.ResetElevation()
	wsuo.mutation.SetElevation(f)
	return wsuo
}

// SetNillableElevation sets the "elevation" field if the given value is not nil.
func (wsuo *WeatherStationUpdateOne) SetNillableElevation(f *float64) *WeatherStationUpdateOne {
	if f != nil {
		wsuo.SetElevation(*f)
	}
	return wsuo
}

// AddElevation adds f to the "elevation" field.
func (wsuo *WeatherStationUpdateOne) AddElevation(f float64) *WeatherStationUpdateOne {
	wsuo.mutation.AddElevation(f)
	return wsuo
}

// ClearElevation clears the value of the "elevation" field.
func (wsuo *WeatherStationUpdateOne) ClearElevation() *WeatherStationUpdateOne {
	wsuo.mutation.ClearElevation()
	return wsuo
}

// SetHash sets the "hash" field.
func (wsuo *WeatherStationUpdateOne) SetHash(s string) *WeatherStationUpdateOne {
	wsuo.mutation.SetHash(s)
	return wsuo
}

// SetAirportID sets the "airport" edge to the Airport entity by ID.
func (wsuo *WeatherStationUpdateOne) SetAirportID(id uuid.UUID) *WeatherStationUpdateOne {
	wsuo.mutation.SetAirportID(id)
	return wsuo
}

// SetNillableAirportID sets the "airport" edge to the Airport entity by ID if the given value is not nil.
func (wsuo *WeatherStationUpdateOne) SetNillableAirportID(id *uuid.UUID) *WeatherStationUpdateOne {
	if id != nil {
		wsuo = wsuo.SetAirportID(*id)
	}
	return wsuo
}

// SetAirport sets the "airport" edge to the Airport entity.
func (wsuo *WeatherStationUpdateOne) SetAirport(a *Airport) *WeatherStationUpdateOne {
	return wsuo.SetAirportID(a.ID)
}

// AddMetarIDs adds the "metars" edge to the Metar entity by IDs.
func (wsuo *WeatherStationUpdateOne) AddMetarIDs(ids ...uuid.UUID) *WeatherStationUpdateOne {
	wsuo.mutation.AddMetarIDs(ids...)
	return wsuo
}

// AddMetars adds the "metars" edges to the Metar entity.
func (wsuo *WeatherStationUpdateOne) AddMetars(m ...*Metar) *WeatherStationUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return wsuo.AddMetarIDs(ids...)
}

// AddTafIDs adds the "tafs" edge to the Taf entity by IDs.
func (wsuo *WeatherStationUpdateOne) AddTafIDs(ids ...uuid.UUID) *WeatherStationUpdateOne {
	wsuo.mutation.AddTafIDs(ids...)
	return wsuo
}

// AddTafs adds the "tafs" edges to the Taf entity.
func (wsuo *WeatherStationUpdateOne) AddTafs(t ...*Taf) *WeatherStationUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wsuo.AddTafIDs(ids...)
}

// Mutation returns the WeatherStationMutation object of the builder.
func (wsuo *WeatherStationUpdateOne) Mutation() *WeatherStationMutation {
	return wsuo.mutation
}

// ClearAirport clears the "airport" edge to the Airport entity.
func (wsuo *WeatherStationUpdateOne) ClearAirport() *WeatherStationUpdateOne {
	wsuo.mutation.ClearAirport()
	return wsuo
}

// ClearMetars clears all "metars" edges to the Metar entity.
func (wsuo *WeatherStationUpdateOne) ClearMetars() *WeatherStationUpdateOne {
	wsuo.mutation.ClearMetars()
	return wsuo
}

// RemoveMetarIDs removes the "metars" edge to Metar entities by IDs.
func (wsuo *WeatherStationUpdateOne) RemoveMetarIDs(ids ...uuid.UUID) *WeatherStationUpdateOne {
	wsuo.mutation.RemoveMetarIDs(ids...)
	return wsuo
}

// RemoveMetars removes "metars" edges to Metar entities.
func (wsuo *WeatherStationUpdateOne) RemoveMetars(m ...*Metar) *WeatherStationUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return wsuo.RemoveMetarIDs(ids...)
}

// ClearTafs clears all "tafs" edges to the Taf entity.
func (wsuo *WeatherStationUpdateOne) ClearTafs() *WeatherStationUpdateOne {
	wsuo.mutation.ClearTafs()
	return wsuo
}

// RemoveTafIDs removes the "tafs" edge to Taf entities by IDs.
func (wsuo *WeatherStationUpdateOne) RemoveTafIDs(ids ...uuid.UUID) *WeatherStationUpdateOne {
	wsuo.mutation.RemoveTafIDs(ids...)
	return wsuo
}

// RemoveTafs removes "tafs" edges to Taf entities.
func (wsuo *WeatherStationUpdateOne) RemoveTafs(t ...*Taf) *WeatherStationUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wsuo.RemoveTafIDs(ids...)
}

// Where appends a list predicates to the WeatherStationUpdate builder.
func (wsuo *WeatherStationUpdateOne) Where(ps ...predicate.WeatherStation) *WeatherStationUpdateOne {
	wsuo.mutation.Where(ps...)
	return wsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wsuo *WeatherStationUpdateOne) Select(field string, fields ...string) *WeatherStationUpdateOne {
	wsuo.fields = append([]string{field}, fields...)
	return wsuo
}

// Save executes the query and returns the updated WeatherStation entity.
func (wsuo *WeatherStationUpdateOne) Save(ctx context.Context) (*WeatherStation, error) {
	return withHooks[*WeatherStation, WeatherStationMutation](ctx, wsuo.sqlSave, wsuo.mutation, wsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wsuo *WeatherStationUpdateOne) SaveX(ctx context.Context) *WeatherStation {
	node, err := wsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wsuo *WeatherStationUpdateOne) Exec(ctx context.Context) error {
	_, err := wsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsuo *WeatherStationUpdateOne) ExecX(ctx context.Context) {
	if err := wsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wsuo *WeatherStationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WeatherStationUpdateOne {
	wsuo.modifiers = append(wsuo.modifiers, modifiers...)
	return wsuo
}

func (wsuo *WeatherStationUpdateOne) sqlSave(ctx context.Context) (_node *WeatherStation, err error) {
	_spec := sqlgraph.NewUpdateSpec(weatherstation.Table, weatherstation.Columns, sqlgraph.NewFieldSpec(weatherstation.FieldID, field.TypeUUID))
	id, ok := wsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WeatherStation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, weatherstation.FieldID)
		for _, f := range fields {
			if !weatherstation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != weatherstation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wsuo.mutation.Latitude(); ok {
		_spec.SetField(weatherstation.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := wsuo.mutation.AddedLatitude(); ok {
		_spec.AddField(weatherstation.FieldLatitude, field.TypeFloat64, value)
	}
	if wsuo.mutation.LatitudeCleared() {
		_spec.ClearField(weatherstation.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := wsuo.mutation.Longitude(); ok {
		_spec.SetField(weatherstation.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := wsuo.mutation.AddedLongitude(); ok {
		_spec.AddField(weatherstation.FieldLongitude, field.TypeFloat64, value)
	}
	if wsuo.mutation.LongitudeCleared() {
		_spec.ClearField(weatherstation.FieldLongitude, field.TypeFloat64)
	}
	if value, ok := wsuo.mutation.Elevation(); ok {
		_spec.SetField(weatherstation.FieldElevation, field.TypeFloat64, value)
	}
	if value, ok := wsuo.mutation.AddedElevation(); ok {
		_spec.AddField(weatherstation.FieldElevation, field.TypeFloat64, value)
	}
	if wsuo.mutation.ElevationCleared() {
		_spec.ClearField(weatherstation.FieldElevation, field.TypeFloat64)
	}
	if value, ok := wsuo.mutation.Hash(); ok {
		_spec.SetField(weatherstation.FieldHash, field.TypeString, value)
	}
	if wsuo.mutation.AirportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   weatherstation.AirportTable,
			Columns: []string{weatherstation.AirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airport.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wsuo.mutation.AirportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   weatherstation.AirportTable,
			Columns: []string{weatherstation.AirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wsuo.mutation.MetarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weatherstation.MetarsTable,
			Columns: []string{weatherstation.MetarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: metar.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wsuo.mutation.RemovedMetarsIDs(); len(nodes) > 0 && !wsuo.mutation.MetarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weatherstation.MetarsTable,
			Columns: []string{weatherstation.MetarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: metar.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wsuo.mutation.MetarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weatherstation.MetarsTable,
			Columns: []string{weatherstation.MetarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: metar.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wsuo.mutation.TafsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weatherstation.TafsTable,
			Columns: []string{weatherstation.TafsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: taf.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wsuo.mutation.RemovedTafsIDs(); len(nodes) > 0 && !wsuo.mutation.TafsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weatherstation.TafsTable,
			Columns: []string{weatherstation.TafsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: taf.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wsuo.mutation.TafsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weatherstation.TafsTable,
			Columns: []string{weatherstation.TafsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: taf.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wsuo.modifiers...)
	_node = &WeatherStation{config: wsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weatherstation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wsuo.mutation.done = true
	return _node, nil
}
