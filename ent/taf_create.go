// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"metar.gg/ent/skycondition"
	"metar.gg/ent/station"
	"metar.gg/ent/taf"
)

// TafCreate is the builder for creating a Taf entity.
type TafCreate struct {
	config
	mutation *TafMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRawText sets the "raw_text" field.
func (tc *TafCreate) SetRawText(s string) *TafCreate {
	tc.mutation.SetRawText(s)
	return tc
}

// SetIssueTime sets the "issue_time" field.
func (tc *TafCreate) SetIssueTime(t time.Time) *TafCreate {
	tc.mutation.SetIssueTime(t)
	return tc
}

// SetBulletinTime sets the "bulletin_time" field.
func (tc *TafCreate) SetBulletinTime(t time.Time) *TafCreate {
	tc.mutation.SetBulletinTime(t)
	return tc
}

// SetValidFromTime sets the "valid_from_time" field.
func (tc *TafCreate) SetValidFromTime(t time.Time) *TafCreate {
	tc.mutation.SetValidFromTime(t)
	return tc
}

// SetValidToTime sets the "valid_to_time" field.
func (tc *TafCreate) SetValidToTime(t time.Time) *TafCreate {
	tc.mutation.SetValidToTime(t)
	return tc
}

// SetRemarks sets the "remarks" field.
func (tc *TafCreate) SetRemarks(s string) *TafCreate {
	tc.mutation.SetRemarks(s)
	return tc
}

// SetTemperature sets the "temperature" field.
func (tc *TafCreate) SetTemperature(f float64) *TafCreate {
	tc.mutation.SetTemperature(f)
	return tc
}

// SetDewpoint sets the "dewpoint" field.
func (tc *TafCreate) SetDewpoint(f float64) *TafCreate {
	tc.mutation.SetDewpoint(f)
	return tc
}

// SetWindSpeed sets the "wind_speed" field.
func (tc *TafCreate) SetWindSpeed(i int) *TafCreate {
	tc.mutation.SetWindSpeed(i)
	return tc
}

// SetWindGust sets the "wind_gust" field.
func (tc *TafCreate) SetWindGust(i int) *TafCreate {
	tc.mutation.SetWindGust(i)
	return tc
}

// SetWindDirection sets the "wind_direction" field.
func (tc *TafCreate) SetWindDirection(i int) *TafCreate {
	tc.mutation.SetWindDirection(i)
	return tc
}

// SetVisibility sets the "visibility" field.
func (tc *TafCreate) SetVisibility(f float64) *TafCreate {
	tc.mutation.SetVisibility(f)
	return tc
}

// SetAltimeter sets the "altimeter" field.
func (tc *TafCreate) SetAltimeter(f float64) *TafCreate {
	tc.mutation.SetAltimeter(f)
	return tc
}

// SetFlightCategory sets the "flight_category" field.
func (tc *TafCreate) SetFlightCategory(value taf.FlightCategory) *TafCreate {
	tc.mutation.SetFlightCategory(value)
	return tc
}

// SetNillableFlightCategory sets the "flight_category" field if the given value is not nil.
func (tc *TafCreate) SetNillableFlightCategory(value *taf.FlightCategory) *TafCreate {
	if value != nil {
		tc.SetFlightCategory(*value)
	}
	return tc
}

// SetQualityControlCorrected sets the "quality_control_corrected" field.
func (tc *TafCreate) SetQualityControlCorrected(b bool) *TafCreate {
	tc.mutation.SetQualityControlCorrected(b)
	return tc
}

// SetNillableQualityControlCorrected sets the "quality_control_corrected" field if the given value is not nil.
func (tc *TafCreate) SetNillableQualityControlCorrected(b *bool) *TafCreate {
	if b != nil {
		tc.SetQualityControlCorrected(*b)
	}
	return tc
}

// SetQualityControlAutoStation sets the "quality_control_auto_station" field.
func (tc *TafCreate) SetQualityControlAutoStation(b bool) *TafCreate {
	tc.mutation.SetQualityControlAutoStation(b)
	return tc
}

// SetQualityControlMaintenanceIndicatorOn sets the "quality_control_maintenance_indicator_on" field.
func (tc *TafCreate) SetQualityControlMaintenanceIndicatorOn(b bool) *TafCreate {
	tc.mutation.SetQualityControlMaintenanceIndicatorOn(b)
	return tc
}

// SetQualityControlNoSignal sets the "quality_control_no_signal" field.
func (tc *TafCreate) SetQualityControlNoSignal(b bool) *TafCreate {
	tc.mutation.SetQualityControlNoSignal(b)
	return tc
}

// SetQualityControlLightningSensorOff sets the "quality_control_lightning_sensor_off" field.
func (tc *TafCreate) SetQualityControlLightningSensorOff(b bool) *TafCreate {
	tc.mutation.SetQualityControlLightningSensorOff(b)
	return tc
}

// SetQualityControlFreezingRainSensorOff sets the "quality_control_freezing_rain_sensor_off" field.
func (tc *TafCreate) SetQualityControlFreezingRainSensorOff(b bool) *TafCreate {
	tc.mutation.SetQualityControlFreezingRainSensorOff(b)
	return tc
}

// SetQualityControlPresentWeatherSensorOff sets the "quality_control_present_weather_sensor_off" field.
func (tc *TafCreate) SetQualityControlPresentWeatherSensorOff(b bool) *TafCreate {
	tc.mutation.SetQualityControlPresentWeatherSensorOff(b)
	return tc
}

// SetSeaLevelPressure sets the "sea_level_pressure" field.
func (tc *TafCreate) SetSeaLevelPressure(f float64) *TafCreate {
	tc.mutation.SetSeaLevelPressure(f)
	return tc
}

// SetNillableSeaLevelPressure sets the "sea_level_pressure" field if the given value is not nil.
func (tc *TafCreate) SetNillableSeaLevelPressure(f *float64) *TafCreate {
	if f != nil {
		tc.SetSeaLevelPressure(*f)
	}
	return tc
}

// SetPressureTendency sets the "pressure_tendency" field.
func (tc *TafCreate) SetPressureTendency(f float64) *TafCreate {
	tc.mutation.SetPressureTendency(f)
	return tc
}

// SetNillablePressureTendency sets the "pressure_tendency" field if the given value is not nil.
func (tc *TafCreate) SetNillablePressureTendency(f *float64) *TafCreate {
	if f != nil {
		tc.SetPressureTendency(*f)
	}
	return tc
}

// SetMaxTemp6 sets the "max_temp_6" field.
func (tc *TafCreate) SetMaxTemp6(f float64) *TafCreate {
	tc.mutation.SetMaxTemp6(f)
	return tc
}

// SetNillableMaxTemp6 sets the "max_temp_6" field if the given value is not nil.
func (tc *TafCreate) SetNillableMaxTemp6(f *float64) *TafCreate {
	if f != nil {
		tc.SetMaxTemp6(*f)
	}
	return tc
}

// SetMinTemp6 sets the "min_temp_6" field.
func (tc *TafCreate) SetMinTemp6(f float64) *TafCreate {
	tc.mutation.SetMinTemp6(f)
	return tc
}

// SetNillableMinTemp6 sets the "min_temp_6" field if the given value is not nil.
func (tc *TafCreate) SetNillableMinTemp6(f *float64) *TafCreate {
	if f != nil {
		tc.SetMinTemp6(*f)
	}
	return tc
}

// SetMaxTemp24 sets the "max_temp_24" field.
func (tc *TafCreate) SetMaxTemp24(f float64) *TafCreate {
	tc.mutation.SetMaxTemp24(f)
	return tc
}

// SetNillableMaxTemp24 sets the "max_temp_24" field if the given value is not nil.
func (tc *TafCreate) SetNillableMaxTemp24(f *float64) *TafCreate {
	if f != nil {
		tc.SetMaxTemp24(*f)
	}
	return tc
}

// SetMinTemp24 sets the "min_temp_24" field.
func (tc *TafCreate) SetMinTemp24(f float64) *TafCreate {
	tc.mutation.SetMinTemp24(f)
	return tc
}

// SetNillableMinTemp24 sets the "min_temp_24" field if the given value is not nil.
func (tc *TafCreate) SetNillableMinTemp24(f *float64) *TafCreate {
	if f != nil {
		tc.SetMinTemp24(*f)
	}
	return tc
}

// SetPrecipitation sets the "precipitation" field.
func (tc *TafCreate) SetPrecipitation(f float64) *TafCreate {
	tc.mutation.SetPrecipitation(f)
	return tc
}

// SetNillablePrecipitation sets the "precipitation" field if the given value is not nil.
func (tc *TafCreate) SetNillablePrecipitation(f *float64) *TafCreate {
	if f != nil {
		tc.SetPrecipitation(*f)
	}
	return tc
}

// SetPrecipitation3 sets the "precipitation_3" field.
func (tc *TafCreate) SetPrecipitation3(f float64) *TafCreate {
	tc.mutation.SetPrecipitation3(f)
	return tc
}

// SetNillablePrecipitation3 sets the "precipitation_3" field if the given value is not nil.
func (tc *TafCreate) SetNillablePrecipitation3(f *float64) *TafCreate {
	if f != nil {
		tc.SetPrecipitation3(*f)
	}
	return tc
}

// SetPrecipitation6 sets the "precipitation_6" field.
func (tc *TafCreate) SetPrecipitation6(f float64) *TafCreate {
	tc.mutation.SetPrecipitation6(f)
	return tc
}

// SetNillablePrecipitation6 sets the "precipitation_6" field if the given value is not nil.
func (tc *TafCreate) SetNillablePrecipitation6(f *float64) *TafCreate {
	if f != nil {
		tc.SetPrecipitation6(*f)
	}
	return tc
}

// SetPrecipitation24 sets the "precipitation_24" field.
func (tc *TafCreate) SetPrecipitation24(f float64) *TafCreate {
	tc.mutation.SetPrecipitation24(f)
	return tc
}

// SetNillablePrecipitation24 sets the "precipitation_24" field if the given value is not nil.
func (tc *TafCreate) SetNillablePrecipitation24(f *float64) *TafCreate {
	if f != nil {
		tc.SetPrecipitation24(*f)
	}
	return tc
}

// SetSnowDepth sets the "snow_depth" field.
func (tc *TafCreate) SetSnowDepth(f float64) *TafCreate {
	tc.mutation.SetSnowDepth(f)
	return tc
}

// SetNillableSnowDepth sets the "snow_depth" field if the given value is not nil.
func (tc *TafCreate) SetNillableSnowDepth(f *float64) *TafCreate {
	if f != nil {
		tc.SetSnowDepth(*f)
	}
	return tc
}

// SetVertVis sets the "vert_vis" field.
func (tc *TafCreate) SetVertVis(f float64) *TafCreate {
	tc.mutation.SetVertVis(f)
	return tc
}

// SetNillableVertVis sets the "vert_vis" field if the given value is not nil.
func (tc *TafCreate) SetNillableVertVis(f *float64) *TafCreate {
	if f != nil {
		tc.SetVertVis(*f)
	}
	return tc
}

// SetMetarType sets the "metar_type" field.
func (tc *TafCreate) SetMetarType(tt taf.MetarType) *TafCreate {
	tc.mutation.SetMetarType(tt)
	return tc
}

// SetHash sets the "hash" field.
func (tc *TafCreate) SetHash(s string) *TafCreate {
	tc.mutation.SetHash(s)
	return tc
}

// SetID sets the "id" field.
func (tc *TafCreate) SetID(i int) *TafCreate {
	tc.mutation.SetID(i)
	return tc
}

// SetStationID sets the "station" edge to the Station entity by ID.
func (tc *TafCreate) SetStationID(id int) *TafCreate {
	tc.mutation.SetStationID(id)
	return tc
}

// SetStation sets the "station" edge to the Station entity.
func (tc *TafCreate) SetStation(s *Station) *TafCreate {
	return tc.SetStationID(s.ID)
}

// AddSkyConditionIDs adds the "sky_conditions" edge to the SkyCondition entity by IDs.
func (tc *TafCreate) AddSkyConditionIDs(ids ...int) *TafCreate {
	tc.mutation.AddSkyConditionIDs(ids...)
	return tc
}

// AddSkyConditions adds the "sky_conditions" edges to the SkyCondition entity.
func (tc *TafCreate) AddSkyConditions(s ...*SkyCondition) *TafCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tc.AddSkyConditionIDs(ids...)
}

// Mutation returns the TafMutation object of the builder.
func (tc *TafCreate) Mutation() *TafMutation {
	return tc.mutation
}

// Save creates the Taf in the database.
func (tc *TafCreate) Save(ctx context.Context) (*Taf, error) {
	var (
		err  error
		node *Taf
	)
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TafMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Taf)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TafMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TafCreate) SaveX(ctx context.Context) *Taf {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TafCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TafCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TafCreate) check() error {
	if _, ok := tc.mutation.RawText(); !ok {
		return &ValidationError{Name: "raw_text", err: errors.New(`ent: missing required field "Taf.raw_text"`)}
	}
	if _, ok := tc.mutation.IssueTime(); !ok {
		return &ValidationError{Name: "issue_time", err: errors.New(`ent: missing required field "Taf.issue_time"`)}
	}
	if _, ok := tc.mutation.BulletinTime(); !ok {
		return &ValidationError{Name: "bulletin_time", err: errors.New(`ent: missing required field "Taf.bulletin_time"`)}
	}
	if _, ok := tc.mutation.ValidFromTime(); !ok {
		return &ValidationError{Name: "valid_from_time", err: errors.New(`ent: missing required field "Taf.valid_from_time"`)}
	}
	if _, ok := tc.mutation.ValidToTime(); !ok {
		return &ValidationError{Name: "valid_to_time", err: errors.New(`ent: missing required field "Taf.valid_to_time"`)}
	}
	if _, ok := tc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New(`ent: missing required field "Taf.remarks"`)}
	}
	if _, ok := tc.mutation.Temperature(); !ok {
		return &ValidationError{Name: "temperature", err: errors.New(`ent: missing required field "Taf.temperature"`)}
	}
	if _, ok := tc.mutation.Dewpoint(); !ok {
		return &ValidationError{Name: "dewpoint", err: errors.New(`ent: missing required field "Taf.dewpoint"`)}
	}
	if _, ok := tc.mutation.WindSpeed(); !ok {
		return &ValidationError{Name: "wind_speed", err: errors.New(`ent: missing required field "Taf.wind_speed"`)}
	}
	if _, ok := tc.mutation.WindGust(); !ok {
		return &ValidationError{Name: "wind_gust", err: errors.New(`ent: missing required field "Taf.wind_gust"`)}
	}
	if _, ok := tc.mutation.WindDirection(); !ok {
		return &ValidationError{Name: "wind_direction", err: errors.New(`ent: missing required field "Taf.wind_direction"`)}
	}
	if _, ok := tc.mutation.Visibility(); !ok {
		return &ValidationError{Name: "visibility", err: errors.New(`ent: missing required field "Taf.visibility"`)}
	}
	if _, ok := tc.mutation.Altimeter(); !ok {
		return &ValidationError{Name: "altimeter", err: errors.New(`ent: missing required field "Taf.altimeter"`)}
	}
	if v, ok := tc.mutation.FlightCategory(); ok {
		if err := taf.FlightCategoryValidator(v); err != nil {
			return &ValidationError{Name: "flight_category", err: fmt.Errorf(`ent: validator failed for field "Taf.flight_category": %w`, err)}
		}
	}
	if _, ok := tc.mutation.QualityControlAutoStation(); !ok {
		return &ValidationError{Name: "quality_control_auto_station", err: errors.New(`ent: missing required field "Taf.quality_control_auto_station"`)}
	}
	if _, ok := tc.mutation.QualityControlMaintenanceIndicatorOn(); !ok {
		return &ValidationError{Name: "quality_control_maintenance_indicator_on", err: errors.New(`ent: missing required field "Taf.quality_control_maintenance_indicator_on"`)}
	}
	if _, ok := tc.mutation.QualityControlNoSignal(); !ok {
		return &ValidationError{Name: "quality_control_no_signal", err: errors.New(`ent: missing required field "Taf.quality_control_no_signal"`)}
	}
	if _, ok := tc.mutation.QualityControlLightningSensorOff(); !ok {
		return &ValidationError{Name: "quality_control_lightning_sensor_off", err: errors.New(`ent: missing required field "Taf.quality_control_lightning_sensor_off"`)}
	}
	if _, ok := tc.mutation.QualityControlFreezingRainSensorOff(); !ok {
		return &ValidationError{Name: "quality_control_freezing_rain_sensor_off", err: errors.New(`ent: missing required field "Taf.quality_control_freezing_rain_sensor_off"`)}
	}
	if _, ok := tc.mutation.QualityControlPresentWeatherSensorOff(); !ok {
		return &ValidationError{Name: "quality_control_present_weather_sensor_off", err: errors.New(`ent: missing required field "Taf.quality_control_present_weather_sensor_off"`)}
	}
	if _, ok := tc.mutation.MetarType(); !ok {
		return &ValidationError{Name: "metar_type", err: errors.New(`ent: missing required field "Taf.metar_type"`)}
	}
	if v, ok := tc.mutation.MetarType(); ok {
		if err := taf.MetarTypeValidator(v); err != nil {
			return &ValidationError{Name: "metar_type", err: fmt.Errorf(`ent: validator failed for field "Taf.metar_type": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "Taf.hash"`)}
	}
	if _, ok := tc.mutation.StationID(); !ok {
		return &ValidationError{Name: "station", err: errors.New(`ent: missing required edge "Taf.station"`)}
	}
	return nil
}

func (tc *TafCreate) sqlSave(ctx context.Context) (*Taf, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (tc *TafCreate) createSpec() (*Taf, *sqlgraph.CreateSpec) {
	var (
		_node = &Taf{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: taf.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: taf.FieldID,
			},
		}
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.RawText(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: taf.FieldRawText,
		})
		_node.RawText = value
	}
	if value, ok := tc.mutation.IssueTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taf.FieldIssueTime,
		})
		_node.IssueTime = value
	}
	if value, ok := tc.mutation.BulletinTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taf.FieldBulletinTime,
		})
		_node.BulletinTime = value
	}
	if value, ok := tc.mutation.ValidFromTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taf.FieldValidFromTime,
		})
		_node.ValidFromTime = value
	}
	if value, ok := tc.mutation.ValidToTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taf.FieldValidToTime,
		})
		_node.ValidToTime = value
	}
	if value, ok := tc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: taf.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := tc.mutation.Temperature(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: taf.FieldTemperature,
		})
		_node.Temperature = value
	}
	if value, ok := tc.mutation.Dewpoint(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: taf.FieldDewpoint,
		})
		_node.Dewpoint = value
	}
	if value, ok := tc.mutation.WindSpeed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: taf.FieldWindSpeed,
		})
		_node.WindSpeed = value
	}
	if value, ok := tc.mutation.WindGust(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: taf.FieldWindGust,
		})
		_node.WindGust = value
	}
	if value, ok := tc.mutation.WindDirection(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: taf.FieldWindDirection,
		})
		_node.WindDirection = value
	}
	if value, ok := tc.mutation.Visibility(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: taf.FieldVisibility,
		})
		_node.Visibility = value
	}
	if value, ok := tc.mutation.Altimeter(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: taf.FieldAltimeter,
		})
		_node.Altimeter = value
	}
	if value, ok := tc.mutation.FlightCategory(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: taf.FieldFlightCategory,
		})
		_node.FlightCategory = &value
	}
	if value, ok := tc.mutation.QualityControlCorrected(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: taf.FieldQualityControlCorrected,
		})
		_node.QualityControlCorrected = &value
	}
	if value, ok := tc.mutation.QualityControlAutoStation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: taf.FieldQualityControlAutoStation,
		})
		_node.QualityControlAutoStation = value
	}
	if value, ok := tc.mutation.QualityControlMaintenanceIndicatorOn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: taf.FieldQualityControlMaintenanceIndicatorOn,
		})
		_node.QualityControlMaintenanceIndicatorOn = value
	}
	if value, ok := tc.mutation.QualityControlNoSignal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: taf.FieldQualityControlNoSignal,
		})
		_node.QualityControlNoSignal = value
	}
	if value, ok := tc.mutation.QualityControlLightningSensorOff(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: taf.FieldQualityControlLightningSensorOff,
		})
		_node.QualityControlLightningSensorOff = value
	}
	if value, ok := tc.mutation.QualityControlFreezingRainSensorOff(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: taf.FieldQualityControlFreezingRainSensorOff,
		})
		_node.QualityControlFreezingRainSensorOff = value
	}
	if value, ok := tc.mutation.QualityControlPresentWeatherSensorOff(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: taf.FieldQualityControlPresentWeatherSensorOff,
		})
		_node.QualityControlPresentWeatherSensorOff = value
	}
	if value, ok := tc.mutation.SeaLevelPressure(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: taf.FieldSeaLevelPressure,
		})
		_node.SeaLevelPressure = &value
	}
	if value, ok := tc.mutation.PressureTendency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: taf.FieldPressureTendency,
		})
		_node.PressureTendency = &value
	}
	if value, ok := tc.mutation.MaxTemp6(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: taf.FieldMaxTemp6,
		})
		_node.MaxTemp6 = &value
	}
	if value, ok := tc.mutation.MinTemp6(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: taf.FieldMinTemp6,
		})
		_node.MinTemp6 = &value
	}
	if value, ok := tc.mutation.MaxTemp24(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: taf.FieldMaxTemp24,
		})
		_node.MaxTemp24 = &value
	}
	if value, ok := tc.mutation.MinTemp24(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: taf.FieldMinTemp24,
		})
		_node.MinTemp24 = &value
	}
	if value, ok := tc.mutation.Precipitation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: taf.FieldPrecipitation,
		})
		_node.Precipitation = &value
	}
	if value, ok := tc.mutation.Precipitation3(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: taf.FieldPrecipitation3,
		})
		_node.Precipitation3 = &value
	}
	if value, ok := tc.mutation.Precipitation6(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: taf.FieldPrecipitation6,
		})
		_node.Precipitation6 = &value
	}
	if value, ok := tc.mutation.Precipitation24(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: taf.FieldPrecipitation24,
		})
		_node.Precipitation24 = &value
	}
	if value, ok := tc.mutation.SnowDepth(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: taf.FieldSnowDepth,
		})
		_node.SnowDepth = &value
	}
	if value, ok := tc.mutation.VertVis(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: taf.FieldVertVis,
		})
		_node.VertVis = &value
	}
	if value, ok := tc.mutation.MetarType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: taf.FieldMetarType,
		})
		_node.MetarType = value
	}
	if value, ok := tc.mutation.Hash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: taf.FieldHash,
		})
		_node.Hash = value
	}
	if nodes := tc.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taf.StationTable,
			Columns: []string{taf.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: station.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.station_tafs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.SkyConditionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taf.SkyConditionsTable,
			Columns: []string{taf.SkyConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skycondition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Taf.Create().
//		SetRawText(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TafUpsert) {
//			SetRawText(v+v).
//		}).
//		Exec(ctx)
func (tc *TafCreate) OnConflict(opts ...sql.ConflictOption) *TafUpsertOne {
	tc.conflict = opts
	return &TafUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Taf.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TafCreate) OnConflictColumns(columns ...string) *TafUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TafUpsertOne{
		create: tc,
	}
}

type (
	// TafUpsertOne is the builder for "upsert"-ing
	//  one Taf node.
	TafUpsertOne struct {
		create *TafCreate
	}

	// TafUpsert is the "OnConflict" setter.
	TafUpsert struct {
		*sql.UpdateSet
	}
)

// SetRawText sets the "raw_text" field.
func (u *TafUpsert) SetRawText(v string) *TafUpsert {
	u.Set(taf.FieldRawText, v)
	return u
}

// UpdateRawText sets the "raw_text" field to the value that was provided on create.
func (u *TafUpsert) UpdateRawText() *TafUpsert {
	u.SetExcluded(taf.FieldRawText)
	return u
}

// SetIssueTime sets the "issue_time" field.
func (u *TafUpsert) SetIssueTime(v time.Time) *TafUpsert {
	u.Set(taf.FieldIssueTime, v)
	return u
}

// UpdateIssueTime sets the "issue_time" field to the value that was provided on create.
func (u *TafUpsert) UpdateIssueTime() *TafUpsert {
	u.SetExcluded(taf.FieldIssueTime)
	return u
}

// SetBulletinTime sets the "bulletin_time" field.
func (u *TafUpsert) SetBulletinTime(v time.Time) *TafUpsert {
	u.Set(taf.FieldBulletinTime, v)
	return u
}

// UpdateBulletinTime sets the "bulletin_time" field to the value that was provided on create.
func (u *TafUpsert) UpdateBulletinTime() *TafUpsert {
	u.SetExcluded(taf.FieldBulletinTime)
	return u
}

// SetValidFromTime sets the "valid_from_time" field.
func (u *TafUpsert) SetValidFromTime(v time.Time) *TafUpsert {
	u.Set(taf.FieldValidFromTime, v)
	return u
}

// UpdateValidFromTime sets the "valid_from_time" field to the value that was provided on create.
func (u *TafUpsert) UpdateValidFromTime() *TafUpsert {
	u.SetExcluded(taf.FieldValidFromTime)
	return u
}

// SetValidToTime sets the "valid_to_time" field.
func (u *TafUpsert) SetValidToTime(v time.Time) *TafUpsert {
	u.Set(taf.FieldValidToTime, v)
	return u
}

// UpdateValidToTime sets the "valid_to_time" field to the value that was provided on create.
func (u *TafUpsert) UpdateValidToTime() *TafUpsert {
	u.SetExcluded(taf.FieldValidToTime)
	return u
}

// SetRemarks sets the "remarks" field.
func (u *TafUpsert) SetRemarks(v string) *TafUpsert {
	u.Set(taf.FieldRemarks, v)
	return u
}

// UpdateRemarks sets the "remarks" field to the value that was provided on create.
func (u *TafUpsert) UpdateRemarks() *TafUpsert {
	u.SetExcluded(taf.FieldRemarks)
	return u
}

// SetTemperature sets the "temperature" field.
func (u *TafUpsert) SetTemperature(v float64) *TafUpsert {
	u.Set(taf.FieldTemperature, v)
	return u
}

// UpdateTemperature sets the "temperature" field to the value that was provided on create.
func (u *TafUpsert) UpdateTemperature() *TafUpsert {
	u.SetExcluded(taf.FieldTemperature)
	return u
}

// AddTemperature adds v to the "temperature" field.
func (u *TafUpsert) AddTemperature(v float64) *TafUpsert {
	u.Add(taf.FieldTemperature, v)
	return u
}

// SetDewpoint sets the "dewpoint" field.
func (u *TafUpsert) SetDewpoint(v float64) *TafUpsert {
	u.Set(taf.FieldDewpoint, v)
	return u
}

// UpdateDewpoint sets the "dewpoint" field to the value that was provided on create.
func (u *TafUpsert) UpdateDewpoint() *TafUpsert {
	u.SetExcluded(taf.FieldDewpoint)
	return u
}

// AddDewpoint adds v to the "dewpoint" field.
func (u *TafUpsert) AddDewpoint(v float64) *TafUpsert {
	u.Add(taf.FieldDewpoint, v)
	return u
}

// SetWindSpeed sets the "wind_speed" field.
func (u *TafUpsert) SetWindSpeed(v int) *TafUpsert {
	u.Set(taf.FieldWindSpeed, v)
	return u
}

// UpdateWindSpeed sets the "wind_speed" field to the value that was provided on create.
func (u *TafUpsert) UpdateWindSpeed() *TafUpsert {
	u.SetExcluded(taf.FieldWindSpeed)
	return u
}

// AddWindSpeed adds v to the "wind_speed" field.
func (u *TafUpsert) AddWindSpeed(v int) *TafUpsert {
	u.Add(taf.FieldWindSpeed, v)
	return u
}

// SetWindGust sets the "wind_gust" field.
func (u *TafUpsert) SetWindGust(v int) *TafUpsert {
	u.Set(taf.FieldWindGust, v)
	return u
}

// UpdateWindGust sets the "wind_gust" field to the value that was provided on create.
func (u *TafUpsert) UpdateWindGust() *TafUpsert {
	u.SetExcluded(taf.FieldWindGust)
	return u
}

// AddWindGust adds v to the "wind_gust" field.
func (u *TafUpsert) AddWindGust(v int) *TafUpsert {
	u.Add(taf.FieldWindGust, v)
	return u
}

// SetWindDirection sets the "wind_direction" field.
func (u *TafUpsert) SetWindDirection(v int) *TafUpsert {
	u.Set(taf.FieldWindDirection, v)
	return u
}

// UpdateWindDirection sets the "wind_direction" field to the value that was provided on create.
func (u *TafUpsert) UpdateWindDirection() *TafUpsert {
	u.SetExcluded(taf.FieldWindDirection)
	return u
}

// AddWindDirection adds v to the "wind_direction" field.
func (u *TafUpsert) AddWindDirection(v int) *TafUpsert {
	u.Add(taf.FieldWindDirection, v)
	return u
}

// SetVisibility sets the "visibility" field.
func (u *TafUpsert) SetVisibility(v float64) *TafUpsert {
	u.Set(taf.FieldVisibility, v)
	return u
}

// UpdateVisibility sets the "visibility" field to the value that was provided on create.
func (u *TafUpsert) UpdateVisibility() *TafUpsert {
	u.SetExcluded(taf.FieldVisibility)
	return u
}

// AddVisibility adds v to the "visibility" field.
func (u *TafUpsert) AddVisibility(v float64) *TafUpsert {
	u.Add(taf.FieldVisibility, v)
	return u
}

// SetAltimeter sets the "altimeter" field.
func (u *TafUpsert) SetAltimeter(v float64) *TafUpsert {
	u.Set(taf.FieldAltimeter, v)
	return u
}

// UpdateAltimeter sets the "altimeter" field to the value that was provided on create.
func (u *TafUpsert) UpdateAltimeter() *TafUpsert {
	u.SetExcluded(taf.FieldAltimeter)
	return u
}

// AddAltimeter adds v to the "altimeter" field.
func (u *TafUpsert) AddAltimeter(v float64) *TafUpsert {
	u.Add(taf.FieldAltimeter, v)
	return u
}

// SetFlightCategory sets the "flight_category" field.
func (u *TafUpsert) SetFlightCategory(v taf.FlightCategory) *TafUpsert {
	u.Set(taf.FieldFlightCategory, v)
	return u
}

// UpdateFlightCategory sets the "flight_category" field to the value that was provided on create.
func (u *TafUpsert) UpdateFlightCategory() *TafUpsert {
	u.SetExcluded(taf.FieldFlightCategory)
	return u
}

// ClearFlightCategory clears the value of the "flight_category" field.
func (u *TafUpsert) ClearFlightCategory() *TafUpsert {
	u.SetNull(taf.FieldFlightCategory)
	return u
}

// SetQualityControlCorrected sets the "quality_control_corrected" field.
func (u *TafUpsert) SetQualityControlCorrected(v bool) *TafUpsert {
	u.Set(taf.FieldQualityControlCorrected, v)
	return u
}

// UpdateQualityControlCorrected sets the "quality_control_corrected" field to the value that was provided on create.
func (u *TafUpsert) UpdateQualityControlCorrected() *TafUpsert {
	u.SetExcluded(taf.FieldQualityControlCorrected)
	return u
}

// ClearQualityControlCorrected clears the value of the "quality_control_corrected" field.
func (u *TafUpsert) ClearQualityControlCorrected() *TafUpsert {
	u.SetNull(taf.FieldQualityControlCorrected)
	return u
}

// SetQualityControlAutoStation sets the "quality_control_auto_station" field.
func (u *TafUpsert) SetQualityControlAutoStation(v bool) *TafUpsert {
	u.Set(taf.FieldQualityControlAutoStation, v)
	return u
}

// UpdateQualityControlAutoStation sets the "quality_control_auto_station" field to the value that was provided on create.
func (u *TafUpsert) UpdateQualityControlAutoStation() *TafUpsert {
	u.SetExcluded(taf.FieldQualityControlAutoStation)
	return u
}

// SetQualityControlMaintenanceIndicatorOn sets the "quality_control_maintenance_indicator_on" field.
func (u *TafUpsert) SetQualityControlMaintenanceIndicatorOn(v bool) *TafUpsert {
	u.Set(taf.FieldQualityControlMaintenanceIndicatorOn, v)
	return u
}

// UpdateQualityControlMaintenanceIndicatorOn sets the "quality_control_maintenance_indicator_on" field to the value that was provided on create.
func (u *TafUpsert) UpdateQualityControlMaintenanceIndicatorOn() *TafUpsert {
	u.SetExcluded(taf.FieldQualityControlMaintenanceIndicatorOn)
	return u
}

// SetQualityControlNoSignal sets the "quality_control_no_signal" field.
func (u *TafUpsert) SetQualityControlNoSignal(v bool) *TafUpsert {
	u.Set(taf.FieldQualityControlNoSignal, v)
	return u
}

// UpdateQualityControlNoSignal sets the "quality_control_no_signal" field to the value that was provided on create.
func (u *TafUpsert) UpdateQualityControlNoSignal() *TafUpsert {
	u.SetExcluded(taf.FieldQualityControlNoSignal)
	return u
}

// SetQualityControlLightningSensorOff sets the "quality_control_lightning_sensor_off" field.
func (u *TafUpsert) SetQualityControlLightningSensorOff(v bool) *TafUpsert {
	u.Set(taf.FieldQualityControlLightningSensorOff, v)
	return u
}

// UpdateQualityControlLightningSensorOff sets the "quality_control_lightning_sensor_off" field to the value that was provided on create.
func (u *TafUpsert) UpdateQualityControlLightningSensorOff() *TafUpsert {
	u.SetExcluded(taf.FieldQualityControlLightningSensorOff)
	return u
}

// SetQualityControlFreezingRainSensorOff sets the "quality_control_freezing_rain_sensor_off" field.
func (u *TafUpsert) SetQualityControlFreezingRainSensorOff(v bool) *TafUpsert {
	u.Set(taf.FieldQualityControlFreezingRainSensorOff, v)
	return u
}

// UpdateQualityControlFreezingRainSensorOff sets the "quality_control_freezing_rain_sensor_off" field to the value that was provided on create.
func (u *TafUpsert) UpdateQualityControlFreezingRainSensorOff() *TafUpsert {
	u.SetExcluded(taf.FieldQualityControlFreezingRainSensorOff)
	return u
}

// SetQualityControlPresentWeatherSensorOff sets the "quality_control_present_weather_sensor_off" field.
func (u *TafUpsert) SetQualityControlPresentWeatherSensorOff(v bool) *TafUpsert {
	u.Set(taf.FieldQualityControlPresentWeatherSensorOff, v)
	return u
}

// UpdateQualityControlPresentWeatherSensorOff sets the "quality_control_present_weather_sensor_off" field to the value that was provided on create.
func (u *TafUpsert) UpdateQualityControlPresentWeatherSensorOff() *TafUpsert {
	u.SetExcluded(taf.FieldQualityControlPresentWeatherSensorOff)
	return u
}

// SetSeaLevelPressure sets the "sea_level_pressure" field.
func (u *TafUpsert) SetSeaLevelPressure(v float64) *TafUpsert {
	u.Set(taf.FieldSeaLevelPressure, v)
	return u
}

// UpdateSeaLevelPressure sets the "sea_level_pressure" field to the value that was provided on create.
func (u *TafUpsert) UpdateSeaLevelPressure() *TafUpsert {
	u.SetExcluded(taf.FieldSeaLevelPressure)
	return u
}

// AddSeaLevelPressure adds v to the "sea_level_pressure" field.
func (u *TafUpsert) AddSeaLevelPressure(v float64) *TafUpsert {
	u.Add(taf.FieldSeaLevelPressure, v)
	return u
}

// ClearSeaLevelPressure clears the value of the "sea_level_pressure" field.
func (u *TafUpsert) ClearSeaLevelPressure() *TafUpsert {
	u.SetNull(taf.FieldSeaLevelPressure)
	return u
}

// SetPressureTendency sets the "pressure_tendency" field.
func (u *TafUpsert) SetPressureTendency(v float64) *TafUpsert {
	u.Set(taf.FieldPressureTendency, v)
	return u
}

// UpdatePressureTendency sets the "pressure_tendency" field to the value that was provided on create.
func (u *TafUpsert) UpdatePressureTendency() *TafUpsert {
	u.SetExcluded(taf.FieldPressureTendency)
	return u
}

// AddPressureTendency adds v to the "pressure_tendency" field.
func (u *TafUpsert) AddPressureTendency(v float64) *TafUpsert {
	u.Add(taf.FieldPressureTendency, v)
	return u
}

// ClearPressureTendency clears the value of the "pressure_tendency" field.
func (u *TafUpsert) ClearPressureTendency() *TafUpsert {
	u.SetNull(taf.FieldPressureTendency)
	return u
}

// SetMaxTemp6 sets the "max_temp_6" field.
func (u *TafUpsert) SetMaxTemp6(v float64) *TafUpsert {
	u.Set(taf.FieldMaxTemp6, v)
	return u
}

// UpdateMaxTemp6 sets the "max_temp_6" field to the value that was provided on create.
func (u *TafUpsert) UpdateMaxTemp6() *TafUpsert {
	u.SetExcluded(taf.FieldMaxTemp6)
	return u
}

// AddMaxTemp6 adds v to the "max_temp_6" field.
func (u *TafUpsert) AddMaxTemp6(v float64) *TafUpsert {
	u.Add(taf.FieldMaxTemp6, v)
	return u
}

// ClearMaxTemp6 clears the value of the "max_temp_6" field.
func (u *TafUpsert) ClearMaxTemp6() *TafUpsert {
	u.SetNull(taf.FieldMaxTemp6)
	return u
}

// SetMinTemp6 sets the "min_temp_6" field.
func (u *TafUpsert) SetMinTemp6(v float64) *TafUpsert {
	u.Set(taf.FieldMinTemp6, v)
	return u
}

// UpdateMinTemp6 sets the "min_temp_6" field to the value that was provided on create.
func (u *TafUpsert) UpdateMinTemp6() *TafUpsert {
	u.SetExcluded(taf.FieldMinTemp6)
	return u
}

// AddMinTemp6 adds v to the "min_temp_6" field.
func (u *TafUpsert) AddMinTemp6(v float64) *TafUpsert {
	u.Add(taf.FieldMinTemp6, v)
	return u
}

// ClearMinTemp6 clears the value of the "min_temp_6" field.
func (u *TafUpsert) ClearMinTemp6() *TafUpsert {
	u.SetNull(taf.FieldMinTemp6)
	return u
}

// SetMaxTemp24 sets the "max_temp_24" field.
func (u *TafUpsert) SetMaxTemp24(v float64) *TafUpsert {
	u.Set(taf.FieldMaxTemp24, v)
	return u
}

// UpdateMaxTemp24 sets the "max_temp_24" field to the value that was provided on create.
func (u *TafUpsert) UpdateMaxTemp24() *TafUpsert {
	u.SetExcluded(taf.FieldMaxTemp24)
	return u
}

// AddMaxTemp24 adds v to the "max_temp_24" field.
func (u *TafUpsert) AddMaxTemp24(v float64) *TafUpsert {
	u.Add(taf.FieldMaxTemp24, v)
	return u
}

// ClearMaxTemp24 clears the value of the "max_temp_24" field.
func (u *TafUpsert) ClearMaxTemp24() *TafUpsert {
	u.SetNull(taf.FieldMaxTemp24)
	return u
}

// SetMinTemp24 sets the "min_temp_24" field.
func (u *TafUpsert) SetMinTemp24(v float64) *TafUpsert {
	u.Set(taf.FieldMinTemp24, v)
	return u
}

// UpdateMinTemp24 sets the "min_temp_24" field to the value that was provided on create.
func (u *TafUpsert) UpdateMinTemp24() *TafUpsert {
	u.SetExcluded(taf.FieldMinTemp24)
	return u
}

// AddMinTemp24 adds v to the "min_temp_24" field.
func (u *TafUpsert) AddMinTemp24(v float64) *TafUpsert {
	u.Add(taf.FieldMinTemp24, v)
	return u
}

// ClearMinTemp24 clears the value of the "min_temp_24" field.
func (u *TafUpsert) ClearMinTemp24() *TafUpsert {
	u.SetNull(taf.FieldMinTemp24)
	return u
}

// SetPrecipitation sets the "precipitation" field.
func (u *TafUpsert) SetPrecipitation(v float64) *TafUpsert {
	u.Set(taf.FieldPrecipitation, v)
	return u
}

// UpdatePrecipitation sets the "precipitation" field to the value that was provided on create.
func (u *TafUpsert) UpdatePrecipitation() *TafUpsert {
	u.SetExcluded(taf.FieldPrecipitation)
	return u
}

// AddPrecipitation adds v to the "precipitation" field.
func (u *TafUpsert) AddPrecipitation(v float64) *TafUpsert {
	u.Add(taf.FieldPrecipitation, v)
	return u
}

// ClearPrecipitation clears the value of the "precipitation" field.
func (u *TafUpsert) ClearPrecipitation() *TafUpsert {
	u.SetNull(taf.FieldPrecipitation)
	return u
}

// SetPrecipitation3 sets the "precipitation_3" field.
func (u *TafUpsert) SetPrecipitation3(v float64) *TafUpsert {
	u.Set(taf.FieldPrecipitation3, v)
	return u
}

// UpdatePrecipitation3 sets the "precipitation_3" field to the value that was provided on create.
func (u *TafUpsert) UpdatePrecipitation3() *TafUpsert {
	u.SetExcluded(taf.FieldPrecipitation3)
	return u
}

// AddPrecipitation3 adds v to the "precipitation_3" field.
func (u *TafUpsert) AddPrecipitation3(v float64) *TafUpsert {
	u.Add(taf.FieldPrecipitation3, v)
	return u
}

// ClearPrecipitation3 clears the value of the "precipitation_3" field.
func (u *TafUpsert) ClearPrecipitation3() *TafUpsert {
	u.SetNull(taf.FieldPrecipitation3)
	return u
}

// SetPrecipitation6 sets the "precipitation_6" field.
func (u *TafUpsert) SetPrecipitation6(v float64) *TafUpsert {
	u.Set(taf.FieldPrecipitation6, v)
	return u
}

// UpdatePrecipitation6 sets the "precipitation_6" field to the value that was provided on create.
func (u *TafUpsert) UpdatePrecipitation6() *TafUpsert {
	u.SetExcluded(taf.FieldPrecipitation6)
	return u
}

// AddPrecipitation6 adds v to the "precipitation_6" field.
func (u *TafUpsert) AddPrecipitation6(v float64) *TafUpsert {
	u.Add(taf.FieldPrecipitation6, v)
	return u
}

// ClearPrecipitation6 clears the value of the "precipitation_6" field.
func (u *TafUpsert) ClearPrecipitation6() *TafUpsert {
	u.SetNull(taf.FieldPrecipitation6)
	return u
}

// SetPrecipitation24 sets the "precipitation_24" field.
func (u *TafUpsert) SetPrecipitation24(v float64) *TafUpsert {
	u.Set(taf.FieldPrecipitation24, v)
	return u
}

// UpdatePrecipitation24 sets the "precipitation_24" field to the value that was provided on create.
func (u *TafUpsert) UpdatePrecipitation24() *TafUpsert {
	u.SetExcluded(taf.FieldPrecipitation24)
	return u
}

// AddPrecipitation24 adds v to the "precipitation_24" field.
func (u *TafUpsert) AddPrecipitation24(v float64) *TafUpsert {
	u.Add(taf.FieldPrecipitation24, v)
	return u
}

// ClearPrecipitation24 clears the value of the "precipitation_24" field.
func (u *TafUpsert) ClearPrecipitation24() *TafUpsert {
	u.SetNull(taf.FieldPrecipitation24)
	return u
}

// SetSnowDepth sets the "snow_depth" field.
func (u *TafUpsert) SetSnowDepth(v float64) *TafUpsert {
	u.Set(taf.FieldSnowDepth, v)
	return u
}

// UpdateSnowDepth sets the "snow_depth" field to the value that was provided on create.
func (u *TafUpsert) UpdateSnowDepth() *TafUpsert {
	u.SetExcluded(taf.FieldSnowDepth)
	return u
}

// AddSnowDepth adds v to the "snow_depth" field.
func (u *TafUpsert) AddSnowDepth(v float64) *TafUpsert {
	u.Add(taf.FieldSnowDepth, v)
	return u
}

// ClearSnowDepth clears the value of the "snow_depth" field.
func (u *TafUpsert) ClearSnowDepth() *TafUpsert {
	u.SetNull(taf.FieldSnowDepth)
	return u
}

// SetVertVis sets the "vert_vis" field.
func (u *TafUpsert) SetVertVis(v float64) *TafUpsert {
	u.Set(taf.FieldVertVis, v)
	return u
}

// UpdateVertVis sets the "vert_vis" field to the value that was provided on create.
func (u *TafUpsert) UpdateVertVis() *TafUpsert {
	u.SetExcluded(taf.FieldVertVis)
	return u
}

// AddVertVis adds v to the "vert_vis" field.
func (u *TafUpsert) AddVertVis(v float64) *TafUpsert {
	u.Add(taf.FieldVertVis, v)
	return u
}

// ClearVertVis clears the value of the "vert_vis" field.
func (u *TafUpsert) ClearVertVis() *TafUpsert {
	u.SetNull(taf.FieldVertVis)
	return u
}

// SetMetarType sets the "metar_type" field.
func (u *TafUpsert) SetMetarType(v taf.MetarType) *TafUpsert {
	u.Set(taf.FieldMetarType, v)
	return u
}

// UpdateMetarType sets the "metar_type" field to the value that was provided on create.
func (u *TafUpsert) UpdateMetarType() *TafUpsert {
	u.SetExcluded(taf.FieldMetarType)
	return u
}

// SetHash sets the "hash" field.
func (u *TafUpsert) SetHash(v string) *TafUpsert {
	u.Set(taf.FieldHash, v)
	return u
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *TafUpsert) UpdateHash() *TafUpsert {
	u.SetExcluded(taf.FieldHash)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Taf.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(taf.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TafUpsertOne) UpdateNewValues() *TafUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(taf.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Taf.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TafUpsertOne) Ignore() *TafUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TafUpsertOne) DoNothing() *TafUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TafCreate.OnConflict
// documentation for more info.
func (u *TafUpsertOne) Update(set func(*TafUpsert)) *TafUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TafUpsert{UpdateSet: update})
	}))
	return u
}

// SetRawText sets the "raw_text" field.
func (u *TafUpsertOne) SetRawText(v string) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetRawText(v)
	})
}

// UpdateRawText sets the "raw_text" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateRawText() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateRawText()
	})
}

// SetIssueTime sets the "issue_time" field.
func (u *TafUpsertOne) SetIssueTime(v time.Time) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetIssueTime(v)
	})
}

// UpdateIssueTime sets the "issue_time" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateIssueTime() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateIssueTime()
	})
}

// SetBulletinTime sets the "bulletin_time" field.
func (u *TafUpsertOne) SetBulletinTime(v time.Time) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetBulletinTime(v)
	})
}

// UpdateBulletinTime sets the "bulletin_time" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateBulletinTime() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateBulletinTime()
	})
}

// SetValidFromTime sets the "valid_from_time" field.
func (u *TafUpsertOne) SetValidFromTime(v time.Time) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetValidFromTime(v)
	})
}

// UpdateValidFromTime sets the "valid_from_time" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateValidFromTime() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateValidFromTime()
	})
}

// SetValidToTime sets the "valid_to_time" field.
func (u *TafUpsertOne) SetValidToTime(v time.Time) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetValidToTime(v)
	})
}

// UpdateValidToTime sets the "valid_to_time" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateValidToTime() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateValidToTime()
	})
}

// SetRemarks sets the "remarks" field.
func (u *TafUpsertOne) SetRemarks(v string) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetRemarks(v)
	})
}

// UpdateRemarks sets the "remarks" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateRemarks() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateRemarks()
	})
}

// SetTemperature sets the "temperature" field.
func (u *TafUpsertOne) SetTemperature(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetTemperature(v)
	})
}

// AddTemperature adds v to the "temperature" field.
func (u *TafUpsertOne) AddTemperature(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.AddTemperature(v)
	})
}

// UpdateTemperature sets the "temperature" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateTemperature() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateTemperature()
	})
}

// SetDewpoint sets the "dewpoint" field.
func (u *TafUpsertOne) SetDewpoint(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetDewpoint(v)
	})
}

// AddDewpoint adds v to the "dewpoint" field.
func (u *TafUpsertOne) AddDewpoint(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.AddDewpoint(v)
	})
}

// UpdateDewpoint sets the "dewpoint" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateDewpoint() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateDewpoint()
	})
}

// SetWindSpeed sets the "wind_speed" field.
func (u *TafUpsertOne) SetWindSpeed(v int) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetWindSpeed(v)
	})
}

// AddWindSpeed adds v to the "wind_speed" field.
func (u *TafUpsertOne) AddWindSpeed(v int) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.AddWindSpeed(v)
	})
}

// UpdateWindSpeed sets the "wind_speed" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateWindSpeed() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateWindSpeed()
	})
}

// SetWindGust sets the "wind_gust" field.
func (u *TafUpsertOne) SetWindGust(v int) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetWindGust(v)
	})
}

// AddWindGust adds v to the "wind_gust" field.
func (u *TafUpsertOne) AddWindGust(v int) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.AddWindGust(v)
	})
}

// UpdateWindGust sets the "wind_gust" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateWindGust() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateWindGust()
	})
}

// SetWindDirection sets the "wind_direction" field.
func (u *TafUpsertOne) SetWindDirection(v int) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetWindDirection(v)
	})
}

// AddWindDirection adds v to the "wind_direction" field.
func (u *TafUpsertOne) AddWindDirection(v int) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.AddWindDirection(v)
	})
}

// UpdateWindDirection sets the "wind_direction" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateWindDirection() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateWindDirection()
	})
}

// SetVisibility sets the "visibility" field.
func (u *TafUpsertOne) SetVisibility(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetVisibility(v)
	})
}

// AddVisibility adds v to the "visibility" field.
func (u *TafUpsertOne) AddVisibility(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.AddVisibility(v)
	})
}

// UpdateVisibility sets the "visibility" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateVisibility() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateVisibility()
	})
}

// SetAltimeter sets the "altimeter" field.
func (u *TafUpsertOne) SetAltimeter(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetAltimeter(v)
	})
}

// AddAltimeter adds v to the "altimeter" field.
func (u *TafUpsertOne) AddAltimeter(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.AddAltimeter(v)
	})
}

// UpdateAltimeter sets the "altimeter" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateAltimeter() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateAltimeter()
	})
}

// SetFlightCategory sets the "flight_category" field.
func (u *TafUpsertOne) SetFlightCategory(v taf.FlightCategory) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetFlightCategory(v)
	})
}

// UpdateFlightCategory sets the "flight_category" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateFlightCategory() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateFlightCategory()
	})
}

// ClearFlightCategory clears the value of the "flight_category" field.
func (u *TafUpsertOne) ClearFlightCategory() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.ClearFlightCategory()
	})
}

// SetQualityControlCorrected sets the "quality_control_corrected" field.
func (u *TafUpsertOne) SetQualityControlCorrected(v bool) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetQualityControlCorrected(v)
	})
}

// UpdateQualityControlCorrected sets the "quality_control_corrected" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateQualityControlCorrected() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateQualityControlCorrected()
	})
}

// ClearQualityControlCorrected clears the value of the "quality_control_corrected" field.
func (u *TafUpsertOne) ClearQualityControlCorrected() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.ClearQualityControlCorrected()
	})
}

// SetQualityControlAutoStation sets the "quality_control_auto_station" field.
func (u *TafUpsertOne) SetQualityControlAutoStation(v bool) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetQualityControlAutoStation(v)
	})
}

// UpdateQualityControlAutoStation sets the "quality_control_auto_station" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateQualityControlAutoStation() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateQualityControlAutoStation()
	})
}

// SetQualityControlMaintenanceIndicatorOn sets the "quality_control_maintenance_indicator_on" field.
func (u *TafUpsertOne) SetQualityControlMaintenanceIndicatorOn(v bool) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetQualityControlMaintenanceIndicatorOn(v)
	})
}

// UpdateQualityControlMaintenanceIndicatorOn sets the "quality_control_maintenance_indicator_on" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateQualityControlMaintenanceIndicatorOn() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateQualityControlMaintenanceIndicatorOn()
	})
}

// SetQualityControlNoSignal sets the "quality_control_no_signal" field.
func (u *TafUpsertOne) SetQualityControlNoSignal(v bool) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetQualityControlNoSignal(v)
	})
}

// UpdateQualityControlNoSignal sets the "quality_control_no_signal" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateQualityControlNoSignal() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateQualityControlNoSignal()
	})
}

// SetQualityControlLightningSensorOff sets the "quality_control_lightning_sensor_off" field.
func (u *TafUpsertOne) SetQualityControlLightningSensorOff(v bool) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetQualityControlLightningSensorOff(v)
	})
}

// UpdateQualityControlLightningSensorOff sets the "quality_control_lightning_sensor_off" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateQualityControlLightningSensorOff() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateQualityControlLightningSensorOff()
	})
}

// SetQualityControlFreezingRainSensorOff sets the "quality_control_freezing_rain_sensor_off" field.
func (u *TafUpsertOne) SetQualityControlFreezingRainSensorOff(v bool) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetQualityControlFreezingRainSensorOff(v)
	})
}

// UpdateQualityControlFreezingRainSensorOff sets the "quality_control_freezing_rain_sensor_off" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateQualityControlFreezingRainSensorOff() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateQualityControlFreezingRainSensorOff()
	})
}

// SetQualityControlPresentWeatherSensorOff sets the "quality_control_present_weather_sensor_off" field.
func (u *TafUpsertOne) SetQualityControlPresentWeatherSensorOff(v bool) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetQualityControlPresentWeatherSensorOff(v)
	})
}

// UpdateQualityControlPresentWeatherSensorOff sets the "quality_control_present_weather_sensor_off" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateQualityControlPresentWeatherSensorOff() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateQualityControlPresentWeatherSensorOff()
	})
}

// SetSeaLevelPressure sets the "sea_level_pressure" field.
func (u *TafUpsertOne) SetSeaLevelPressure(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetSeaLevelPressure(v)
	})
}

// AddSeaLevelPressure adds v to the "sea_level_pressure" field.
func (u *TafUpsertOne) AddSeaLevelPressure(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.AddSeaLevelPressure(v)
	})
}

// UpdateSeaLevelPressure sets the "sea_level_pressure" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateSeaLevelPressure() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateSeaLevelPressure()
	})
}

// ClearSeaLevelPressure clears the value of the "sea_level_pressure" field.
func (u *TafUpsertOne) ClearSeaLevelPressure() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.ClearSeaLevelPressure()
	})
}

// SetPressureTendency sets the "pressure_tendency" field.
func (u *TafUpsertOne) SetPressureTendency(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetPressureTendency(v)
	})
}

// AddPressureTendency adds v to the "pressure_tendency" field.
func (u *TafUpsertOne) AddPressureTendency(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.AddPressureTendency(v)
	})
}

// UpdatePressureTendency sets the "pressure_tendency" field to the value that was provided on create.
func (u *TafUpsertOne) UpdatePressureTendency() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdatePressureTendency()
	})
}

// ClearPressureTendency clears the value of the "pressure_tendency" field.
func (u *TafUpsertOne) ClearPressureTendency() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.ClearPressureTendency()
	})
}

// SetMaxTemp6 sets the "max_temp_6" field.
func (u *TafUpsertOne) SetMaxTemp6(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetMaxTemp6(v)
	})
}

// AddMaxTemp6 adds v to the "max_temp_6" field.
func (u *TafUpsertOne) AddMaxTemp6(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.AddMaxTemp6(v)
	})
}

// UpdateMaxTemp6 sets the "max_temp_6" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateMaxTemp6() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateMaxTemp6()
	})
}

// ClearMaxTemp6 clears the value of the "max_temp_6" field.
func (u *TafUpsertOne) ClearMaxTemp6() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.ClearMaxTemp6()
	})
}

// SetMinTemp6 sets the "min_temp_6" field.
func (u *TafUpsertOne) SetMinTemp6(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetMinTemp6(v)
	})
}

// AddMinTemp6 adds v to the "min_temp_6" field.
func (u *TafUpsertOne) AddMinTemp6(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.AddMinTemp6(v)
	})
}

// UpdateMinTemp6 sets the "min_temp_6" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateMinTemp6() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateMinTemp6()
	})
}

// ClearMinTemp6 clears the value of the "min_temp_6" field.
func (u *TafUpsertOne) ClearMinTemp6() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.ClearMinTemp6()
	})
}

// SetMaxTemp24 sets the "max_temp_24" field.
func (u *TafUpsertOne) SetMaxTemp24(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetMaxTemp24(v)
	})
}

// AddMaxTemp24 adds v to the "max_temp_24" field.
func (u *TafUpsertOne) AddMaxTemp24(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.AddMaxTemp24(v)
	})
}

// UpdateMaxTemp24 sets the "max_temp_24" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateMaxTemp24() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateMaxTemp24()
	})
}

// ClearMaxTemp24 clears the value of the "max_temp_24" field.
func (u *TafUpsertOne) ClearMaxTemp24() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.ClearMaxTemp24()
	})
}

// SetMinTemp24 sets the "min_temp_24" field.
func (u *TafUpsertOne) SetMinTemp24(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetMinTemp24(v)
	})
}

// AddMinTemp24 adds v to the "min_temp_24" field.
func (u *TafUpsertOne) AddMinTemp24(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.AddMinTemp24(v)
	})
}

// UpdateMinTemp24 sets the "min_temp_24" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateMinTemp24() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateMinTemp24()
	})
}

// ClearMinTemp24 clears the value of the "min_temp_24" field.
func (u *TafUpsertOne) ClearMinTemp24() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.ClearMinTemp24()
	})
}

// SetPrecipitation sets the "precipitation" field.
func (u *TafUpsertOne) SetPrecipitation(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetPrecipitation(v)
	})
}

// AddPrecipitation adds v to the "precipitation" field.
func (u *TafUpsertOne) AddPrecipitation(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.AddPrecipitation(v)
	})
}

// UpdatePrecipitation sets the "precipitation" field to the value that was provided on create.
func (u *TafUpsertOne) UpdatePrecipitation() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdatePrecipitation()
	})
}

// ClearPrecipitation clears the value of the "precipitation" field.
func (u *TafUpsertOne) ClearPrecipitation() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.ClearPrecipitation()
	})
}

// SetPrecipitation3 sets the "precipitation_3" field.
func (u *TafUpsertOne) SetPrecipitation3(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetPrecipitation3(v)
	})
}

// AddPrecipitation3 adds v to the "precipitation_3" field.
func (u *TafUpsertOne) AddPrecipitation3(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.AddPrecipitation3(v)
	})
}

// UpdatePrecipitation3 sets the "precipitation_3" field to the value that was provided on create.
func (u *TafUpsertOne) UpdatePrecipitation3() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdatePrecipitation3()
	})
}

// ClearPrecipitation3 clears the value of the "precipitation_3" field.
func (u *TafUpsertOne) ClearPrecipitation3() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.ClearPrecipitation3()
	})
}

// SetPrecipitation6 sets the "precipitation_6" field.
func (u *TafUpsertOne) SetPrecipitation6(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetPrecipitation6(v)
	})
}

// AddPrecipitation6 adds v to the "precipitation_6" field.
func (u *TafUpsertOne) AddPrecipitation6(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.AddPrecipitation6(v)
	})
}

// UpdatePrecipitation6 sets the "precipitation_6" field to the value that was provided on create.
func (u *TafUpsertOne) UpdatePrecipitation6() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdatePrecipitation6()
	})
}

// ClearPrecipitation6 clears the value of the "precipitation_6" field.
func (u *TafUpsertOne) ClearPrecipitation6() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.ClearPrecipitation6()
	})
}

// SetPrecipitation24 sets the "precipitation_24" field.
func (u *TafUpsertOne) SetPrecipitation24(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetPrecipitation24(v)
	})
}

// AddPrecipitation24 adds v to the "precipitation_24" field.
func (u *TafUpsertOne) AddPrecipitation24(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.AddPrecipitation24(v)
	})
}

// UpdatePrecipitation24 sets the "precipitation_24" field to the value that was provided on create.
func (u *TafUpsertOne) UpdatePrecipitation24() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdatePrecipitation24()
	})
}

// ClearPrecipitation24 clears the value of the "precipitation_24" field.
func (u *TafUpsertOne) ClearPrecipitation24() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.ClearPrecipitation24()
	})
}

// SetSnowDepth sets the "snow_depth" field.
func (u *TafUpsertOne) SetSnowDepth(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetSnowDepth(v)
	})
}

// AddSnowDepth adds v to the "snow_depth" field.
func (u *TafUpsertOne) AddSnowDepth(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.AddSnowDepth(v)
	})
}

// UpdateSnowDepth sets the "snow_depth" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateSnowDepth() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateSnowDepth()
	})
}

// ClearSnowDepth clears the value of the "snow_depth" field.
func (u *TafUpsertOne) ClearSnowDepth() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.ClearSnowDepth()
	})
}

// SetVertVis sets the "vert_vis" field.
func (u *TafUpsertOne) SetVertVis(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetVertVis(v)
	})
}

// AddVertVis adds v to the "vert_vis" field.
func (u *TafUpsertOne) AddVertVis(v float64) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.AddVertVis(v)
	})
}

// UpdateVertVis sets the "vert_vis" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateVertVis() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateVertVis()
	})
}

// ClearVertVis clears the value of the "vert_vis" field.
func (u *TafUpsertOne) ClearVertVis() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.ClearVertVis()
	})
}

// SetMetarType sets the "metar_type" field.
func (u *TafUpsertOne) SetMetarType(v taf.MetarType) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetMetarType(v)
	})
}

// UpdateMetarType sets the "metar_type" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateMetarType() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateMetarType()
	})
}

// SetHash sets the "hash" field.
func (u *TafUpsertOne) SetHash(v string) *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *TafUpsertOne) UpdateHash() *TafUpsertOne {
	return u.Update(func(s *TafUpsert) {
		s.UpdateHash()
	})
}

// Exec executes the query.
func (u *TafUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TafCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TafUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TafUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TafUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TafCreateBulk is the builder for creating many Taf entities in bulk.
type TafCreateBulk struct {
	config
	builders []*TafCreate
	conflict []sql.ConflictOption
}

// Save creates the Taf entities in the database.
func (tcb *TafCreateBulk) Save(ctx context.Context) ([]*Taf, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Taf, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TafMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TafCreateBulk) SaveX(ctx context.Context) []*Taf {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TafCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TafCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Taf.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TafUpsert) {
//			SetRawText(v+v).
//		}).
//		Exec(ctx)
func (tcb *TafCreateBulk) OnConflict(opts ...sql.ConflictOption) *TafUpsertBulk {
	tcb.conflict = opts
	return &TafUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Taf.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TafCreateBulk) OnConflictColumns(columns ...string) *TafUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TafUpsertBulk{
		create: tcb,
	}
}

// TafUpsertBulk is the builder for "upsert"-ing
// a bulk of Taf nodes.
type TafUpsertBulk struct {
	create *TafCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Taf.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(taf.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TafUpsertBulk) UpdateNewValues() *TafUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(taf.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Taf.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TafUpsertBulk) Ignore() *TafUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TafUpsertBulk) DoNothing() *TafUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TafCreateBulk.OnConflict
// documentation for more info.
func (u *TafUpsertBulk) Update(set func(*TafUpsert)) *TafUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TafUpsert{UpdateSet: update})
	}))
	return u
}

// SetRawText sets the "raw_text" field.
func (u *TafUpsertBulk) SetRawText(v string) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetRawText(v)
	})
}

// UpdateRawText sets the "raw_text" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateRawText() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateRawText()
	})
}

// SetIssueTime sets the "issue_time" field.
func (u *TafUpsertBulk) SetIssueTime(v time.Time) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetIssueTime(v)
	})
}

// UpdateIssueTime sets the "issue_time" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateIssueTime() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateIssueTime()
	})
}

// SetBulletinTime sets the "bulletin_time" field.
func (u *TafUpsertBulk) SetBulletinTime(v time.Time) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetBulletinTime(v)
	})
}

// UpdateBulletinTime sets the "bulletin_time" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateBulletinTime() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateBulletinTime()
	})
}

// SetValidFromTime sets the "valid_from_time" field.
func (u *TafUpsertBulk) SetValidFromTime(v time.Time) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetValidFromTime(v)
	})
}

// UpdateValidFromTime sets the "valid_from_time" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateValidFromTime() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateValidFromTime()
	})
}

// SetValidToTime sets the "valid_to_time" field.
func (u *TafUpsertBulk) SetValidToTime(v time.Time) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetValidToTime(v)
	})
}

// UpdateValidToTime sets the "valid_to_time" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateValidToTime() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateValidToTime()
	})
}

// SetRemarks sets the "remarks" field.
func (u *TafUpsertBulk) SetRemarks(v string) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetRemarks(v)
	})
}

// UpdateRemarks sets the "remarks" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateRemarks() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateRemarks()
	})
}

// SetTemperature sets the "temperature" field.
func (u *TafUpsertBulk) SetTemperature(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetTemperature(v)
	})
}

// AddTemperature adds v to the "temperature" field.
func (u *TafUpsertBulk) AddTemperature(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.AddTemperature(v)
	})
}

// UpdateTemperature sets the "temperature" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateTemperature() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateTemperature()
	})
}

// SetDewpoint sets the "dewpoint" field.
func (u *TafUpsertBulk) SetDewpoint(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetDewpoint(v)
	})
}

// AddDewpoint adds v to the "dewpoint" field.
func (u *TafUpsertBulk) AddDewpoint(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.AddDewpoint(v)
	})
}

// UpdateDewpoint sets the "dewpoint" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateDewpoint() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateDewpoint()
	})
}

// SetWindSpeed sets the "wind_speed" field.
func (u *TafUpsertBulk) SetWindSpeed(v int) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetWindSpeed(v)
	})
}

// AddWindSpeed adds v to the "wind_speed" field.
func (u *TafUpsertBulk) AddWindSpeed(v int) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.AddWindSpeed(v)
	})
}

// UpdateWindSpeed sets the "wind_speed" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateWindSpeed() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateWindSpeed()
	})
}

// SetWindGust sets the "wind_gust" field.
func (u *TafUpsertBulk) SetWindGust(v int) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetWindGust(v)
	})
}

// AddWindGust adds v to the "wind_gust" field.
func (u *TafUpsertBulk) AddWindGust(v int) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.AddWindGust(v)
	})
}

// UpdateWindGust sets the "wind_gust" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateWindGust() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateWindGust()
	})
}

// SetWindDirection sets the "wind_direction" field.
func (u *TafUpsertBulk) SetWindDirection(v int) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetWindDirection(v)
	})
}

// AddWindDirection adds v to the "wind_direction" field.
func (u *TafUpsertBulk) AddWindDirection(v int) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.AddWindDirection(v)
	})
}

// UpdateWindDirection sets the "wind_direction" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateWindDirection() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateWindDirection()
	})
}

// SetVisibility sets the "visibility" field.
func (u *TafUpsertBulk) SetVisibility(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetVisibility(v)
	})
}

// AddVisibility adds v to the "visibility" field.
func (u *TafUpsertBulk) AddVisibility(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.AddVisibility(v)
	})
}

// UpdateVisibility sets the "visibility" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateVisibility() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateVisibility()
	})
}

// SetAltimeter sets the "altimeter" field.
func (u *TafUpsertBulk) SetAltimeter(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetAltimeter(v)
	})
}

// AddAltimeter adds v to the "altimeter" field.
func (u *TafUpsertBulk) AddAltimeter(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.AddAltimeter(v)
	})
}

// UpdateAltimeter sets the "altimeter" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateAltimeter() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateAltimeter()
	})
}

// SetFlightCategory sets the "flight_category" field.
func (u *TafUpsertBulk) SetFlightCategory(v taf.FlightCategory) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetFlightCategory(v)
	})
}

// UpdateFlightCategory sets the "flight_category" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateFlightCategory() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateFlightCategory()
	})
}

// ClearFlightCategory clears the value of the "flight_category" field.
func (u *TafUpsertBulk) ClearFlightCategory() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.ClearFlightCategory()
	})
}

// SetQualityControlCorrected sets the "quality_control_corrected" field.
func (u *TafUpsertBulk) SetQualityControlCorrected(v bool) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetQualityControlCorrected(v)
	})
}

// UpdateQualityControlCorrected sets the "quality_control_corrected" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateQualityControlCorrected() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateQualityControlCorrected()
	})
}

// ClearQualityControlCorrected clears the value of the "quality_control_corrected" field.
func (u *TafUpsertBulk) ClearQualityControlCorrected() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.ClearQualityControlCorrected()
	})
}

// SetQualityControlAutoStation sets the "quality_control_auto_station" field.
func (u *TafUpsertBulk) SetQualityControlAutoStation(v bool) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetQualityControlAutoStation(v)
	})
}

// UpdateQualityControlAutoStation sets the "quality_control_auto_station" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateQualityControlAutoStation() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateQualityControlAutoStation()
	})
}

// SetQualityControlMaintenanceIndicatorOn sets the "quality_control_maintenance_indicator_on" field.
func (u *TafUpsertBulk) SetQualityControlMaintenanceIndicatorOn(v bool) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetQualityControlMaintenanceIndicatorOn(v)
	})
}

// UpdateQualityControlMaintenanceIndicatorOn sets the "quality_control_maintenance_indicator_on" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateQualityControlMaintenanceIndicatorOn() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateQualityControlMaintenanceIndicatorOn()
	})
}

// SetQualityControlNoSignal sets the "quality_control_no_signal" field.
func (u *TafUpsertBulk) SetQualityControlNoSignal(v bool) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetQualityControlNoSignal(v)
	})
}

// UpdateQualityControlNoSignal sets the "quality_control_no_signal" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateQualityControlNoSignal() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateQualityControlNoSignal()
	})
}

// SetQualityControlLightningSensorOff sets the "quality_control_lightning_sensor_off" field.
func (u *TafUpsertBulk) SetQualityControlLightningSensorOff(v bool) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetQualityControlLightningSensorOff(v)
	})
}

// UpdateQualityControlLightningSensorOff sets the "quality_control_lightning_sensor_off" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateQualityControlLightningSensorOff() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateQualityControlLightningSensorOff()
	})
}

// SetQualityControlFreezingRainSensorOff sets the "quality_control_freezing_rain_sensor_off" field.
func (u *TafUpsertBulk) SetQualityControlFreezingRainSensorOff(v bool) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetQualityControlFreezingRainSensorOff(v)
	})
}

// UpdateQualityControlFreezingRainSensorOff sets the "quality_control_freezing_rain_sensor_off" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateQualityControlFreezingRainSensorOff() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateQualityControlFreezingRainSensorOff()
	})
}

// SetQualityControlPresentWeatherSensorOff sets the "quality_control_present_weather_sensor_off" field.
func (u *TafUpsertBulk) SetQualityControlPresentWeatherSensorOff(v bool) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetQualityControlPresentWeatherSensorOff(v)
	})
}

// UpdateQualityControlPresentWeatherSensorOff sets the "quality_control_present_weather_sensor_off" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateQualityControlPresentWeatherSensorOff() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateQualityControlPresentWeatherSensorOff()
	})
}

// SetSeaLevelPressure sets the "sea_level_pressure" field.
func (u *TafUpsertBulk) SetSeaLevelPressure(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetSeaLevelPressure(v)
	})
}

// AddSeaLevelPressure adds v to the "sea_level_pressure" field.
func (u *TafUpsertBulk) AddSeaLevelPressure(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.AddSeaLevelPressure(v)
	})
}

// UpdateSeaLevelPressure sets the "sea_level_pressure" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateSeaLevelPressure() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateSeaLevelPressure()
	})
}

// ClearSeaLevelPressure clears the value of the "sea_level_pressure" field.
func (u *TafUpsertBulk) ClearSeaLevelPressure() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.ClearSeaLevelPressure()
	})
}

// SetPressureTendency sets the "pressure_tendency" field.
func (u *TafUpsertBulk) SetPressureTendency(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetPressureTendency(v)
	})
}

// AddPressureTendency adds v to the "pressure_tendency" field.
func (u *TafUpsertBulk) AddPressureTendency(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.AddPressureTendency(v)
	})
}

// UpdatePressureTendency sets the "pressure_tendency" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdatePressureTendency() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdatePressureTendency()
	})
}

// ClearPressureTendency clears the value of the "pressure_tendency" field.
func (u *TafUpsertBulk) ClearPressureTendency() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.ClearPressureTendency()
	})
}

// SetMaxTemp6 sets the "max_temp_6" field.
func (u *TafUpsertBulk) SetMaxTemp6(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetMaxTemp6(v)
	})
}

// AddMaxTemp6 adds v to the "max_temp_6" field.
func (u *TafUpsertBulk) AddMaxTemp6(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.AddMaxTemp6(v)
	})
}

// UpdateMaxTemp6 sets the "max_temp_6" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateMaxTemp6() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateMaxTemp6()
	})
}

// ClearMaxTemp6 clears the value of the "max_temp_6" field.
func (u *TafUpsertBulk) ClearMaxTemp6() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.ClearMaxTemp6()
	})
}

// SetMinTemp6 sets the "min_temp_6" field.
func (u *TafUpsertBulk) SetMinTemp6(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetMinTemp6(v)
	})
}

// AddMinTemp6 adds v to the "min_temp_6" field.
func (u *TafUpsertBulk) AddMinTemp6(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.AddMinTemp6(v)
	})
}

// UpdateMinTemp6 sets the "min_temp_6" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateMinTemp6() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateMinTemp6()
	})
}

// ClearMinTemp6 clears the value of the "min_temp_6" field.
func (u *TafUpsertBulk) ClearMinTemp6() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.ClearMinTemp6()
	})
}

// SetMaxTemp24 sets the "max_temp_24" field.
func (u *TafUpsertBulk) SetMaxTemp24(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetMaxTemp24(v)
	})
}

// AddMaxTemp24 adds v to the "max_temp_24" field.
func (u *TafUpsertBulk) AddMaxTemp24(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.AddMaxTemp24(v)
	})
}

// UpdateMaxTemp24 sets the "max_temp_24" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateMaxTemp24() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateMaxTemp24()
	})
}

// ClearMaxTemp24 clears the value of the "max_temp_24" field.
func (u *TafUpsertBulk) ClearMaxTemp24() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.ClearMaxTemp24()
	})
}

// SetMinTemp24 sets the "min_temp_24" field.
func (u *TafUpsertBulk) SetMinTemp24(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetMinTemp24(v)
	})
}

// AddMinTemp24 adds v to the "min_temp_24" field.
func (u *TafUpsertBulk) AddMinTemp24(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.AddMinTemp24(v)
	})
}

// UpdateMinTemp24 sets the "min_temp_24" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateMinTemp24() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateMinTemp24()
	})
}

// ClearMinTemp24 clears the value of the "min_temp_24" field.
func (u *TafUpsertBulk) ClearMinTemp24() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.ClearMinTemp24()
	})
}

// SetPrecipitation sets the "precipitation" field.
func (u *TafUpsertBulk) SetPrecipitation(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetPrecipitation(v)
	})
}

// AddPrecipitation adds v to the "precipitation" field.
func (u *TafUpsertBulk) AddPrecipitation(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.AddPrecipitation(v)
	})
}

// UpdatePrecipitation sets the "precipitation" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdatePrecipitation() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdatePrecipitation()
	})
}

// ClearPrecipitation clears the value of the "precipitation" field.
func (u *TafUpsertBulk) ClearPrecipitation() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.ClearPrecipitation()
	})
}

// SetPrecipitation3 sets the "precipitation_3" field.
func (u *TafUpsertBulk) SetPrecipitation3(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetPrecipitation3(v)
	})
}

// AddPrecipitation3 adds v to the "precipitation_3" field.
func (u *TafUpsertBulk) AddPrecipitation3(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.AddPrecipitation3(v)
	})
}

// UpdatePrecipitation3 sets the "precipitation_3" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdatePrecipitation3() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdatePrecipitation3()
	})
}

// ClearPrecipitation3 clears the value of the "precipitation_3" field.
func (u *TafUpsertBulk) ClearPrecipitation3() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.ClearPrecipitation3()
	})
}

// SetPrecipitation6 sets the "precipitation_6" field.
func (u *TafUpsertBulk) SetPrecipitation6(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetPrecipitation6(v)
	})
}

// AddPrecipitation6 adds v to the "precipitation_6" field.
func (u *TafUpsertBulk) AddPrecipitation6(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.AddPrecipitation6(v)
	})
}

// UpdatePrecipitation6 sets the "precipitation_6" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdatePrecipitation6() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdatePrecipitation6()
	})
}

// ClearPrecipitation6 clears the value of the "precipitation_6" field.
func (u *TafUpsertBulk) ClearPrecipitation6() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.ClearPrecipitation6()
	})
}

// SetPrecipitation24 sets the "precipitation_24" field.
func (u *TafUpsertBulk) SetPrecipitation24(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetPrecipitation24(v)
	})
}

// AddPrecipitation24 adds v to the "precipitation_24" field.
func (u *TafUpsertBulk) AddPrecipitation24(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.AddPrecipitation24(v)
	})
}

// UpdatePrecipitation24 sets the "precipitation_24" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdatePrecipitation24() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdatePrecipitation24()
	})
}

// ClearPrecipitation24 clears the value of the "precipitation_24" field.
func (u *TafUpsertBulk) ClearPrecipitation24() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.ClearPrecipitation24()
	})
}

// SetSnowDepth sets the "snow_depth" field.
func (u *TafUpsertBulk) SetSnowDepth(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetSnowDepth(v)
	})
}

// AddSnowDepth adds v to the "snow_depth" field.
func (u *TafUpsertBulk) AddSnowDepth(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.AddSnowDepth(v)
	})
}

// UpdateSnowDepth sets the "snow_depth" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateSnowDepth() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateSnowDepth()
	})
}

// ClearSnowDepth clears the value of the "snow_depth" field.
func (u *TafUpsertBulk) ClearSnowDepth() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.ClearSnowDepth()
	})
}

// SetVertVis sets the "vert_vis" field.
func (u *TafUpsertBulk) SetVertVis(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetVertVis(v)
	})
}

// AddVertVis adds v to the "vert_vis" field.
func (u *TafUpsertBulk) AddVertVis(v float64) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.AddVertVis(v)
	})
}

// UpdateVertVis sets the "vert_vis" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateVertVis() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateVertVis()
	})
}

// ClearVertVis clears the value of the "vert_vis" field.
func (u *TafUpsertBulk) ClearVertVis() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.ClearVertVis()
	})
}

// SetMetarType sets the "metar_type" field.
func (u *TafUpsertBulk) SetMetarType(v taf.MetarType) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetMetarType(v)
	})
}

// UpdateMetarType sets the "metar_type" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateMetarType() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateMetarType()
	})
}

// SetHash sets the "hash" field.
func (u *TafUpsertBulk) SetHash(v string) *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *TafUpsertBulk) UpdateHash() *TafUpsertBulk {
	return u.Update(func(s *TafUpsert) {
		s.UpdateHash()
	})
}

// Exec executes the query.
func (u *TafUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TafCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TafCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TafUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
