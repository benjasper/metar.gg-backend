// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"metar.gg/ent/airport"
	"metar.gg/ent/station"
)

// Station is the model entity for the Station schema.
type Station struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// The ICAO identifier of the station that provided the weather data or identifier of the weather station.
	StationID string `json:"station_id,omitempty"`
	// The latitude in decimal degrees of the station.
	Latitude *float64 `json:"latitude,omitempty"`
	// The longitude in decimal degrees of the station.
	Longitude *float64 `json:"longitude,omitempty"`
	// The elevation in meters of the station.
	Elevation *float64 `json:"elevation,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StationQuery when eager-loading is set.
	Edges           StationEdges `json:"edges"`
	airport_station *int
}

// StationEdges holds the relations/edges for other nodes in the graph.
type StationEdges struct {
	// The airport that hosts this station. This can also be empty if the metar is from a weather station outside an airport.
	Airport *Airport `json:"airport,omitempty"`
	// The metars that were reported by this station.
	Metars []*Metar `json:"metars,omitempty"`
	// The tafs that were reported by this station.
	Tafs []*Taf `json:"tafs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedMetars map[string][]*Metar
	namedTafs   map[string][]*Taf
}

// AirportOrErr returns the Airport value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StationEdges) AirportOrErr() (*Airport, error) {
	if e.loadedTypes[0] {
		if e.Airport == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: airport.Label}
		}
		return e.Airport, nil
	}
	return nil, &NotLoadedError{edge: "airport"}
}

// MetarsOrErr returns the Metars value or an error if the edge
// was not loaded in eager-loading.
func (e StationEdges) MetarsOrErr() ([]*Metar, error) {
	if e.loadedTypes[1] {
		return e.Metars, nil
	}
	return nil, &NotLoadedError{edge: "metars"}
}

// TafsOrErr returns the Tafs value or an error if the edge
// was not loaded in eager-loading.
func (e StationEdges) TafsOrErr() ([]*Taf, error) {
	if e.loadedTypes[2] {
		return e.Tafs, nil
	}
	return nil, &NotLoadedError{edge: "tafs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Station) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case station.FieldLatitude, station.FieldLongitude, station.FieldElevation:
			values[i] = new(sql.NullFloat64)
		case station.FieldID:
			values[i] = new(sql.NullInt64)
		case station.FieldStationID, station.FieldHash:
			values[i] = new(sql.NullString)
		case station.ForeignKeys[0]: // airport_station
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Station", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Station fields.
func (s *Station) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case station.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case station.FieldStationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field station_id", values[i])
			} else if value.Valid {
				s.StationID = value.String
			}
		case station.FieldLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				s.Latitude = new(float64)
				*s.Latitude = value.Float64
			}
		case station.FieldLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude", values[i])
			} else if value.Valid {
				s.Longitude = new(float64)
				*s.Longitude = value.Float64
			}
		case station.FieldElevation:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field elevation", values[i])
			} else if value.Valid {
				s.Elevation = new(float64)
				*s.Elevation = value.Float64
			}
		case station.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				s.Hash = value.String
			}
		case station.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field airport_station", value)
			} else if value.Valid {
				s.airport_station = new(int)
				*s.airport_station = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAirport queries the "airport" edge of the Station entity.
func (s *Station) QueryAirport() *AirportQuery {
	return (&StationClient{config: s.config}).QueryAirport(s)
}

// QueryMetars queries the "metars" edge of the Station entity.
func (s *Station) QueryMetars() *MetarQuery {
	return (&StationClient{config: s.config}).QueryMetars(s)
}

// QueryTafs queries the "tafs" edge of the Station entity.
func (s *Station) QueryTafs() *TafQuery {
	return (&StationClient{config: s.config}).QueryTafs(s)
}

// Update returns a builder for updating this Station.
// Note that you need to call Station.Unwrap() before calling this method if this Station
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Station) Update() *StationUpdateOne {
	return (&StationClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Station entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Station) Unwrap() *Station {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Station is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Station) String() string {
	var builder strings.Builder
	builder.WriteString("Station(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("station_id=")
	builder.WriteString(s.StationID)
	builder.WriteString(", ")
	if v := s.Latitude; v != nil {
		builder.WriteString("latitude=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.Longitude; v != nil {
		builder.WriteString("longitude=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.Elevation; v != nil {
		builder.WriteString("elevation=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(s.Hash)
	builder.WriteByte(')')
	return builder.String()
}

// NamedMetars returns the Metars named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Station) NamedMetars(name string) ([]*Metar, error) {
	if s.Edges.namedMetars == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedMetars[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Station) appendNamedMetars(name string, edges ...*Metar) {
	if s.Edges.namedMetars == nil {
		s.Edges.namedMetars = make(map[string][]*Metar)
	}
	if len(edges) == 0 {
		s.Edges.namedMetars[name] = []*Metar{}
	} else {
		s.Edges.namedMetars[name] = append(s.Edges.namedMetars[name], edges...)
	}
}

// NamedTafs returns the Tafs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Station) NamedTafs(name string) ([]*Taf, error) {
	if s.Edges.namedTafs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedTafs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Station) appendNamedTafs(name string, edges ...*Taf) {
	if s.Edges.namedTafs == nil {
		s.Edges.namedTafs = make(map[string][]*Taf)
	}
	if len(edges) == 0 {
		s.Edges.namedTafs[name] = []*Taf{}
	} else {
		s.Edges.namedTafs[name] = append(s.Edges.namedTafs[name], edges...)
	}
}

// Stations is a parsable slice of Station.
type Stations []*Station

func (s Stations) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
