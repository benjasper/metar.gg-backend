// Code generated by ent, DO NOT EDIT.

package turbulencecondition

import (
	"entgo.io/ent/dialect/sql"
	"metar.gg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Intensity applies equality check predicate on the "intensity" field. It's identical to IntensityEQ.
func Intensity(v string) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIntensity), v))
	})
}

// MinAltitude applies equality check predicate on the "min_altitude" field. It's identical to MinAltitudeEQ.
func MinAltitude(v int) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinAltitude), v))
	})
}

// MaxAltitude applies equality check predicate on the "max_altitude" field. It's identical to MaxAltitudeEQ.
func MaxAltitude(v int) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxAltitude), v))
	})
}

// IntensityEQ applies the EQ predicate on the "intensity" field.
func IntensityEQ(v string) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIntensity), v))
	})
}

// IntensityNEQ applies the NEQ predicate on the "intensity" field.
func IntensityNEQ(v string) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIntensity), v))
	})
}

// IntensityIn applies the In predicate on the "intensity" field.
func IntensityIn(vs ...string) predicate.TurbulenceCondition {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIntensity), v...))
	})
}

// IntensityNotIn applies the NotIn predicate on the "intensity" field.
func IntensityNotIn(vs ...string) predicate.TurbulenceCondition {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIntensity), v...))
	})
}

// IntensityGT applies the GT predicate on the "intensity" field.
func IntensityGT(v string) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIntensity), v))
	})
}

// IntensityGTE applies the GTE predicate on the "intensity" field.
func IntensityGTE(v string) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIntensity), v))
	})
}

// IntensityLT applies the LT predicate on the "intensity" field.
func IntensityLT(v string) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIntensity), v))
	})
}

// IntensityLTE applies the LTE predicate on the "intensity" field.
func IntensityLTE(v string) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIntensity), v))
	})
}

// IntensityContains applies the Contains predicate on the "intensity" field.
func IntensityContains(v string) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIntensity), v))
	})
}

// IntensityHasPrefix applies the HasPrefix predicate on the "intensity" field.
func IntensityHasPrefix(v string) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIntensity), v))
	})
}

// IntensityHasSuffix applies the HasSuffix predicate on the "intensity" field.
func IntensityHasSuffix(v string) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIntensity), v))
	})
}

// IntensityEqualFold applies the EqualFold predicate on the "intensity" field.
func IntensityEqualFold(v string) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIntensity), v))
	})
}

// IntensityContainsFold applies the ContainsFold predicate on the "intensity" field.
func IntensityContainsFold(v string) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIntensity), v))
	})
}

// MinAltitudeEQ applies the EQ predicate on the "min_altitude" field.
func MinAltitudeEQ(v int) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinAltitude), v))
	})
}

// MinAltitudeNEQ applies the NEQ predicate on the "min_altitude" field.
func MinAltitudeNEQ(v int) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMinAltitude), v))
	})
}

// MinAltitudeIn applies the In predicate on the "min_altitude" field.
func MinAltitudeIn(vs ...int) predicate.TurbulenceCondition {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMinAltitude), v...))
	})
}

// MinAltitudeNotIn applies the NotIn predicate on the "min_altitude" field.
func MinAltitudeNotIn(vs ...int) predicate.TurbulenceCondition {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMinAltitude), v...))
	})
}

// MinAltitudeGT applies the GT predicate on the "min_altitude" field.
func MinAltitudeGT(v int) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMinAltitude), v))
	})
}

// MinAltitudeGTE applies the GTE predicate on the "min_altitude" field.
func MinAltitudeGTE(v int) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMinAltitude), v))
	})
}

// MinAltitudeLT applies the LT predicate on the "min_altitude" field.
func MinAltitudeLT(v int) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMinAltitude), v))
	})
}

// MinAltitudeLTE applies the LTE predicate on the "min_altitude" field.
func MinAltitudeLTE(v int) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMinAltitude), v))
	})
}

// MaxAltitudeEQ applies the EQ predicate on the "max_altitude" field.
func MaxAltitudeEQ(v int) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxAltitude), v))
	})
}

// MaxAltitudeNEQ applies the NEQ predicate on the "max_altitude" field.
func MaxAltitudeNEQ(v int) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxAltitude), v))
	})
}

// MaxAltitudeIn applies the In predicate on the "max_altitude" field.
func MaxAltitudeIn(vs ...int) predicate.TurbulenceCondition {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMaxAltitude), v...))
	})
}

// MaxAltitudeNotIn applies the NotIn predicate on the "max_altitude" field.
func MaxAltitudeNotIn(vs ...int) predicate.TurbulenceCondition {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMaxAltitude), v...))
	})
}

// MaxAltitudeGT applies the GT predicate on the "max_altitude" field.
func MaxAltitudeGT(v int) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxAltitude), v))
	})
}

// MaxAltitudeGTE applies the GTE predicate on the "max_altitude" field.
func MaxAltitudeGTE(v int) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxAltitude), v))
	})
}

// MaxAltitudeLT applies the LT predicate on the "max_altitude" field.
func MaxAltitudeLT(v int) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxAltitude), v))
	})
}

// MaxAltitudeLTE applies the LTE predicate on the "max_altitude" field.
func MaxAltitudeLTE(v int) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxAltitude), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TurbulenceCondition) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TurbulenceCondition) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TurbulenceCondition) predicate.TurbulenceCondition {
	return predicate.TurbulenceCondition(func(s *sql.Selector) {
		p(s.Not())
	})
}
