// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"metar.gg/ent/icingcondition"
)

// IcingCondition is the model entity for the IcingCondition schema.
type IcingCondition struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// The intensity of the icing.
	Intensity string `json:"intensity,omitempty"`
	// The minimum altitude in feet that the icing is present.
	MinAltitude *int `json:"min_altitude,omitempty"`
	// The maximum altitude in feet that the icing is present.
	MaxAltitude               *int `json:"max_altitude,omitempty"`
	forecast_icing_conditions *uuid.UUID
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IcingCondition) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case icingcondition.FieldMinAltitude, icingcondition.FieldMaxAltitude:
			values[i] = new(sql.NullInt64)
		case icingcondition.FieldIntensity:
			values[i] = new(sql.NullString)
		case icingcondition.FieldID:
			values[i] = new(uuid.UUID)
		case icingcondition.ForeignKeys[0]: // forecast_icing_conditions
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type IcingCondition", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IcingCondition fields.
func (ic *IcingCondition) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case icingcondition.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ic.ID = *value
			}
		case icingcondition.FieldIntensity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field intensity", values[i])
			} else if value.Valid {
				ic.Intensity = value.String
			}
		case icingcondition.FieldMinAltitude:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field min_altitude", values[i])
			} else if value.Valid {
				ic.MinAltitude = new(int)
				*ic.MinAltitude = int(value.Int64)
			}
		case icingcondition.FieldMaxAltitude:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_altitude", values[i])
			} else if value.Valid {
				ic.MaxAltitude = new(int)
				*ic.MaxAltitude = int(value.Int64)
			}
		case icingcondition.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field forecast_icing_conditions", values[i])
			} else if value.Valid {
				ic.forecast_icing_conditions = new(uuid.UUID)
				*ic.forecast_icing_conditions = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this IcingCondition.
// Note that you need to call IcingCondition.Unwrap() before calling this method if this IcingCondition
// was returned from a transaction, and the transaction was committed or rolled back.
func (ic *IcingCondition) Update() *IcingConditionUpdateOne {
	return (&IcingConditionClient{config: ic.config}).UpdateOne(ic)
}

// Unwrap unwraps the IcingCondition entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ic *IcingCondition) Unwrap() *IcingCondition {
	_tx, ok := ic.config.driver.(*txDriver)
	if !ok {
		panic("ent: IcingCondition is not a transactional entity")
	}
	ic.config.driver = _tx.drv
	return ic
}

// String implements the fmt.Stringer.
func (ic *IcingCondition) String() string {
	var builder strings.Builder
	builder.WriteString("IcingCondition(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ic.ID))
	builder.WriteString("intensity=")
	builder.WriteString(ic.Intensity)
	builder.WriteString(", ")
	if v := ic.MinAltitude; v != nil {
		builder.WriteString("min_altitude=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ic.MaxAltitude; v != nil {
		builder.WriteString("max_altitude=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// IcingConditions is a parsable slice of IcingCondition.
type IcingConditions []*IcingCondition

func (ic IcingConditions) config(cfg config) {
	for _i := range ic {
		ic[_i].config = cfg
	}
}
