// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"metar.gg/ent/airport"
	"metar.gg/ent/metar"
	"metar.gg/ent/predicate"
	"metar.gg/ent/taf"
	"metar.gg/ent/weatherstation"
)

// WeatherStationQuery is the builder for querying WeatherStation entities.
type WeatherStationQuery struct {
	config
	ctx             *QueryContext
	order           []weatherstation.OrderOption
	inters          []Interceptor
	predicates      []predicate.WeatherStation
	withAirport     *AirportQuery
	withMetars      *MetarQuery
	withTafs        *TafQuery
	withFKs         bool
	loadTotal       []func(context.Context, []*WeatherStation) error
	modifiers       []func(*sql.Selector)
	withNamedMetars map[string]*MetarQuery
	withNamedTafs   map[string]*TafQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WeatherStationQuery builder.
func (wsq *WeatherStationQuery) Where(ps ...predicate.WeatherStation) *WeatherStationQuery {
	wsq.predicates = append(wsq.predicates, ps...)
	return wsq
}

// Limit the number of records to be returned by this query.
func (wsq *WeatherStationQuery) Limit(limit int) *WeatherStationQuery {
	wsq.ctx.Limit = &limit
	return wsq
}

// Offset to start from.
func (wsq *WeatherStationQuery) Offset(offset int) *WeatherStationQuery {
	wsq.ctx.Offset = &offset
	return wsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (wsq *WeatherStationQuery) Unique(unique bool) *WeatherStationQuery {
	wsq.ctx.Unique = &unique
	return wsq
}

// Order specifies how the records should be ordered.
func (wsq *WeatherStationQuery) Order(o ...weatherstation.OrderOption) *WeatherStationQuery {
	wsq.order = append(wsq.order, o...)
	return wsq
}

// QueryAirport chains the current query on the "airport" edge.
func (wsq *WeatherStationQuery) QueryAirport() *AirportQuery {
	query := (&AirportClient{config: wsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(weatherstation.Table, weatherstation.FieldID, selector),
			sqlgraph.To(airport.Table, airport.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, weatherstation.AirportTable, weatherstation.AirportColumn),
		)
		fromU = sqlgraph.SetNeighbors(wsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMetars chains the current query on the "metars" edge.
func (wsq *WeatherStationQuery) QueryMetars() *MetarQuery {
	query := (&MetarClient{config: wsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(weatherstation.Table, weatherstation.FieldID, selector),
			sqlgraph.To(metar.Table, metar.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, weatherstation.MetarsTable, weatherstation.MetarsColumn),
		)
		fromU = sqlgraph.SetNeighbors(wsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTafs chains the current query on the "tafs" edge.
func (wsq *WeatherStationQuery) QueryTafs() *TafQuery {
	query := (&TafClient{config: wsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(weatherstation.Table, weatherstation.FieldID, selector),
			sqlgraph.To(taf.Table, taf.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, weatherstation.TafsTable, weatherstation.TafsColumn),
		)
		fromU = sqlgraph.SetNeighbors(wsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WeatherStation entity from the query.
// Returns a *NotFoundError when no WeatherStation was found.
func (wsq *WeatherStationQuery) First(ctx context.Context) (*WeatherStation, error) {
	nodes, err := wsq.Limit(1).All(setContextOp(ctx, wsq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{weatherstation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wsq *WeatherStationQuery) FirstX(ctx context.Context) *WeatherStation {
	node, err := wsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WeatherStation ID from the query.
// Returns a *NotFoundError when no WeatherStation ID was found.
func (wsq *WeatherStationQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = wsq.Limit(1).IDs(setContextOp(ctx, wsq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{weatherstation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (wsq *WeatherStationQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := wsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WeatherStation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WeatherStation entity is found.
// Returns a *NotFoundError when no WeatherStation entities are found.
func (wsq *WeatherStationQuery) Only(ctx context.Context) (*WeatherStation, error) {
	nodes, err := wsq.Limit(2).All(setContextOp(ctx, wsq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{weatherstation.Label}
	default:
		return nil, &NotSingularError{weatherstation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wsq *WeatherStationQuery) OnlyX(ctx context.Context) *WeatherStation {
	node, err := wsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WeatherStation ID in the query.
// Returns a *NotSingularError when more than one WeatherStation ID is found.
// Returns a *NotFoundError when no entities are found.
func (wsq *WeatherStationQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = wsq.Limit(2).IDs(setContextOp(ctx, wsq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{weatherstation.Label}
	default:
		err = &NotSingularError{weatherstation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (wsq *WeatherStationQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := wsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WeatherStations.
func (wsq *WeatherStationQuery) All(ctx context.Context) ([]*WeatherStation, error) {
	ctx = setContextOp(ctx, wsq.ctx, "All")
	if err := wsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*WeatherStation, *WeatherStationQuery]()
	return withInterceptors[[]*WeatherStation](ctx, wsq, qr, wsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (wsq *WeatherStationQuery) AllX(ctx context.Context) []*WeatherStation {
	nodes, err := wsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WeatherStation IDs.
func (wsq *WeatherStationQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if wsq.ctx.Unique == nil && wsq.path != nil {
		wsq.Unique(true)
	}
	ctx = setContextOp(ctx, wsq.ctx, "IDs")
	if err = wsq.Select(weatherstation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wsq *WeatherStationQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := wsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wsq *WeatherStationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, wsq.ctx, "Count")
	if err := wsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, wsq, querierCount[*WeatherStationQuery](), wsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (wsq *WeatherStationQuery) CountX(ctx context.Context) int {
	count, err := wsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wsq *WeatherStationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, wsq.ctx, "Exist")
	switch _, err := wsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (wsq *WeatherStationQuery) ExistX(ctx context.Context) bool {
	exist, err := wsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WeatherStationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wsq *WeatherStationQuery) Clone() *WeatherStationQuery {
	if wsq == nil {
		return nil
	}
	return &WeatherStationQuery{
		config:      wsq.config,
		ctx:         wsq.ctx.Clone(),
		order:       append([]weatherstation.OrderOption{}, wsq.order...),
		inters:      append([]Interceptor{}, wsq.inters...),
		predicates:  append([]predicate.WeatherStation{}, wsq.predicates...),
		withAirport: wsq.withAirport.Clone(),
		withMetars:  wsq.withMetars.Clone(),
		withTafs:    wsq.withTafs.Clone(),
		// clone intermediate query.
		sql:  wsq.sql.Clone(),
		path: wsq.path,
	}
}

// WithAirport tells the query-builder to eager-load the nodes that are connected to
// the "airport" edge. The optional arguments are used to configure the query builder of the edge.
func (wsq *WeatherStationQuery) WithAirport(opts ...func(*AirportQuery)) *WeatherStationQuery {
	query := (&AirportClient{config: wsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wsq.withAirport = query
	return wsq
}

// WithMetars tells the query-builder to eager-load the nodes that are connected to
// the "metars" edge. The optional arguments are used to configure the query builder of the edge.
func (wsq *WeatherStationQuery) WithMetars(opts ...func(*MetarQuery)) *WeatherStationQuery {
	query := (&MetarClient{config: wsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wsq.withMetars = query
	return wsq
}

// WithTafs tells the query-builder to eager-load the nodes that are connected to
// the "tafs" edge. The optional arguments are used to configure the query builder of the edge.
func (wsq *WeatherStationQuery) WithTafs(opts ...func(*TafQuery)) *WeatherStationQuery {
	query := (&TafClient{config: wsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wsq.withTafs = query
	return wsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		StationID string `json:"station_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WeatherStation.Query().
//		GroupBy(weatherstation.FieldStationID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (wsq *WeatherStationQuery) GroupBy(field string, fields ...string) *WeatherStationGroupBy {
	wsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WeatherStationGroupBy{build: wsq}
	grbuild.flds = &wsq.ctx.Fields
	grbuild.label = weatherstation.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		StationID string `json:"station_id,omitempty"`
//	}
//
//	client.WeatherStation.Query().
//		Select(weatherstation.FieldStationID).
//		Scan(ctx, &v)
func (wsq *WeatherStationQuery) Select(fields ...string) *WeatherStationSelect {
	wsq.ctx.Fields = append(wsq.ctx.Fields, fields...)
	sbuild := &WeatherStationSelect{WeatherStationQuery: wsq}
	sbuild.label = weatherstation.Label
	sbuild.flds, sbuild.scan = &wsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WeatherStationSelect configured with the given aggregations.
func (wsq *WeatherStationQuery) Aggregate(fns ...AggregateFunc) *WeatherStationSelect {
	return wsq.Select().Aggregate(fns...)
}

func (wsq *WeatherStationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range wsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, wsq); err != nil {
				return err
			}
		}
	}
	for _, f := range wsq.ctx.Fields {
		if !weatherstation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if wsq.path != nil {
		prev, err := wsq.path(ctx)
		if err != nil {
			return err
		}
		wsq.sql = prev
	}
	return nil
}

func (wsq *WeatherStationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*WeatherStation, error) {
	var (
		nodes       = []*WeatherStation{}
		withFKs     = wsq.withFKs
		_spec       = wsq.querySpec()
		loadedTypes = [3]bool{
			wsq.withAirport != nil,
			wsq.withMetars != nil,
			wsq.withTafs != nil,
		}
	)
	if wsq.withAirport != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, weatherstation.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*WeatherStation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &WeatherStation{config: wsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(wsq.modifiers) > 0 {
		_spec.Modifiers = wsq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, wsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := wsq.withAirport; query != nil {
		if err := wsq.loadAirport(ctx, query, nodes, nil,
			func(n *WeatherStation, e *Airport) { n.Edges.Airport = e }); err != nil {
			return nil, err
		}
	}
	if query := wsq.withMetars; query != nil {
		if err := wsq.loadMetars(ctx, query, nodes,
			func(n *WeatherStation) { n.Edges.Metars = []*Metar{} },
			func(n *WeatherStation, e *Metar) { n.Edges.Metars = append(n.Edges.Metars, e) }); err != nil {
			return nil, err
		}
	}
	if query := wsq.withTafs; query != nil {
		if err := wsq.loadTafs(ctx, query, nodes,
			func(n *WeatherStation) { n.Edges.Tafs = []*Taf{} },
			func(n *WeatherStation, e *Taf) { n.Edges.Tafs = append(n.Edges.Tafs, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range wsq.withNamedMetars {
		if err := wsq.loadMetars(ctx, query, nodes,
			func(n *WeatherStation) { n.appendNamedMetars(name) },
			func(n *WeatherStation, e *Metar) { n.appendNamedMetars(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range wsq.withNamedTafs {
		if err := wsq.loadTafs(ctx, query, nodes,
			func(n *WeatherStation) { n.appendNamedTafs(name) },
			func(n *WeatherStation, e *Taf) { n.appendNamedTafs(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range wsq.loadTotal {
		if err := wsq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (wsq *WeatherStationQuery) loadAirport(ctx context.Context, query *AirportQuery, nodes []*WeatherStation, init func(*WeatherStation), assign func(*WeatherStation, *Airport)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*WeatherStation)
	for i := range nodes {
		if nodes[i].airport_station == nil {
			continue
		}
		fk := *nodes[i].airport_station
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(airport.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "airport_station" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (wsq *WeatherStationQuery) loadMetars(ctx context.Context, query *MetarQuery, nodes []*WeatherStation, init func(*WeatherStation), assign func(*WeatherStation, *Metar)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*WeatherStation)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Metar(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(weatherstation.MetarsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.weather_station_metars
		if fk == nil {
			return fmt.Errorf(`foreign-key "weather_station_metars" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "weather_station_metars" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (wsq *WeatherStationQuery) loadTafs(ctx context.Context, query *TafQuery, nodes []*WeatherStation, init func(*WeatherStation), assign func(*WeatherStation, *Taf)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*WeatherStation)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(weatherstation.TafsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.weather_station_tafs
		if fk == nil {
			return fmt.Errorf(`foreign-key "weather_station_tafs" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "weather_station_tafs" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (wsq *WeatherStationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wsq.querySpec()
	if len(wsq.modifiers) > 0 {
		_spec.Modifiers = wsq.modifiers
	}
	_spec.Node.Columns = wsq.ctx.Fields
	if len(wsq.ctx.Fields) > 0 {
		_spec.Unique = wsq.ctx.Unique != nil && *wsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, wsq.driver, _spec)
}

func (wsq *WeatherStationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(weatherstation.Table, weatherstation.Columns, sqlgraph.NewFieldSpec(weatherstation.FieldID, field.TypeUUID))
	_spec.From = wsq.sql
	if unique := wsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if wsq.path != nil {
		_spec.Unique = true
	}
	if fields := wsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, weatherstation.FieldID)
		for i := range fields {
			if fields[i] != weatherstation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := wsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (wsq *WeatherStationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(wsq.driver.Dialect())
	t1 := builder.Table(weatherstation.Table)
	columns := wsq.ctx.Fields
	if len(columns) == 0 {
		columns = weatherstation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wsq.sql != nil {
		selector = wsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if wsq.ctx.Unique != nil && *wsq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range wsq.modifiers {
		m(selector)
	}
	for _, p := range wsq.predicates {
		p(selector)
	}
	for _, p := range wsq.order {
		p(selector)
	}
	if offset := wsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (wsq *WeatherStationQuery) Modify(modifiers ...func(s *sql.Selector)) *WeatherStationSelect {
	wsq.modifiers = append(wsq.modifiers, modifiers...)
	return wsq.Select()
}

// WithNamedMetars tells the query-builder to eager-load the nodes that are connected to the "metars"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (wsq *WeatherStationQuery) WithNamedMetars(name string, opts ...func(*MetarQuery)) *WeatherStationQuery {
	query := (&MetarClient{config: wsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if wsq.withNamedMetars == nil {
		wsq.withNamedMetars = make(map[string]*MetarQuery)
	}
	wsq.withNamedMetars[name] = query
	return wsq
}

// WithNamedTafs tells the query-builder to eager-load the nodes that are connected to the "tafs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (wsq *WeatherStationQuery) WithNamedTafs(name string, opts ...func(*TafQuery)) *WeatherStationQuery {
	query := (&TafClient{config: wsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if wsq.withNamedTafs == nil {
		wsq.withNamedTafs = make(map[string]*TafQuery)
	}
	wsq.withNamedTafs[name] = query
	return wsq
}

// WeatherStationGroupBy is the group-by builder for WeatherStation entities.
type WeatherStationGroupBy struct {
	selector
	build *WeatherStationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wsgb *WeatherStationGroupBy) Aggregate(fns ...AggregateFunc) *WeatherStationGroupBy {
	wsgb.fns = append(wsgb.fns, fns...)
	return wsgb
}

// Scan applies the selector query and scans the result into the given value.
func (wsgb *WeatherStationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wsgb.build.ctx, "GroupBy")
	if err := wsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WeatherStationQuery, *WeatherStationGroupBy](ctx, wsgb.build, wsgb, wsgb.build.inters, v)
}

func (wsgb *WeatherStationGroupBy) sqlScan(ctx context.Context, root *WeatherStationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(wsgb.fns))
	for _, fn := range wsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*wsgb.flds)+len(wsgb.fns))
		for _, f := range *wsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*wsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WeatherStationSelect is the builder for selecting fields of WeatherStation entities.
type WeatherStationSelect struct {
	*WeatherStationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (wss *WeatherStationSelect) Aggregate(fns ...AggregateFunc) *WeatherStationSelect {
	wss.fns = append(wss.fns, fns...)
	return wss
}

// Scan applies the selector query and scans the result into the given value.
func (wss *WeatherStationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wss.ctx, "Select")
	if err := wss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WeatherStationQuery, *WeatherStationSelect](ctx, wss.WeatherStationQuery, wss, wss.inters, v)
}

func (wss *WeatherStationSelect) sqlScan(ctx context.Context, root *WeatherStationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(wss.fns))
	for _, fn := range wss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*wss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (wss *WeatherStationSelect) Modify(modifiers ...func(s *sql.Selector)) *WeatherStationSelect {
	wss.modifiers = append(wss.modifiers, modifiers...)
	return wss
}
