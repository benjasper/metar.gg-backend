// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"metar.gg/ent/predicate"
	"metar.gg/ent/turbulencecondition"
)

// TurbulenceConditionDelete is the builder for deleting a TurbulenceCondition entity.
type TurbulenceConditionDelete struct {
	config
	hooks    []Hook
	mutation *TurbulenceConditionMutation
}

// Where appends a list predicates to the TurbulenceConditionDelete builder.
func (tcd *TurbulenceConditionDelete) Where(ps ...predicate.TurbulenceCondition) *TurbulenceConditionDelete {
	tcd.mutation.Where(ps...)
	return tcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tcd *TurbulenceConditionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, TurbulenceConditionMutation](ctx, tcd.sqlExec, tcd.mutation, tcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tcd *TurbulenceConditionDelete) ExecX(ctx context.Context) int {
	n, err := tcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tcd *TurbulenceConditionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(turbulencecondition.Table, sqlgraph.NewFieldSpec(turbulencecondition.FieldID, field.TypeUUID))
	if ps := tcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tcd.mutation.done = true
	return affected, err
}

// TurbulenceConditionDeleteOne is the builder for deleting a single TurbulenceCondition entity.
type TurbulenceConditionDeleteOne struct {
	tcd *TurbulenceConditionDelete
}

// Where appends a list predicates to the TurbulenceConditionDelete builder.
func (tcdo *TurbulenceConditionDeleteOne) Where(ps ...predicate.TurbulenceCondition) *TurbulenceConditionDeleteOne {
	tcdo.tcd.mutation.Where(ps...)
	return tcdo
}

// Exec executes the deletion query.
func (tcdo *TurbulenceConditionDeleteOne) Exec(ctx context.Context) error {
	n, err := tcdo.tcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{turbulencecondition.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tcdo *TurbulenceConditionDeleteOne) ExecX(ctx context.Context) {
	if err := tcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
