// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"metar.gg/ent/turbulencecondition"
)

// TurbulenceConditionCreate is the builder for creating a TurbulenceCondition entity.
type TurbulenceConditionCreate struct {
	config
	mutation *TurbulenceConditionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIntensity sets the "intensity" field.
func (tcc *TurbulenceConditionCreate) SetIntensity(s string) *TurbulenceConditionCreate {
	tcc.mutation.SetIntensity(s)
	return tcc
}

// SetMinAltitude sets the "min_altitude" field.
func (tcc *TurbulenceConditionCreate) SetMinAltitude(i int) *TurbulenceConditionCreate {
	tcc.mutation.SetMinAltitude(i)
	return tcc
}

// SetMaxAltitude sets the "max_altitude" field.
func (tcc *TurbulenceConditionCreate) SetMaxAltitude(i int) *TurbulenceConditionCreate {
	tcc.mutation.SetMaxAltitude(i)
	return tcc
}

// SetID sets the "id" field.
func (tcc *TurbulenceConditionCreate) SetID(u uuid.UUID) *TurbulenceConditionCreate {
	tcc.mutation.SetID(u)
	return tcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tcc *TurbulenceConditionCreate) SetNillableID(u *uuid.UUID) *TurbulenceConditionCreate {
	if u != nil {
		tcc.SetID(*u)
	}
	return tcc
}

// Mutation returns the TurbulenceConditionMutation object of the builder.
func (tcc *TurbulenceConditionCreate) Mutation() *TurbulenceConditionMutation {
	return tcc.mutation
}

// Save creates the TurbulenceCondition in the database.
func (tcc *TurbulenceConditionCreate) Save(ctx context.Context) (*TurbulenceCondition, error) {
	tcc.defaults()
	return withHooks[*TurbulenceCondition, TurbulenceConditionMutation](ctx, tcc.sqlSave, tcc.mutation, tcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TurbulenceConditionCreate) SaveX(ctx context.Context) *TurbulenceCondition {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *TurbulenceConditionCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *TurbulenceConditionCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcc *TurbulenceConditionCreate) defaults() {
	if _, ok := tcc.mutation.ID(); !ok {
		v := turbulencecondition.DefaultID()
		tcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TurbulenceConditionCreate) check() error {
	if _, ok := tcc.mutation.Intensity(); !ok {
		return &ValidationError{Name: "intensity", err: errors.New(`ent: missing required field "TurbulenceCondition.intensity"`)}
	}
	if _, ok := tcc.mutation.MinAltitude(); !ok {
		return &ValidationError{Name: "min_altitude", err: errors.New(`ent: missing required field "TurbulenceCondition.min_altitude"`)}
	}
	if _, ok := tcc.mutation.MaxAltitude(); !ok {
		return &ValidationError{Name: "max_altitude", err: errors.New(`ent: missing required field "TurbulenceCondition.max_altitude"`)}
	}
	return nil
}

func (tcc *TurbulenceConditionCreate) sqlSave(ctx context.Context) (*TurbulenceCondition, error) {
	if err := tcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tcc.mutation.id = &_node.ID
	tcc.mutation.done = true
	return _node, nil
}

func (tcc *TurbulenceConditionCreate) createSpec() (*TurbulenceCondition, *sqlgraph.CreateSpec) {
	var (
		_node = &TurbulenceCondition{config: tcc.config}
		_spec = sqlgraph.NewCreateSpec(turbulencecondition.Table, sqlgraph.NewFieldSpec(turbulencecondition.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = tcc.conflict
	if id, ok := tcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tcc.mutation.Intensity(); ok {
		_spec.SetField(turbulencecondition.FieldIntensity, field.TypeString, value)
		_node.Intensity = value
	}
	if value, ok := tcc.mutation.MinAltitude(); ok {
		_spec.SetField(turbulencecondition.FieldMinAltitude, field.TypeInt, value)
		_node.MinAltitude = value
	}
	if value, ok := tcc.mutation.MaxAltitude(); ok {
		_spec.SetField(turbulencecondition.FieldMaxAltitude, field.TypeInt, value)
		_node.MaxAltitude = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TurbulenceCondition.Create().
//		SetIntensity(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TurbulenceConditionUpsert) {
//			SetIntensity(v+v).
//		}).
//		Exec(ctx)
func (tcc *TurbulenceConditionCreate) OnConflict(opts ...sql.ConflictOption) *TurbulenceConditionUpsertOne {
	tcc.conflict = opts
	return &TurbulenceConditionUpsertOne{
		create: tcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TurbulenceCondition.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcc *TurbulenceConditionCreate) OnConflictColumns(columns ...string) *TurbulenceConditionUpsertOne {
	tcc.conflict = append(tcc.conflict, sql.ConflictColumns(columns...))
	return &TurbulenceConditionUpsertOne{
		create: tcc,
	}
}

type (
	// TurbulenceConditionUpsertOne is the builder for "upsert"-ing
	//  one TurbulenceCondition node.
	TurbulenceConditionUpsertOne struct {
		create *TurbulenceConditionCreate
	}

	// TurbulenceConditionUpsert is the "OnConflict" setter.
	TurbulenceConditionUpsert struct {
		*sql.UpdateSet
	}
)

// SetIntensity sets the "intensity" field.
func (u *TurbulenceConditionUpsert) SetIntensity(v string) *TurbulenceConditionUpsert {
	u.Set(turbulencecondition.FieldIntensity, v)
	return u
}

// UpdateIntensity sets the "intensity" field to the value that was provided on create.
func (u *TurbulenceConditionUpsert) UpdateIntensity() *TurbulenceConditionUpsert {
	u.SetExcluded(turbulencecondition.FieldIntensity)
	return u
}

// SetMinAltitude sets the "min_altitude" field.
func (u *TurbulenceConditionUpsert) SetMinAltitude(v int) *TurbulenceConditionUpsert {
	u.Set(turbulencecondition.FieldMinAltitude, v)
	return u
}

// UpdateMinAltitude sets the "min_altitude" field to the value that was provided on create.
func (u *TurbulenceConditionUpsert) UpdateMinAltitude() *TurbulenceConditionUpsert {
	u.SetExcluded(turbulencecondition.FieldMinAltitude)
	return u
}

// AddMinAltitude adds v to the "min_altitude" field.
func (u *TurbulenceConditionUpsert) AddMinAltitude(v int) *TurbulenceConditionUpsert {
	u.Add(turbulencecondition.FieldMinAltitude, v)
	return u
}

// SetMaxAltitude sets the "max_altitude" field.
func (u *TurbulenceConditionUpsert) SetMaxAltitude(v int) *TurbulenceConditionUpsert {
	u.Set(turbulencecondition.FieldMaxAltitude, v)
	return u
}

// UpdateMaxAltitude sets the "max_altitude" field to the value that was provided on create.
func (u *TurbulenceConditionUpsert) UpdateMaxAltitude() *TurbulenceConditionUpsert {
	u.SetExcluded(turbulencecondition.FieldMaxAltitude)
	return u
}

// AddMaxAltitude adds v to the "max_altitude" field.
func (u *TurbulenceConditionUpsert) AddMaxAltitude(v int) *TurbulenceConditionUpsert {
	u.Add(turbulencecondition.FieldMaxAltitude, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TurbulenceCondition.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(turbulencecondition.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TurbulenceConditionUpsertOne) UpdateNewValues() *TurbulenceConditionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(turbulencecondition.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TurbulenceCondition.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TurbulenceConditionUpsertOne) Ignore() *TurbulenceConditionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TurbulenceConditionUpsertOne) DoNothing() *TurbulenceConditionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TurbulenceConditionCreate.OnConflict
// documentation for more info.
func (u *TurbulenceConditionUpsertOne) Update(set func(*TurbulenceConditionUpsert)) *TurbulenceConditionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TurbulenceConditionUpsert{UpdateSet: update})
	}))
	return u
}

// SetIntensity sets the "intensity" field.
func (u *TurbulenceConditionUpsertOne) SetIntensity(v string) *TurbulenceConditionUpsertOne {
	return u.Update(func(s *TurbulenceConditionUpsert) {
		s.SetIntensity(v)
	})
}

// UpdateIntensity sets the "intensity" field to the value that was provided on create.
func (u *TurbulenceConditionUpsertOne) UpdateIntensity() *TurbulenceConditionUpsertOne {
	return u.Update(func(s *TurbulenceConditionUpsert) {
		s.UpdateIntensity()
	})
}

// SetMinAltitude sets the "min_altitude" field.
func (u *TurbulenceConditionUpsertOne) SetMinAltitude(v int) *TurbulenceConditionUpsertOne {
	return u.Update(func(s *TurbulenceConditionUpsert) {
		s.SetMinAltitude(v)
	})
}

// AddMinAltitude adds v to the "min_altitude" field.
func (u *TurbulenceConditionUpsertOne) AddMinAltitude(v int) *TurbulenceConditionUpsertOne {
	return u.Update(func(s *TurbulenceConditionUpsert) {
		s.AddMinAltitude(v)
	})
}

// UpdateMinAltitude sets the "min_altitude" field to the value that was provided on create.
func (u *TurbulenceConditionUpsertOne) UpdateMinAltitude() *TurbulenceConditionUpsertOne {
	return u.Update(func(s *TurbulenceConditionUpsert) {
		s.UpdateMinAltitude()
	})
}

// SetMaxAltitude sets the "max_altitude" field.
func (u *TurbulenceConditionUpsertOne) SetMaxAltitude(v int) *TurbulenceConditionUpsertOne {
	return u.Update(func(s *TurbulenceConditionUpsert) {
		s.SetMaxAltitude(v)
	})
}

// AddMaxAltitude adds v to the "max_altitude" field.
func (u *TurbulenceConditionUpsertOne) AddMaxAltitude(v int) *TurbulenceConditionUpsertOne {
	return u.Update(func(s *TurbulenceConditionUpsert) {
		s.AddMaxAltitude(v)
	})
}

// UpdateMaxAltitude sets the "max_altitude" field to the value that was provided on create.
func (u *TurbulenceConditionUpsertOne) UpdateMaxAltitude() *TurbulenceConditionUpsertOne {
	return u.Update(func(s *TurbulenceConditionUpsert) {
		s.UpdateMaxAltitude()
	})
}

// Exec executes the query.
func (u *TurbulenceConditionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TurbulenceConditionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TurbulenceConditionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TurbulenceConditionUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TurbulenceConditionUpsertOne.ID is not supported by MySQL driver. Use TurbulenceConditionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TurbulenceConditionUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TurbulenceConditionCreateBulk is the builder for creating many TurbulenceCondition entities in bulk.
type TurbulenceConditionCreateBulk struct {
	config
	builders []*TurbulenceConditionCreate
	conflict []sql.ConflictOption
}

// Save creates the TurbulenceCondition entities in the database.
func (tccb *TurbulenceConditionCreateBulk) Save(ctx context.Context) ([]*TurbulenceCondition, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TurbulenceCondition, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TurbulenceConditionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TurbulenceConditionCreateBulk) SaveX(ctx context.Context) []*TurbulenceCondition {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *TurbulenceConditionCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *TurbulenceConditionCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TurbulenceCondition.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TurbulenceConditionUpsert) {
//			SetIntensity(v+v).
//		}).
//		Exec(ctx)
func (tccb *TurbulenceConditionCreateBulk) OnConflict(opts ...sql.ConflictOption) *TurbulenceConditionUpsertBulk {
	tccb.conflict = opts
	return &TurbulenceConditionUpsertBulk{
		create: tccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TurbulenceCondition.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tccb *TurbulenceConditionCreateBulk) OnConflictColumns(columns ...string) *TurbulenceConditionUpsertBulk {
	tccb.conflict = append(tccb.conflict, sql.ConflictColumns(columns...))
	return &TurbulenceConditionUpsertBulk{
		create: tccb,
	}
}

// TurbulenceConditionUpsertBulk is the builder for "upsert"-ing
// a bulk of TurbulenceCondition nodes.
type TurbulenceConditionUpsertBulk struct {
	create *TurbulenceConditionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TurbulenceCondition.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(turbulencecondition.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TurbulenceConditionUpsertBulk) UpdateNewValues() *TurbulenceConditionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(turbulencecondition.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TurbulenceCondition.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TurbulenceConditionUpsertBulk) Ignore() *TurbulenceConditionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TurbulenceConditionUpsertBulk) DoNothing() *TurbulenceConditionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TurbulenceConditionCreateBulk.OnConflict
// documentation for more info.
func (u *TurbulenceConditionUpsertBulk) Update(set func(*TurbulenceConditionUpsert)) *TurbulenceConditionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TurbulenceConditionUpsert{UpdateSet: update})
	}))
	return u
}

// SetIntensity sets the "intensity" field.
func (u *TurbulenceConditionUpsertBulk) SetIntensity(v string) *TurbulenceConditionUpsertBulk {
	return u.Update(func(s *TurbulenceConditionUpsert) {
		s.SetIntensity(v)
	})
}

// UpdateIntensity sets the "intensity" field to the value that was provided on create.
func (u *TurbulenceConditionUpsertBulk) UpdateIntensity() *TurbulenceConditionUpsertBulk {
	return u.Update(func(s *TurbulenceConditionUpsert) {
		s.UpdateIntensity()
	})
}

// SetMinAltitude sets the "min_altitude" field.
func (u *TurbulenceConditionUpsertBulk) SetMinAltitude(v int) *TurbulenceConditionUpsertBulk {
	return u.Update(func(s *TurbulenceConditionUpsert) {
		s.SetMinAltitude(v)
	})
}

// AddMinAltitude adds v to the "min_altitude" field.
func (u *TurbulenceConditionUpsertBulk) AddMinAltitude(v int) *TurbulenceConditionUpsertBulk {
	return u.Update(func(s *TurbulenceConditionUpsert) {
		s.AddMinAltitude(v)
	})
}

// UpdateMinAltitude sets the "min_altitude" field to the value that was provided on create.
func (u *TurbulenceConditionUpsertBulk) UpdateMinAltitude() *TurbulenceConditionUpsertBulk {
	return u.Update(func(s *TurbulenceConditionUpsert) {
		s.UpdateMinAltitude()
	})
}

// SetMaxAltitude sets the "max_altitude" field.
func (u *TurbulenceConditionUpsertBulk) SetMaxAltitude(v int) *TurbulenceConditionUpsertBulk {
	return u.Update(func(s *TurbulenceConditionUpsert) {
		s.SetMaxAltitude(v)
	})
}

// AddMaxAltitude adds v to the "max_altitude" field.
func (u *TurbulenceConditionUpsertBulk) AddMaxAltitude(v int) *TurbulenceConditionUpsertBulk {
	return u.Update(func(s *TurbulenceConditionUpsert) {
		s.AddMaxAltitude(v)
	})
}

// UpdateMaxAltitude sets the "max_altitude" field to the value that was provided on create.
func (u *TurbulenceConditionUpsertBulk) UpdateMaxAltitude() *TurbulenceConditionUpsertBulk {
	return u.Update(func(s *TurbulenceConditionUpsert) {
		s.UpdateMaxAltitude()
	})
}

// Exec executes the query.
func (u *TurbulenceConditionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TurbulenceConditionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TurbulenceConditionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TurbulenceConditionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
