// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"metar.gg/ent/forecast"
	"metar.gg/ent/icingcondition"
	"metar.gg/ent/predicate"
	"metar.gg/ent/skycondition"
	"metar.gg/ent/temperaturedata"
	"metar.gg/ent/turbulencecondition"
)

// ForecastQuery is the builder for querying Forecast entities.
type ForecastQuery struct {
	config
	ctx                           *QueryContext
	order                         []forecast.OrderOption
	inters                        []Interceptor
	predicates                    []predicate.Forecast
	withSkyConditions             *SkyConditionQuery
	withTurbulenceConditions      *TurbulenceConditionQuery
	withIcingConditions           *IcingConditionQuery
	withTemperatureData           *TemperatureDataQuery
	withFKs                       bool
	loadTotal                     []func(context.Context, []*Forecast) error
	modifiers                     []func(*sql.Selector)
	withNamedSkyConditions        map[string]*SkyConditionQuery
	withNamedTurbulenceConditions map[string]*TurbulenceConditionQuery
	withNamedIcingConditions      map[string]*IcingConditionQuery
	withNamedTemperatureData      map[string]*TemperatureDataQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ForecastQuery builder.
func (fq *ForecastQuery) Where(ps ...predicate.Forecast) *ForecastQuery {
	fq.predicates = append(fq.predicates, ps...)
	return fq
}

// Limit the number of records to be returned by this query.
func (fq *ForecastQuery) Limit(limit int) *ForecastQuery {
	fq.ctx.Limit = &limit
	return fq
}

// Offset to start from.
func (fq *ForecastQuery) Offset(offset int) *ForecastQuery {
	fq.ctx.Offset = &offset
	return fq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fq *ForecastQuery) Unique(unique bool) *ForecastQuery {
	fq.ctx.Unique = &unique
	return fq
}

// Order specifies how the records should be ordered.
func (fq *ForecastQuery) Order(o ...forecast.OrderOption) *ForecastQuery {
	fq.order = append(fq.order, o...)
	return fq
}

// QuerySkyConditions chains the current query on the "sky_conditions" edge.
func (fq *ForecastQuery) QuerySkyConditions() *SkyConditionQuery {
	query := (&SkyConditionClient{config: fq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(forecast.Table, forecast.FieldID, selector),
			sqlgraph.To(skycondition.Table, skycondition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, forecast.SkyConditionsTable, forecast.SkyConditionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(fq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTurbulenceConditions chains the current query on the "turbulence_conditions" edge.
func (fq *ForecastQuery) QueryTurbulenceConditions() *TurbulenceConditionQuery {
	query := (&TurbulenceConditionClient{config: fq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(forecast.Table, forecast.FieldID, selector),
			sqlgraph.To(turbulencecondition.Table, turbulencecondition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, forecast.TurbulenceConditionsTable, forecast.TurbulenceConditionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(fq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIcingConditions chains the current query on the "icing_conditions" edge.
func (fq *ForecastQuery) QueryIcingConditions() *IcingConditionQuery {
	query := (&IcingConditionClient{config: fq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(forecast.Table, forecast.FieldID, selector),
			sqlgraph.To(icingcondition.Table, icingcondition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, forecast.IcingConditionsTable, forecast.IcingConditionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(fq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTemperatureData chains the current query on the "temperature_data" edge.
func (fq *ForecastQuery) QueryTemperatureData() *TemperatureDataQuery {
	query := (&TemperatureDataClient{config: fq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(forecast.Table, forecast.FieldID, selector),
			sqlgraph.To(temperaturedata.Table, temperaturedata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, forecast.TemperatureDataTable, forecast.TemperatureDataColumn),
		)
		fromU = sqlgraph.SetNeighbors(fq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Forecast entity from the query.
// Returns a *NotFoundError when no Forecast was found.
func (fq *ForecastQuery) First(ctx context.Context) (*Forecast, error) {
	nodes, err := fq.Limit(1).All(setContextOp(ctx, fq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{forecast.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fq *ForecastQuery) FirstX(ctx context.Context) *Forecast {
	node, err := fq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Forecast ID from the query.
// Returns a *NotFoundError when no Forecast ID was found.
func (fq *ForecastQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = fq.Limit(1).IDs(setContextOp(ctx, fq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{forecast.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fq *ForecastQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := fq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Forecast entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Forecast entity is found.
// Returns a *NotFoundError when no Forecast entities are found.
func (fq *ForecastQuery) Only(ctx context.Context) (*Forecast, error) {
	nodes, err := fq.Limit(2).All(setContextOp(ctx, fq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{forecast.Label}
	default:
		return nil, &NotSingularError{forecast.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fq *ForecastQuery) OnlyX(ctx context.Context) *Forecast {
	node, err := fq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Forecast ID in the query.
// Returns a *NotSingularError when more than one Forecast ID is found.
// Returns a *NotFoundError when no entities are found.
func (fq *ForecastQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = fq.Limit(2).IDs(setContextOp(ctx, fq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{forecast.Label}
	default:
		err = &NotSingularError{forecast.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fq *ForecastQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := fq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Forecasts.
func (fq *ForecastQuery) All(ctx context.Context) ([]*Forecast, error) {
	ctx = setContextOp(ctx, fq.ctx, "All")
	if err := fq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Forecast, *ForecastQuery]()
	return withInterceptors[[]*Forecast](ctx, fq, qr, fq.inters)
}

// AllX is like All, but panics if an error occurs.
func (fq *ForecastQuery) AllX(ctx context.Context) []*Forecast {
	nodes, err := fq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Forecast IDs.
func (fq *ForecastQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if fq.ctx.Unique == nil && fq.path != nil {
		fq.Unique(true)
	}
	ctx = setContextOp(ctx, fq.ctx, "IDs")
	if err = fq.Select(forecast.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fq *ForecastQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := fq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fq *ForecastQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, fq.ctx, "Count")
	if err := fq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, fq, querierCount[*ForecastQuery](), fq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (fq *ForecastQuery) CountX(ctx context.Context) int {
	count, err := fq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fq *ForecastQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, fq.ctx, "Exist")
	switch _, err := fq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (fq *ForecastQuery) ExistX(ctx context.Context) bool {
	exist, err := fq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ForecastQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fq *ForecastQuery) Clone() *ForecastQuery {
	if fq == nil {
		return nil
	}
	return &ForecastQuery{
		config:                   fq.config,
		ctx:                      fq.ctx.Clone(),
		order:                    append([]forecast.OrderOption{}, fq.order...),
		inters:                   append([]Interceptor{}, fq.inters...),
		predicates:               append([]predicate.Forecast{}, fq.predicates...),
		withSkyConditions:        fq.withSkyConditions.Clone(),
		withTurbulenceConditions: fq.withTurbulenceConditions.Clone(),
		withIcingConditions:      fq.withIcingConditions.Clone(),
		withTemperatureData:      fq.withTemperatureData.Clone(),
		// clone intermediate query.
		sql:  fq.sql.Clone(),
		path: fq.path,
	}
}

// WithSkyConditions tells the query-builder to eager-load the nodes that are connected to
// the "sky_conditions" edge. The optional arguments are used to configure the query builder of the edge.
func (fq *ForecastQuery) WithSkyConditions(opts ...func(*SkyConditionQuery)) *ForecastQuery {
	query := (&SkyConditionClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fq.withSkyConditions = query
	return fq
}

// WithTurbulenceConditions tells the query-builder to eager-load the nodes that are connected to
// the "turbulence_conditions" edge. The optional arguments are used to configure the query builder of the edge.
func (fq *ForecastQuery) WithTurbulenceConditions(opts ...func(*TurbulenceConditionQuery)) *ForecastQuery {
	query := (&TurbulenceConditionClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fq.withTurbulenceConditions = query
	return fq
}

// WithIcingConditions tells the query-builder to eager-load the nodes that are connected to
// the "icing_conditions" edge. The optional arguments are used to configure the query builder of the edge.
func (fq *ForecastQuery) WithIcingConditions(opts ...func(*IcingConditionQuery)) *ForecastQuery {
	query := (&IcingConditionClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fq.withIcingConditions = query
	return fq
}

// WithTemperatureData tells the query-builder to eager-load the nodes that are connected to
// the "temperature_data" edge. The optional arguments are used to configure the query builder of the edge.
func (fq *ForecastQuery) WithTemperatureData(opts ...func(*TemperatureDataQuery)) *ForecastQuery {
	query := (&TemperatureDataClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fq.withTemperatureData = query
	return fq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		FromTime time.Time `json:"from_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Forecast.Query().
//		GroupBy(forecast.FieldFromTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (fq *ForecastQuery) GroupBy(field string, fields ...string) *ForecastGroupBy {
	fq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ForecastGroupBy{build: fq}
	grbuild.flds = &fq.ctx.Fields
	grbuild.label = forecast.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		FromTime time.Time `json:"from_time,omitempty"`
//	}
//
//	client.Forecast.Query().
//		Select(forecast.FieldFromTime).
//		Scan(ctx, &v)
func (fq *ForecastQuery) Select(fields ...string) *ForecastSelect {
	fq.ctx.Fields = append(fq.ctx.Fields, fields...)
	sbuild := &ForecastSelect{ForecastQuery: fq}
	sbuild.label = forecast.Label
	sbuild.flds, sbuild.scan = &fq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ForecastSelect configured with the given aggregations.
func (fq *ForecastQuery) Aggregate(fns ...AggregateFunc) *ForecastSelect {
	return fq.Select().Aggregate(fns...)
}

func (fq *ForecastQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range fq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, fq); err != nil {
				return err
			}
		}
	}
	for _, f := range fq.ctx.Fields {
		if !forecast.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if fq.path != nil {
		prev, err := fq.path(ctx)
		if err != nil {
			return err
		}
		fq.sql = prev
	}
	return nil
}

func (fq *ForecastQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Forecast, error) {
	var (
		nodes       = []*Forecast{}
		withFKs     = fq.withFKs
		_spec       = fq.querySpec()
		loadedTypes = [4]bool{
			fq.withSkyConditions != nil,
			fq.withTurbulenceConditions != nil,
			fq.withIcingConditions != nil,
			fq.withTemperatureData != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, forecast.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Forecast).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Forecast{config: fq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(fq.modifiers) > 0 {
		_spec.Modifiers = fq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, fq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := fq.withSkyConditions; query != nil {
		if err := fq.loadSkyConditions(ctx, query, nodes,
			func(n *Forecast) { n.Edges.SkyConditions = []*SkyCondition{} },
			func(n *Forecast, e *SkyCondition) { n.Edges.SkyConditions = append(n.Edges.SkyConditions, e) }); err != nil {
			return nil, err
		}
	}
	if query := fq.withTurbulenceConditions; query != nil {
		if err := fq.loadTurbulenceConditions(ctx, query, nodes,
			func(n *Forecast) { n.Edges.TurbulenceConditions = []*TurbulenceCondition{} },
			func(n *Forecast, e *TurbulenceCondition) {
				n.Edges.TurbulenceConditions = append(n.Edges.TurbulenceConditions, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := fq.withIcingConditions; query != nil {
		if err := fq.loadIcingConditions(ctx, query, nodes,
			func(n *Forecast) { n.Edges.IcingConditions = []*IcingCondition{} },
			func(n *Forecast, e *IcingCondition) { n.Edges.IcingConditions = append(n.Edges.IcingConditions, e) }); err != nil {
			return nil, err
		}
	}
	if query := fq.withTemperatureData; query != nil {
		if err := fq.loadTemperatureData(ctx, query, nodes,
			func(n *Forecast) { n.Edges.TemperatureData = []*TemperatureData{} },
			func(n *Forecast, e *TemperatureData) { n.Edges.TemperatureData = append(n.Edges.TemperatureData, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range fq.withNamedSkyConditions {
		if err := fq.loadSkyConditions(ctx, query, nodes,
			func(n *Forecast) { n.appendNamedSkyConditions(name) },
			func(n *Forecast, e *SkyCondition) { n.appendNamedSkyConditions(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range fq.withNamedTurbulenceConditions {
		if err := fq.loadTurbulenceConditions(ctx, query, nodes,
			func(n *Forecast) { n.appendNamedTurbulenceConditions(name) },
			func(n *Forecast, e *TurbulenceCondition) { n.appendNamedTurbulenceConditions(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range fq.withNamedIcingConditions {
		if err := fq.loadIcingConditions(ctx, query, nodes,
			func(n *Forecast) { n.appendNamedIcingConditions(name) },
			func(n *Forecast, e *IcingCondition) { n.appendNamedIcingConditions(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range fq.withNamedTemperatureData {
		if err := fq.loadTemperatureData(ctx, query, nodes,
			func(n *Forecast) { n.appendNamedTemperatureData(name) },
			func(n *Forecast, e *TemperatureData) { n.appendNamedTemperatureData(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range fq.loadTotal {
		if err := fq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (fq *ForecastQuery) loadSkyConditions(ctx context.Context, query *SkyConditionQuery, nodes []*Forecast, init func(*Forecast), assign func(*Forecast, *SkyCondition)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Forecast)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.SkyCondition(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(forecast.SkyConditionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.forecast_sky_conditions
		if fk == nil {
			return fmt.Errorf(`foreign-key "forecast_sky_conditions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "forecast_sky_conditions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (fq *ForecastQuery) loadTurbulenceConditions(ctx context.Context, query *TurbulenceConditionQuery, nodes []*Forecast, init func(*Forecast), assign func(*Forecast, *TurbulenceCondition)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Forecast)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.TurbulenceCondition(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(forecast.TurbulenceConditionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.forecast_turbulence_conditions
		if fk == nil {
			return fmt.Errorf(`foreign-key "forecast_turbulence_conditions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "forecast_turbulence_conditions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (fq *ForecastQuery) loadIcingConditions(ctx context.Context, query *IcingConditionQuery, nodes []*Forecast, init func(*Forecast), assign func(*Forecast, *IcingCondition)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Forecast)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.IcingCondition(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(forecast.IcingConditionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.forecast_icing_conditions
		if fk == nil {
			return fmt.Errorf(`foreign-key "forecast_icing_conditions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "forecast_icing_conditions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (fq *ForecastQuery) loadTemperatureData(ctx context.Context, query *TemperatureDataQuery, nodes []*Forecast, init func(*Forecast), assign func(*Forecast, *TemperatureData)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Forecast)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.TemperatureData(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(forecast.TemperatureDataColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.forecast_temperature_data
		if fk == nil {
			return fmt.Errorf(`foreign-key "forecast_temperature_data" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "forecast_temperature_data" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (fq *ForecastQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fq.querySpec()
	if len(fq.modifiers) > 0 {
		_spec.Modifiers = fq.modifiers
	}
	_spec.Node.Columns = fq.ctx.Fields
	if len(fq.ctx.Fields) > 0 {
		_spec.Unique = fq.ctx.Unique != nil && *fq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, fq.driver, _spec)
}

func (fq *ForecastQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(forecast.Table, forecast.Columns, sqlgraph.NewFieldSpec(forecast.FieldID, field.TypeUUID))
	_spec.From = fq.sql
	if unique := fq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if fq.path != nil {
		_spec.Unique = true
	}
	if fields := fq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, forecast.FieldID)
		for i := range fields {
			if fields[i] != forecast.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := fq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fq *ForecastQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fq.driver.Dialect())
	t1 := builder.Table(forecast.Table)
	columns := fq.ctx.Fields
	if len(columns) == 0 {
		columns = forecast.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fq.sql != nil {
		selector = fq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if fq.ctx.Unique != nil && *fq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range fq.modifiers {
		m(selector)
	}
	for _, p := range fq.predicates {
		p(selector)
	}
	for _, p := range fq.order {
		p(selector)
	}
	if offset := fq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (fq *ForecastQuery) Modify(modifiers ...func(s *sql.Selector)) *ForecastSelect {
	fq.modifiers = append(fq.modifiers, modifiers...)
	return fq.Select()
}

// WithNamedSkyConditions tells the query-builder to eager-load the nodes that are connected to the "sky_conditions"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (fq *ForecastQuery) WithNamedSkyConditions(name string, opts ...func(*SkyConditionQuery)) *ForecastQuery {
	query := (&SkyConditionClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if fq.withNamedSkyConditions == nil {
		fq.withNamedSkyConditions = make(map[string]*SkyConditionQuery)
	}
	fq.withNamedSkyConditions[name] = query
	return fq
}

// WithNamedTurbulenceConditions tells the query-builder to eager-load the nodes that are connected to the "turbulence_conditions"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (fq *ForecastQuery) WithNamedTurbulenceConditions(name string, opts ...func(*TurbulenceConditionQuery)) *ForecastQuery {
	query := (&TurbulenceConditionClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if fq.withNamedTurbulenceConditions == nil {
		fq.withNamedTurbulenceConditions = make(map[string]*TurbulenceConditionQuery)
	}
	fq.withNamedTurbulenceConditions[name] = query
	return fq
}

// WithNamedIcingConditions tells the query-builder to eager-load the nodes that are connected to the "icing_conditions"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (fq *ForecastQuery) WithNamedIcingConditions(name string, opts ...func(*IcingConditionQuery)) *ForecastQuery {
	query := (&IcingConditionClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if fq.withNamedIcingConditions == nil {
		fq.withNamedIcingConditions = make(map[string]*IcingConditionQuery)
	}
	fq.withNamedIcingConditions[name] = query
	return fq
}

// WithNamedTemperatureData tells the query-builder to eager-load the nodes that are connected to the "temperature_data"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (fq *ForecastQuery) WithNamedTemperatureData(name string, opts ...func(*TemperatureDataQuery)) *ForecastQuery {
	query := (&TemperatureDataClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if fq.withNamedTemperatureData == nil {
		fq.withNamedTemperatureData = make(map[string]*TemperatureDataQuery)
	}
	fq.withNamedTemperatureData[name] = query
	return fq
}

// ForecastGroupBy is the group-by builder for Forecast entities.
type ForecastGroupBy struct {
	selector
	build *ForecastQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fgb *ForecastGroupBy) Aggregate(fns ...AggregateFunc) *ForecastGroupBy {
	fgb.fns = append(fgb.fns, fns...)
	return fgb
}

// Scan applies the selector query and scans the result into the given value.
func (fgb *ForecastGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fgb.build.ctx, "GroupBy")
	if err := fgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ForecastQuery, *ForecastGroupBy](ctx, fgb.build, fgb, fgb.build.inters, v)
}

func (fgb *ForecastGroupBy) sqlScan(ctx context.Context, root *ForecastQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(fgb.fns))
	for _, fn := range fgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*fgb.flds)+len(fgb.fns))
		for _, f := range *fgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*fgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ForecastSelect is the builder for selecting fields of Forecast entities.
type ForecastSelect struct {
	*ForecastQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fs *ForecastSelect) Aggregate(fns ...AggregateFunc) *ForecastSelect {
	fs.fns = append(fs.fns, fns...)
	return fs
}

// Scan applies the selector query and scans the result into the given value.
func (fs *ForecastSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fs.ctx, "Select")
	if err := fs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ForecastQuery, *ForecastSelect](ctx, fs.ForecastQuery, fs, fs.inters, v)
}

func (fs *ForecastSelect) sqlScan(ctx context.Context, root *ForecastQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fs.fns))
	for _, fn := range fs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (fs *ForecastSelect) Modify(modifiers ...func(s *sql.Selector)) *ForecastSelect {
	fs.modifiers = append(fs.modifiers, modifiers...)
	return fs
}
