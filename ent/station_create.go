// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"metar.gg/ent/airport"
	"metar.gg/ent/metar"
	"metar.gg/ent/station"
	"metar.gg/ent/taf"
)

// StationCreate is the builder for creating a Station entity.
type StationCreate struct {
	config
	mutation *StationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetStationID sets the "station_id" field.
func (sc *StationCreate) SetStationID(s string) *StationCreate {
	sc.mutation.SetStationID(s)
	return sc
}

// SetLatitude sets the "latitude" field.
func (sc *StationCreate) SetLatitude(f float64) *StationCreate {
	sc.mutation.SetLatitude(f)
	return sc
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (sc *StationCreate) SetNillableLatitude(f *float64) *StationCreate {
	if f != nil {
		sc.SetLatitude(*f)
	}
	return sc
}

// SetLongitude sets the "longitude" field.
func (sc *StationCreate) SetLongitude(f float64) *StationCreate {
	sc.mutation.SetLongitude(f)
	return sc
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (sc *StationCreate) SetNillableLongitude(f *float64) *StationCreate {
	if f != nil {
		sc.SetLongitude(*f)
	}
	return sc
}

// SetElevation sets the "elevation" field.
func (sc *StationCreate) SetElevation(f float64) *StationCreate {
	sc.mutation.SetElevation(f)
	return sc
}

// SetNillableElevation sets the "elevation" field if the given value is not nil.
func (sc *StationCreate) SetNillableElevation(f *float64) *StationCreate {
	if f != nil {
		sc.SetElevation(*f)
	}
	return sc
}

// SetHash sets the "hash" field.
func (sc *StationCreate) SetHash(s string) *StationCreate {
	sc.mutation.SetHash(s)
	return sc
}

// SetID sets the "id" field.
func (sc *StationCreate) SetID(i int) *StationCreate {
	sc.mutation.SetID(i)
	return sc
}

// SetAirportID sets the "airport" edge to the Airport entity by ID.
func (sc *StationCreate) SetAirportID(id int) *StationCreate {
	sc.mutation.SetAirportID(id)
	return sc
}

// SetNillableAirportID sets the "airport" edge to the Airport entity by ID if the given value is not nil.
func (sc *StationCreate) SetNillableAirportID(id *int) *StationCreate {
	if id != nil {
		sc = sc.SetAirportID(*id)
	}
	return sc
}

// SetAirport sets the "airport" edge to the Airport entity.
func (sc *StationCreate) SetAirport(a *Airport) *StationCreate {
	return sc.SetAirportID(a.ID)
}

// AddMetarIDs adds the "metars" edge to the Metar entity by IDs.
func (sc *StationCreate) AddMetarIDs(ids ...int) *StationCreate {
	sc.mutation.AddMetarIDs(ids...)
	return sc
}

// AddMetars adds the "metars" edges to the Metar entity.
func (sc *StationCreate) AddMetars(m ...*Metar) *StationCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return sc.AddMetarIDs(ids...)
}

// AddTafIDs adds the "tafs" edge to the Taf entity by IDs.
func (sc *StationCreate) AddTafIDs(ids ...int) *StationCreate {
	sc.mutation.AddTafIDs(ids...)
	return sc
}

// AddTafs adds the "tafs" edges to the Taf entity.
func (sc *StationCreate) AddTafs(t ...*Taf) *StationCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return sc.AddTafIDs(ids...)
}

// Mutation returns the StationMutation object of the builder.
func (sc *StationCreate) Mutation() *StationMutation {
	return sc.mutation
}

// Save creates the Station in the database.
func (sc *StationCreate) Save(ctx context.Context) (*Station, error) {
	var (
		err  error
		node *Station
	)
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Station)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from StationMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StationCreate) SaveX(ctx context.Context) *Station {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StationCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StationCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StationCreate) check() error {
	if _, ok := sc.mutation.StationID(); !ok {
		return &ValidationError{Name: "station_id", err: errors.New(`ent: missing required field "Station.station_id"`)}
	}
	if _, ok := sc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "Station.hash"`)}
	}
	return nil
}

func (sc *StationCreate) sqlSave(ctx context.Context) (*Station, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (sc *StationCreate) createSpec() (*Station, *sqlgraph.CreateSpec) {
	var (
		_node = &Station{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: station.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: station.FieldID,
			},
		}
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.StationID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldStationID,
		})
		_node.StationID = value
	}
	if value, ok := sc.mutation.Latitude(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: station.FieldLatitude,
		})
		_node.Latitude = &value
	}
	if value, ok := sc.mutation.Longitude(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: station.FieldLongitude,
		})
		_node.Longitude = &value
	}
	if value, ok := sc.mutation.Elevation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: station.FieldElevation,
		})
		_node.Elevation = &value
	}
	if value, ok := sc.mutation.Hash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldHash,
		})
		_node.Hash = value
	}
	if nodes := sc.mutation.AirportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   station.AirportTable,
			Columns: []string{station.AirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: airport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.airport_station = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.MetarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.MetarsTable,
			Columns: []string{station.MetarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metar.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.TafsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.TafsTable,
			Columns: []string{station.TafsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: taf.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Station.Create().
//		SetStationID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StationUpsert) {
//			SetStationID(v+v).
//		}).
//		Exec(ctx)
func (sc *StationCreate) OnConflict(opts ...sql.ConflictOption) *StationUpsertOne {
	sc.conflict = opts
	return &StationUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Station.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *StationCreate) OnConflictColumns(columns ...string) *StationUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &StationUpsertOne{
		create: sc,
	}
}

type (
	// StationUpsertOne is the builder for "upsert"-ing
	//  one Station node.
	StationUpsertOne struct {
		create *StationCreate
	}

	// StationUpsert is the "OnConflict" setter.
	StationUpsert struct {
		*sql.UpdateSet
	}
)

// SetLatitude sets the "latitude" field.
func (u *StationUpsert) SetLatitude(v float64) *StationUpsert {
	u.Set(station.FieldLatitude, v)
	return u
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *StationUpsert) UpdateLatitude() *StationUpsert {
	u.SetExcluded(station.FieldLatitude)
	return u
}

// AddLatitude adds v to the "latitude" field.
func (u *StationUpsert) AddLatitude(v float64) *StationUpsert {
	u.Add(station.FieldLatitude, v)
	return u
}

// ClearLatitude clears the value of the "latitude" field.
func (u *StationUpsert) ClearLatitude() *StationUpsert {
	u.SetNull(station.FieldLatitude)
	return u
}

// SetLongitude sets the "longitude" field.
func (u *StationUpsert) SetLongitude(v float64) *StationUpsert {
	u.Set(station.FieldLongitude, v)
	return u
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *StationUpsert) UpdateLongitude() *StationUpsert {
	u.SetExcluded(station.FieldLongitude)
	return u
}

// AddLongitude adds v to the "longitude" field.
func (u *StationUpsert) AddLongitude(v float64) *StationUpsert {
	u.Add(station.FieldLongitude, v)
	return u
}

// ClearLongitude clears the value of the "longitude" field.
func (u *StationUpsert) ClearLongitude() *StationUpsert {
	u.SetNull(station.FieldLongitude)
	return u
}

// SetElevation sets the "elevation" field.
func (u *StationUpsert) SetElevation(v float64) *StationUpsert {
	u.Set(station.FieldElevation, v)
	return u
}

// UpdateElevation sets the "elevation" field to the value that was provided on create.
func (u *StationUpsert) UpdateElevation() *StationUpsert {
	u.SetExcluded(station.FieldElevation)
	return u
}

// AddElevation adds v to the "elevation" field.
func (u *StationUpsert) AddElevation(v float64) *StationUpsert {
	u.Add(station.FieldElevation, v)
	return u
}

// ClearElevation clears the value of the "elevation" field.
func (u *StationUpsert) ClearElevation() *StationUpsert {
	u.SetNull(station.FieldElevation)
	return u
}

// SetHash sets the "hash" field.
func (u *StationUpsert) SetHash(v string) *StationUpsert {
	u.Set(station.FieldHash, v)
	return u
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *StationUpsert) UpdateHash() *StationUpsert {
	u.SetExcluded(station.FieldHash)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Station.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(station.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *StationUpsertOne) UpdateNewValues() *StationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(station.FieldID)
		}
		if _, exists := u.create.mutation.StationID(); exists {
			s.SetIgnore(station.FieldStationID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Station.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *StationUpsertOne) Ignore() *StationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StationUpsertOne) DoNothing() *StationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StationCreate.OnConflict
// documentation for more info.
func (u *StationUpsertOne) Update(set func(*StationUpsert)) *StationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StationUpsert{UpdateSet: update})
	}))
	return u
}

// SetLatitude sets the "latitude" field.
func (u *StationUpsertOne) SetLatitude(v float64) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *StationUpsertOne) AddLatitude(v float64) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *StationUpsertOne) UpdateLatitude() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.UpdateLatitude()
	})
}

// ClearLatitude clears the value of the "latitude" field.
func (u *StationUpsertOne) ClearLatitude() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.ClearLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *StationUpsertOne) SetLongitude(v float64) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *StationUpsertOne) AddLongitude(v float64) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *StationUpsertOne) UpdateLongitude() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.UpdateLongitude()
	})
}

// ClearLongitude clears the value of the "longitude" field.
func (u *StationUpsertOne) ClearLongitude() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.ClearLongitude()
	})
}

// SetElevation sets the "elevation" field.
func (u *StationUpsertOne) SetElevation(v float64) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.SetElevation(v)
	})
}

// AddElevation adds v to the "elevation" field.
func (u *StationUpsertOne) AddElevation(v float64) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.AddElevation(v)
	})
}

// UpdateElevation sets the "elevation" field to the value that was provided on create.
func (u *StationUpsertOne) UpdateElevation() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.UpdateElevation()
	})
}

// ClearElevation clears the value of the "elevation" field.
func (u *StationUpsertOne) ClearElevation() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.ClearElevation()
	})
}

// SetHash sets the "hash" field.
func (u *StationUpsertOne) SetHash(v string) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *StationUpsertOne) UpdateHash() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.UpdateHash()
	})
}

// Exec executes the query.
func (u *StationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *StationUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *StationUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// StationCreateBulk is the builder for creating many Station entities in bulk.
type StationCreateBulk struct {
	config
	builders []*StationCreate
	conflict []sql.ConflictOption
}

// Save creates the Station entities in the database.
func (scb *StationCreateBulk) Save(ctx context.Context) ([]*Station, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Station, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StationCreateBulk) SaveX(ctx context.Context) []*Station {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StationCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StationCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Station.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StationUpsert) {
//			SetStationID(v+v).
//		}).
//		Exec(ctx)
func (scb *StationCreateBulk) OnConflict(opts ...sql.ConflictOption) *StationUpsertBulk {
	scb.conflict = opts
	return &StationUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Station.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *StationCreateBulk) OnConflictColumns(columns ...string) *StationUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &StationUpsertBulk{
		create: scb,
	}
}

// StationUpsertBulk is the builder for "upsert"-ing
// a bulk of Station nodes.
type StationUpsertBulk struct {
	create *StationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Station.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(station.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *StationUpsertBulk) UpdateNewValues() *StationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(station.FieldID)
			}
			if _, exists := b.mutation.StationID(); exists {
				s.SetIgnore(station.FieldStationID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Station.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *StationUpsertBulk) Ignore() *StationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StationUpsertBulk) DoNothing() *StationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StationCreateBulk.OnConflict
// documentation for more info.
func (u *StationUpsertBulk) Update(set func(*StationUpsert)) *StationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StationUpsert{UpdateSet: update})
	}))
	return u
}

// SetLatitude sets the "latitude" field.
func (u *StationUpsertBulk) SetLatitude(v float64) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *StationUpsertBulk) AddLatitude(v float64) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *StationUpsertBulk) UpdateLatitude() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.UpdateLatitude()
	})
}

// ClearLatitude clears the value of the "latitude" field.
func (u *StationUpsertBulk) ClearLatitude() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.ClearLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *StationUpsertBulk) SetLongitude(v float64) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *StationUpsertBulk) AddLongitude(v float64) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *StationUpsertBulk) UpdateLongitude() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.UpdateLongitude()
	})
}

// ClearLongitude clears the value of the "longitude" field.
func (u *StationUpsertBulk) ClearLongitude() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.ClearLongitude()
	})
}

// SetElevation sets the "elevation" field.
func (u *StationUpsertBulk) SetElevation(v float64) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.SetElevation(v)
	})
}

// AddElevation adds v to the "elevation" field.
func (u *StationUpsertBulk) AddElevation(v float64) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.AddElevation(v)
	})
}

// UpdateElevation sets the "elevation" field to the value that was provided on create.
func (u *StationUpsertBulk) UpdateElevation() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.UpdateElevation()
	})
}

// ClearElevation clears the value of the "elevation" field.
func (u *StationUpsertBulk) ClearElevation() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.ClearElevation()
	})
}

// SetHash sets the "hash" field.
func (u *StationUpsertBulk) SetHash(v string) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *StationUpsertBulk) UpdateHash() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.UpdateHash()
	})
}

// Exec executes the query.
func (u *StationUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the StationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
