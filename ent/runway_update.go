// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"metar.gg/ent/airport"
	"metar.gg/ent/predicate"
	"metar.gg/ent/runway"
)

// RunwayUpdate is the builder for updating Runway entities.
type RunwayUpdate struct {
	config
	hooks    []Hook
	mutation *RunwayMutation
}

// Where appends a list predicates to the RunwayUpdate builder.
func (ru *RunwayUpdate) Where(ps ...predicate.Runway) *RunwayUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetHash sets the "hash" field.
func (ru *RunwayUpdate) SetHash(u uint64) *RunwayUpdate {
	ru.mutation.ResetHash()
	ru.mutation.SetHash(u)
	return ru
}

// AddHash adds u to the "hash" field.
func (ru *RunwayUpdate) AddHash(u int64) *RunwayUpdate {
	ru.mutation.AddHash(u)
	return ru
}

// SetImportFlag sets the "import_flag" field.
func (ru *RunwayUpdate) SetImportFlag(b bool) *RunwayUpdate {
	ru.mutation.SetImportFlag(b)
	return ru
}

// SetNillableImportFlag sets the "import_flag" field if the given value is not nil.
func (ru *RunwayUpdate) SetNillableImportFlag(b *bool) *RunwayUpdate {
	if b != nil {
		ru.SetImportFlag(*b)
	}
	return ru
}

// SetUpdateTime sets the "update_time" field.
func (ru *RunwayUpdate) SetUpdateTime(t time.Time) *RunwayUpdate {
	ru.mutation.SetUpdateTime(t)
	return ru
}

// SetAirportIdentifier sets the "airport_identifier" field.
func (ru *RunwayUpdate) SetAirportIdentifier(s string) *RunwayUpdate {
	ru.mutation.SetAirportIdentifier(s)
	return ru
}

// SetLength sets the "length" field.
func (ru *RunwayUpdate) SetLength(i int) *RunwayUpdate {
	ru.mutation.ResetLength()
	ru.mutation.SetLength(i)
	return ru
}

// AddLength adds i to the "length" field.
func (ru *RunwayUpdate) AddLength(i int) *RunwayUpdate {
	ru.mutation.AddLength(i)
	return ru
}

// SetWidth sets the "width" field.
func (ru *RunwayUpdate) SetWidth(i int) *RunwayUpdate {
	ru.mutation.ResetWidth()
	ru.mutation.SetWidth(i)
	return ru
}

// AddWidth adds i to the "width" field.
func (ru *RunwayUpdate) AddWidth(i int) *RunwayUpdate {
	ru.mutation.AddWidth(i)
	return ru
}

// SetSurface sets the "surface" field.
func (ru *RunwayUpdate) SetSurface(s string) *RunwayUpdate {
	ru.mutation.SetSurface(s)
	return ru
}

// SetLighted sets the "lighted" field.
func (ru *RunwayUpdate) SetLighted(b bool) *RunwayUpdate {
	ru.mutation.SetLighted(b)
	return ru
}

// SetClosed sets the "closed" field.
func (ru *RunwayUpdate) SetClosed(b bool) *RunwayUpdate {
	ru.mutation.SetClosed(b)
	return ru
}

// SetLowNumberedRunwayEndIdentifier sets the "low_numbered_runway_end_identifier" field.
func (ru *RunwayUpdate) SetLowNumberedRunwayEndIdentifier(s string) *RunwayUpdate {
	ru.mutation.SetLowNumberedRunwayEndIdentifier(s)
	return ru
}

// SetLowNumberedRunwayEndLatitude sets the "low_numbered_runway_end_latitude" field.
func (ru *RunwayUpdate) SetLowNumberedRunwayEndLatitude(f float64) *RunwayUpdate {
	ru.mutation.ResetLowNumberedRunwayEndLatitude()
	ru.mutation.SetLowNumberedRunwayEndLatitude(f)
	return ru
}

// AddLowNumberedRunwayEndLatitude adds f to the "low_numbered_runway_end_latitude" field.
func (ru *RunwayUpdate) AddLowNumberedRunwayEndLatitude(f float64) *RunwayUpdate {
	ru.mutation.AddLowNumberedRunwayEndLatitude(f)
	return ru
}

// SetLowNumberedRunwayEndLongitude sets the "low_numbered_runway_end_longitude" field.
func (ru *RunwayUpdate) SetLowNumberedRunwayEndLongitude(f float64) *RunwayUpdate {
	ru.mutation.ResetLowNumberedRunwayEndLongitude()
	ru.mutation.SetLowNumberedRunwayEndLongitude(f)
	return ru
}

// AddLowNumberedRunwayEndLongitude adds f to the "low_numbered_runway_end_longitude" field.
func (ru *RunwayUpdate) AddLowNumberedRunwayEndLongitude(f float64) *RunwayUpdate {
	ru.mutation.AddLowNumberedRunwayEndLongitude(f)
	return ru
}

// SetLowNumberedRunwayEndElevation sets the "low_numbered_runway_end_elevation" field.
func (ru *RunwayUpdate) SetLowNumberedRunwayEndElevation(i int) *RunwayUpdate {
	ru.mutation.ResetLowNumberedRunwayEndElevation()
	ru.mutation.SetLowNumberedRunwayEndElevation(i)
	return ru
}

// AddLowNumberedRunwayEndElevation adds i to the "low_numbered_runway_end_elevation" field.
func (ru *RunwayUpdate) AddLowNumberedRunwayEndElevation(i int) *RunwayUpdate {
	ru.mutation.AddLowNumberedRunwayEndElevation(i)
	return ru
}

// SetLowNumberedRunwayEndHeading sets the "low_numbered_runway_end_heading" field.
func (ru *RunwayUpdate) SetLowNumberedRunwayEndHeading(i int) *RunwayUpdate {
	ru.mutation.ResetLowNumberedRunwayEndHeading()
	ru.mutation.SetLowNumberedRunwayEndHeading(i)
	return ru
}

// AddLowNumberedRunwayEndHeading adds i to the "low_numbered_runway_end_heading" field.
func (ru *RunwayUpdate) AddLowNumberedRunwayEndHeading(i int) *RunwayUpdate {
	ru.mutation.AddLowNumberedRunwayEndHeading(i)
	return ru
}

// SetLowNumberedRunwayEndDisplaced sets the "low_numbered_runway_end_displaced" field.
func (ru *RunwayUpdate) SetLowNumberedRunwayEndDisplaced(i int) *RunwayUpdate {
	ru.mutation.ResetLowNumberedRunwayEndDisplaced()
	ru.mutation.SetLowNumberedRunwayEndDisplaced(i)
	return ru
}

// AddLowNumberedRunwayEndDisplaced adds i to the "low_numbered_runway_end_displaced" field.
func (ru *RunwayUpdate) AddLowNumberedRunwayEndDisplaced(i int) *RunwayUpdate {
	ru.mutation.AddLowNumberedRunwayEndDisplaced(i)
	return ru
}

// SetHighNumberedRunwayEndIdentifier sets the "high_numbered_runway_end_identifier" field.
func (ru *RunwayUpdate) SetHighNumberedRunwayEndIdentifier(s string) *RunwayUpdate {
	ru.mutation.SetHighNumberedRunwayEndIdentifier(s)
	return ru
}

// SetHighNumberedRunwayEndLatitude sets the "high_numbered_runway_end_latitude" field.
func (ru *RunwayUpdate) SetHighNumberedRunwayEndLatitude(f float64) *RunwayUpdate {
	ru.mutation.ResetHighNumberedRunwayEndLatitude()
	ru.mutation.SetHighNumberedRunwayEndLatitude(f)
	return ru
}

// AddHighNumberedRunwayEndLatitude adds f to the "high_numbered_runway_end_latitude" field.
func (ru *RunwayUpdate) AddHighNumberedRunwayEndLatitude(f float64) *RunwayUpdate {
	ru.mutation.AddHighNumberedRunwayEndLatitude(f)
	return ru
}

// SetHighNumberedRunwayEndLongitude sets the "high_numbered_runway_end_longitude" field.
func (ru *RunwayUpdate) SetHighNumberedRunwayEndLongitude(f float64) *RunwayUpdate {
	ru.mutation.ResetHighNumberedRunwayEndLongitude()
	ru.mutation.SetHighNumberedRunwayEndLongitude(f)
	return ru
}

// AddHighNumberedRunwayEndLongitude adds f to the "high_numbered_runway_end_longitude" field.
func (ru *RunwayUpdate) AddHighNumberedRunwayEndLongitude(f float64) *RunwayUpdate {
	ru.mutation.AddHighNumberedRunwayEndLongitude(f)
	return ru
}

// SetHighNumberedRunwayEndElevation sets the "high_numbered_runway_end_elevation" field.
func (ru *RunwayUpdate) SetHighNumberedRunwayEndElevation(i int) *RunwayUpdate {
	ru.mutation.ResetHighNumberedRunwayEndElevation()
	ru.mutation.SetHighNumberedRunwayEndElevation(i)
	return ru
}

// AddHighNumberedRunwayEndElevation adds i to the "high_numbered_runway_end_elevation" field.
func (ru *RunwayUpdate) AddHighNumberedRunwayEndElevation(i int) *RunwayUpdate {
	ru.mutation.AddHighNumberedRunwayEndElevation(i)
	return ru
}

// SetHighNumberedRunwayEndHeading sets the "high_numbered_runway_end_heading" field.
func (ru *RunwayUpdate) SetHighNumberedRunwayEndHeading(i int) *RunwayUpdate {
	ru.mutation.ResetHighNumberedRunwayEndHeading()
	ru.mutation.SetHighNumberedRunwayEndHeading(i)
	return ru
}

// AddHighNumberedRunwayEndHeading adds i to the "high_numbered_runway_end_heading" field.
func (ru *RunwayUpdate) AddHighNumberedRunwayEndHeading(i int) *RunwayUpdate {
	ru.mutation.AddHighNumberedRunwayEndHeading(i)
	return ru
}

// SetHighNumberedRunwayEndDisplaced sets the "high_numbered_runway_end_displaced" field.
func (ru *RunwayUpdate) SetHighNumberedRunwayEndDisplaced(i int) *RunwayUpdate {
	ru.mutation.ResetHighNumberedRunwayEndDisplaced()
	ru.mutation.SetHighNumberedRunwayEndDisplaced(i)
	return ru
}

// AddHighNumberedRunwayEndDisplaced adds i to the "high_numbered_runway_end_displaced" field.
func (ru *RunwayUpdate) AddHighNumberedRunwayEndDisplaced(i int) *RunwayUpdate {
	ru.mutation.AddHighNumberedRunwayEndDisplaced(i)
	return ru
}

// SetAirportID sets the "airport" edge to the Airport entity by ID.
func (ru *RunwayUpdate) SetAirportID(id int) *RunwayUpdate {
	ru.mutation.SetAirportID(id)
	return ru
}

// SetNillableAirportID sets the "airport" edge to the Airport entity by ID if the given value is not nil.
func (ru *RunwayUpdate) SetNillableAirportID(id *int) *RunwayUpdate {
	if id != nil {
		ru = ru.SetAirportID(*id)
	}
	return ru
}

// SetAirport sets the "airport" edge to the Airport entity.
func (ru *RunwayUpdate) SetAirport(a *Airport) *RunwayUpdate {
	return ru.SetAirportID(a.ID)
}

// Mutation returns the RunwayMutation object of the builder.
func (ru *RunwayUpdate) Mutation() *RunwayMutation {
	return ru.mutation
}

// ClearAirport clears the "airport" edge to the Airport entity.
func (ru *RunwayUpdate) ClearAirport() *RunwayUpdate {
	ru.mutation.ClearAirport()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RunwayUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ru.defaults()
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RunwayMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RunwayUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RunwayUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RunwayUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RunwayUpdate) defaults() {
	if _, ok := ru.mutation.UpdateTime(); !ok {
		v := runway.UpdateDefaultUpdateTime()
		ru.mutation.SetUpdateTime(v)
	}
}

func (ru *RunwayUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   runway.Table,
			Columns: runway.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: runway.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Hash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: runway.FieldHash,
		})
	}
	if value, ok := ru.mutation.AddedHash(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: runway.FieldHash,
		})
	}
	if value, ok := ru.mutation.ImportFlag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: runway.FieldImportFlag,
		})
	}
	if value, ok := ru.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: runway.FieldUpdateTime,
		})
	}
	if value, ok := ru.mutation.AirportIdentifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: runway.FieldAirportIdentifier,
		})
	}
	if value, ok := ru.mutation.Length(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldLength,
		})
	}
	if value, ok := ru.mutation.AddedLength(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldLength,
		})
	}
	if value, ok := ru.mutation.Width(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldWidth,
		})
	}
	if value, ok := ru.mutation.AddedWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldWidth,
		})
	}
	if value, ok := ru.mutation.Surface(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: runway.FieldSurface,
		})
	}
	if value, ok := ru.mutation.Lighted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: runway.FieldLighted,
		})
	}
	if value, ok := ru.mutation.Closed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: runway.FieldClosed,
		})
	}
	if value, ok := ru.mutation.LowNumberedRunwayEndIdentifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndIdentifier,
		})
	}
	if value, ok := ru.mutation.LowNumberedRunwayEndLatitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndLatitude,
		})
	}
	if value, ok := ru.mutation.AddedLowNumberedRunwayEndLatitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndLatitude,
		})
	}
	if value, ok := ru.mutation.LowNumberedRunwayEndLongitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndLongitude,
		})
	}
	if value, ok := ru.mutation.AddedLowNumberedRunwayEndLongitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndLongitude,
		})
	}
	if value, ok := ru.mutation.LowNumberedRunwayEndElevation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndElevation,
		})
	}
	if value, ok := ru.mutation.AddedLowNumberedRunwayEndElevation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndElevation,
		})
	}
	if value, ok := ru.mutation.LowNumberedRunwayEndHeading(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndHeading,
		})
	}
	if value, ok := ru.mutation.AddedLowNumberedRunwayEndHeading(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndHeading,
		})
	}
	if value, ok := ru.mutation.LowNumberedRunwayEndDisplaced(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndDisplaced,
		})
	}
	if value, ok := ru.mutation.AddedLowNumberedRunwayEndDisplaced(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndDisplaced,
		})
	}
	if value, ok := ru.mutation.HighNumberedRunwayEndIdentifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndIdentifier,
		})
	}
	if value, ok := ru.mutation.HighNumberedRunwayEndLatitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndLatitude,
		})
	}
	if value, ok := ru.mutation.AddedHighNumberedRunwayEndLatitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndLatitude,
		})
	}
	if value, ok := ru.mutation.HighNumberedRunwayEndLongitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndLongitude,
		})
	}
	if value, ok := ru.mutation.AddedHighNumberedRunwayEndLongitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndLongitude,
		})
	}
	if value, ok := ru.mutation.HighNumberedRunwayEndElevation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndElevation,
		})
	}
	if value, ok := ru.mutation.AddedHighNumberedRunwayEndElevation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndElevation,
		})
	}
	if value, ok := ru.mutation.HighNumberedRunwayEndHeading(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndHeading,
		})
	}
	if value, ok := ru.mutation.AddedHighNumberedRunwayEndHeading(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndHeading,
		})
	}
	if value, ok := ru.mutation.HighNumberedRunwayEndDisplaced(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndDisplaced,
		})
	}
	if value, ok := ru.mutation.AddedHighNumberedRunwayEndDisplaced(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndDisplaced,
		})
	}
	if ru.mutation.AirportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   runway.AirportTable,
			Columns: []string{runway.AirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: airport.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.AirportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   runway.AirportTable,
			Columns: []string{runway.AirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: airport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{runway.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// RunwayUpdateOne is the builder for updating a single Runway entity.
type RunwayUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RunwayMutation
}

// SetHash sets the "hash" field.
func (ruo *RunwayUpdateOne) SetHash(u uint64) *RunwayUpdateOne {
	ruo.mutation.ResetHash()
	ruo.mutation.SetHash(u)
	return ruo
}

// AddHash adds u to the "hash" field.
func (ruo *RunwayUpdateOne) AddHash(u int64) *RunwayUpdateOne {
	ruo.mutation.AddHash(u)
	return ruo
}

// SetImportFlag sets the "import_flag" field.
func (ruo *RunwayUpdateOne) SetImportFlag(b bool) *RunwayUpdateOne {
	ruo.mutation.SetImportFlag(b)
	return ruo
}

// SetNillableImportFlag sets the "import_flag" field if the given value is not nil.
func (ruo *RunwayUpdateOne) SetNillableImportFlag(b *bool) *RunwayUpdateOne {
	if b != nil {
		ruo.SetImportFlag(*b)
	}
	return ruo
}

// SetUpdateTime sets the "update_time" field.
func (ruo *RunwayUpdateOne) SetUpdateTime(t time.Time) *RunwayUpdateOne {
	ruo.mutation.SetUpdateTime(t)
	return ruo
}

// SetAirportIdentifier sets the "airport_identifier" field.
func (ruo *RunwayUpdateOne) SetAirportIdentifier(s string) *RunwayUpdateOne {
	ruo.mutation.SetAirportIdentifier(s)
	return ruo
}

// SetLength sets the "length" field.
func (ruo *RunwayUpdateOne) SetLength(i int) *RunwayUpdateOne {
	ruo.mutation.ResetLength()
	ruo.mutation.SetLength(i)
	return ruo
}

// AddLength adds i to the "length" field.
func (ruo *RunwayUpdateOne) AddLength(i int) *RunwayUpdateOne {
	ruo.mutation.AddLength(i)
	return ruo
}

// SetWidth sets the "width" field.
func (ruo *RunwayUpdateOne) SetWidth(i int) *RunwayUpdateOne {
	ruo.mutation.ResetWidth()
	ruo.mutation.SetWidth(i)
	return ruo
}

// AddWidth adds i to the "width" field.
func (ruo *RunwayUpdateOne) AddWidth(i int) *RunwayUpdateOne {
	ruo.mutation.AddWidth(i)
	return ruo
}

// SetSurface sets the "surface" field.
func (ruo *RunwayUpdateOne) SetSurface(s string) *RunwayUpdateOne {
	ruo.mutation.SetSurface(s)
	return ruo
}

// SetLighted sets the "lighted" field.
func (ruo *RunwayUpdateOne) SetLighted(b bool) *RunwayUpdateOne {
	ruo.mutation.SetLighted(b)
	return ruo
}

// SetClosed sets the "closed" field.
func (ruo *RunwayUpdateOne) SetClosed(b bool) *RunwayUpdateOne {
	ruo.mutation.SetClosed(b)
	return ruo
}

// SetLowNumberedRunwayEndIdentifier sets the "low_numbered_runway_end_identifier" field.
func (ruo *RunwayUpdateOne) SetLowNumberedRunwayEndIdentifier(s string) *RunwayUpdateOne {
	ruo.mutation.SetLowNumberedRunwayEndIdentifier(s)
	return ruo
}

// SetLowNumberedRunwayEndLatitude sets the "low_numbered_runway_end_latitude" field.
func (ruo *RunwayUpdateOne) SetLowNumberedRunwayEndLatitude(f float64) *RunwayUpdateOne {
	ruo.mutation.ResetLowNumberedRunwayEndLatitude()
	ruo.mutation.SetLowNumberedRunwayEndLatitude(f)
	return ruo
}

// AddLowNumberedRunwayEndLatitude adds f to the "low_numbered_runway_end_latitude" field.
func (ruo *RunwayUpdateOne) AddLowNumberedRunwayEndLatitude(f float64) *RunwayUpdateOne {
	ruo.mutation.AddLowNumberedRunwayEndLatitude(f)
	return ruo
}

// SetLowNumberedRunwayEndLongitude sets the "low_numbered_runway_end_longitude" field.
func (ruo *RunwayUpdateOne) SetLowNumberedRunwayEndLongitude(f float64) *RunwayUpdateOne {
	ruo.mutation.ResetLowNumberedRunwayEndLongitude()
	ruo.mutation.SetLowNumberedRunwayEndLongitude(f)
	return ruo
}

// AddLowNumberedRunwayEndLongitude adds f to the "low_numbered_runway_end_longitude" field.
func (ruo *RunwayUpdateOne) AddLowNumberedRunwayEndLongitude(f float64) *RunwayUpdateOne {
	ruo.mutation.AddLowNumberedRunwayEndLongitude(f)
	return ruo
}

// SetLowNumberedRunwayEndElevation sets the "low_numbered_runway_end_elevation" field.
func (ruo *RunwayUpdateOne) SetLowNumberedRunwayEndElevation(i int) *RunwayUpdateOne {
	ruo.mutation.ResetLowNumberedRunwayEndElevation()
	ruo.mutation.SetLowNumberedRunwayEndElevation(i)
	return ruo
}

// AddLowNumberedRunwayEndElevation adds i to the "low_numbered_runway_end_elevation" field.
func (ruo *RunwayUpdateOne) AddLowNumberedRunwayEndElevation(i int) *RunwayUpdateOne {
	ruo.mutation.AddLowNumberedRunwayEndElevation(i)
	return ruo
}

// SetLowNumberedRunwayEndHeading sets the "low_numbered_runway_end_heading" field.
func (ruo *RunwayUpdateOne) SetLowNumberedRunwayEndHeading(i int) *RunwayUpdateOne {
	ruo.mutation.ResetLowNumberedRunwayEndHeading()
	ruo.mutation.SetLowNumberedRunwayEndHeading(i)
	return ruo
}

// AddLowNumberedRunwayEndHeading adds i to the "low_numbered_runway_end_heading" field.
func (ruo *RunwayUpdateOne) AddLowNumberedRunwayEndHeading(i int) *RunwayUpdateOne {
	ruo.mutation.AddLowNumberedRunwayEndHeading(i)
	return ruo
}

// SetLowNumberedRunwayEndDisplaced sets the "low_numbered_runway_end_displaced" field.
func (ruo *RunwayUpdateOne) SetLowNumberedRunwayEndDisplaced(i int) *RunwayUpdateOne {
	ruo.mutation.ResetLowNumberedRunwayEndDisplaced()
	ruo.mutation.SetLowNumberedRunwayEndDisplaced(i)
	return ruo
}

// AddLowNumberedRunwayEndDisplaced adds i to the "low_numbered_runway_end_displaced" field.
func (ruo *RunwayUpdateOne) AddLowNumberedRunwayEndDisplaced(i int) *RunwayUpdateOne {
	ruo.mutation.AddLowNumberedRunwayEndDisplaced(i)
	return ruo
}

// SetHighNumberedRunwayEndIdentifier sets the "high_numbered_runway_end_identifier" field.
func (ruo *RunwayUpdateOne) SetHighNumberedRunwayEndIdentifier(s string) *RunwayUpdateOne {
	ruo.mutation.SetHighNumberedRunwayEndIdentifier(s)
	return ruo
}

// SetHighNumberedRunwayEndLatitude sets the "high_numbered_runway_end_latitude" field.
func (ruo *RunwayUpdateOne) SetHighNumberedRunwayEndLatitude(f float64) *RunwayUpdateOne {
	ruo.mutation.ResetHighNumberedRunwayEndLatitude()
	ruo.mutation.SetHighNumberedRunwayEndLatitude(f)
	return ruo
}

// AddHighNumberedRunwayEndLatitude adds f to the "high_numbered_runway_end_latitude" field.
func (ruo *RunwayUpdateOne) AddHighNumberedRunwayEndLatitude(f float64) *RunwayUpdateOne {
	ruo.mutation.AddHighNumberedRunwayEndLatitude(f)
	return ruo
}

// SetHighNumberedRunwayEndLongitude sets the "high_numbered_runway_end_longitude" field.
func (ruo *RunwayUpdateOne) SetHighNumberedRunwayEndLongitude(f float64) *RunwayUpdateOne {
	ruo.mutation.ResetHighNumberedRunwayEndLongitude()
	ruo.mutation.SetHighNumberedRunwayEndLongitude(f)
	return ruo
}

// AddHighNumberedRunwayEndLongitude adds f to the "high_numbered_runway_end_longitude" field.
func (ruo *RunwayUpdateOne) AddHighNumberedRunwayEndLongitude(f float64) *RunwayUpdateOne {
	ruo.mutation.AddHighNumberedRunwayEndLongitude(f)
	return ruo
}

// SetHighNumberedRunwayEndElevation sets the "high_numbered_runway_end_elevation" field.
func (ruo *RunwayUpdateOne) SetHighNumberedRunwayEndElevation(i int) *RunwayUpdateOne {
	ruo.mutation.ResetHighNumberedRunwayEndElevation()
	ruo.mutation.SetHighNumberedRunwayEndElevation(i)
	return ruo
}

// AddHighNumberedRunwayEndElevation adds i to the "high_numbered_runway_end_elevation" field.
func (ruo *RunwayUpdateOne) AddHighNumberedRunwayEndElevation(i int) *RunwayUpdateOne {
	ruo.mutation.AddHighNumberedRunwayEndElevation(i)
	return ruo
}

// SetHighNumberedRunwayEndHeading sets the "high_numbered_runway_end_heading" field.
func (ruo *RunwayUpdateOne) SetHighNumberedRunwayEndHeading(i int) *RunwayUpdateOne {
	ruo.mutation.ResetHighNumberedRunwayEndHeading()
	ruo.mutation.SetHighNumberedRunwayEndHeading(i)
	return ruo
}

// AddHighNumberedRunwayEndHeading adds i to the "high_numbered_runway_end_heading" field.
func (ruo *RunwayUpdateOne) AddHighNumberedRunwayEndHeading(i int) *RunwayUpdateOne {
	ruo.mutation.AddHighNumberedRunwayEndHeading(i)
	return ruo
}

// SetHighNumberedRunwayEndDisplaced sets the "high_numbered_runway_end_displaced" field.
func (ruo *RunwayUpdateOne) SetHighNumberedRunwayEndDisplaced(i int) *RunwayUpdateOne {
	ruo.mutation.ResetHighNumberedRunwayEndDisplaced()
	ruo.mutation.SetHighNumberedRunwayEndDisplaced(i)
	return ruo
}

// AddHighNumberedRunwayEndDisplaced adds i to the "high_numbered_runway_end_displaced" field.
func (ruo *RunwayUpdateOne) AddHighNumberedRunwayEndDisplaced(i int) *RunwayUpdateOne {
	ruo.mutation.AddHighNumberedRunwayEndDisplaced(i)
	return ruo
}

// SetAirportID sets the "airport" edge to the Airport entity by ID.
func (ruo *RunwayUpdateOne) SetAirportID(id int) *RunwayUpdateOne {
	ruo.mutation.SetAirportID(id)
	return ruo
}

// SetNillableAirportID sets the "airport" edge to the Airport entity by ID if the given value is not nil.
func (ruo *RunwayUpdateOne) SetNillableAirportID(id *int) *RunwayUpdateOne {
	if id != nil {
		ruo = ruo.SetAirportID(*id)
	}
	return ruo
}

// SetAirport sets the "airport" edge to the Airport entity.
func (ruo *RunwayUpdateOne) SetAirport(a *Airport) *RunwayUpdateOne {
	return ruo.SetAirportID(a.ID)
}

// Mutation returns the RunwayMutation object of the builder.
func (ruo *RunwayUpdateOne) Mutation() *RunwayMutation {
	return ruo.mutation
}

// ClearAirport clears the "airport" edge to the Airport entity.
func (ruo *RunwayUpdateOne) ClearAirport() *RunwayUpdateOne {
	ruo.mutation.ClearAirport()
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RunwayUpdateOne) Select(field string, fields ...string) *RunwayUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Runway entity.
func (ruo *RunwayUpdateOne) Save(ctx context.Context) (*Runway, error) {
	var (
		err  error
		node *Runway
	)
	ruo.defaults()
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RunwayMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Runway)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RunwayMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RunwayUpdateOne) SaveX(ctx context.Context) *Runway {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RunwayUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RunwayUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RunwayUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdateTime(); !ok {
		v := runway.UpdateDefaultUpdateTime()
		ruo.mutation.SetUpdateTime(v)
	}
}

func (ruo *RunwayUpdateOne) sqlSave(ctx context.Context) (_node *Runway, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   runway.Table,
			Columns: runway.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: runway.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Runway.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, runway.FieldID)
		for _, f := range fields {
			if !runway.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != runway.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Hash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: runway.FieldHash,
		})
	}
	if value, ok := ruo.mutation.AddedHash(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: runway.FieldHash,
		})
	}
	if value, ok := ruo.mutation.ImportFlag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: runway.FieldImportFlag,
		})
	}
	if value, ok := ruo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: runway.FieldUpdateTime,
		})
	}
	if value, ok := ruo.mutation.AirportIdentifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: runway.FieldAirportIdentifier,
		})
	}
	if value, ok := ruo.mutation.Length(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldLength,
		})
	}
	if value, ok := ruo.mutation.AddedLength(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldLength,
		})
	}
	if value, ok := ruo.mutation.Width(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldWidth,
		})
	}
	if value, ok := ruo.mutation.AddedWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldWidth,
		})
	}
	if value, ok := ruo.mutation.Surface(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: runway.FieldSurface,
		})
	}
	if value, ok := ruo.mutation.Lighted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: runway.FieldLighted,
		})
	}
	if value, ok := ruo.mutation.Closed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: runway.FieldClosed,
		})
	}
	if value, ok := ruo.mutation.LowNumberedRunwayEndIdentifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndIdentifier,
		})
	}
	if value, ok := ruo.mutation.LowNumberedRunwayEndLatitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndLatitude,
		})
	}
	if value, ok := ruo.mutation.AddedLowNumberedRunwayEndLatitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndLatitude,
		})
	}
	if value, ok := ruo.mutation.LowNumberedRunwayEndLongitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndLongitude,
		})
	}
	if value, ok := ruo.mutation.AddedLowNumberedRunwayEndLongitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndLongitude,
		})
	}
	if value, ok := ruo.mutation.LowNumberedRunwayEndElevation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndElevation,
		})
	}
	if value, ok := ruo.mutation.AddedLowNumberedRunwayEndElevation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndElevation,
		})
	}
	if value, ok := ruo.mutation.LowNumberedRunwayEndHeading(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndHeading,
		})
	}
	if value, ok := ruo.mutation.AddedLowNumberedRunwayEndHeading(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndHeading,
		})
	}
	if value, ok := ruo.mutation.LowNumberedRunwayEndDisplaced(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndDisplaced,
		})
	}
	if value, ok := ruo.mutation.AddedLowNumberedRunwayEndDisplaced(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldLowNumberedRunwayEndDisplaced,
		})
	}
	if value, ok := ruo.mutation.HighNumberedRunwayEndIdentifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndIdentifier,
		})
	}
	if value, ok := ruo.mutation.HighNumberedRunwayEndLatitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndLatitude,
		})
	}
	if value, ok := ruo.mutation.AddedHighNumberedRunwayEndLatitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndLatitude,
		})
	}
	if value, ok := ruo.mutation.HighNumberedRunwayEndLongitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndLongitude,
		})
	}
	if value, ok := ruo.mutation.AddedHighNumberedRunwayEndLongitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndLongitude,
		})
	}
	if value, ok := ruo.mutation.HighNumberedRunwayEndElevation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndElevation,
		})
	}
	if value, ok := ruo.mutation.AddedHighNumberedRunwayEndElevation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndElevation,
		})
	}
	if value, ok := ruo.mutation.HighNumberedRunwayEndHeading(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndHeading,
		})
	}
	if value, ok := ruo.mutation.AddedHighNumberedRunwayEndHeading(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndHeading,
		})
	}
	if value, ok := ruo.mutation.HighNumberedRunwayEndDisplaced(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndDisplaced,
		})
	}
	if value, ok := ruo.mutation.AddedHighNumberedRunwayEndDisplaced(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: runway.FieldHighNumberedRunwayEndDisplaced,
		})
	}
	if ruo.mutation.AirportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   runway.AirportTable,
			Columns: []string{runway.AirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: airport.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.AirportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   runway.AirportTable,
			Columns: []string{runway.AirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: airport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Runway{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{runway.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
