// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"metar.gg/ent/airport"
	"metar.gg/ent/predicate"
	"metar.gg/ent/runway"
)

// RunwayUpdate is the builder for updating Runway entities.
type RunwayUpdate struct {
	config
	hooks     []Hook
	mutation  *RunwayMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RunwayUpdate builder.
func (ru *RunwayUpdate) Where(ps ...predicate.Runway) *RunwayUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetImportID sets the "import_id" field.
func (ru *RunwayUpdate) SetImportID(i int) *RunwayUpdate {
	ru.mutation.ResetImportID()
	ru.mutation.SetImportID(i)
	return ru
}

// AddImportID adds i to the "import_id" field.
func (ru *RunwayUpdate) AddImportID(i int) *RunwayUpdate {
	ru.mutation.AddImportID(i)
	return ru
}

// SetHash sets the "hash" field.
func (ru *RunwayUpdate) SetHash(s string) *RunwayUpdate {
	ru.mutation.SetHash(s)
	return ru
}

// SetImportFlag sets the "import_flag" field.
func (ru *RunwayUpdate) SetImportFlag(b bool) *RunwayUpdate {
	ru.mutation.SetImportFlag(b)
	return ru
}

// SetNillableImportFlag sets the "import_flag" field if the given value is not nil.
func (ru *RunwayUpdate) SetNillableImportFlag(b *bool) *RunwayUpdate {
	if b != nil {
		ru.SetImportFlag(*b)
	}
	return ru
}

// SetLastUpdated sets the "last_updated" field.
func (ru *RunwayUpdate) SetLastUpdated(t time.Time) *RunwayUpdate {
	ru.mutation.SetLastUpdated(t)
	return ru
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (ru *RunwayUpdate) SetNillableLastUpdated(t *time.Time) *RunwayUpdate {
	if t != nil {
		ru.SetLastUpdated(*t)
	}
	return ru
}

// SetLength sets the "length" field.
func (ru *RunwayUpdate) SetLength(i int) *RunwayUpdate {
	ru.mutation.ResetLength()
	ru.mutation.SetLength(i)
	return ru
}

// AddLength adds i to the "length" field.
func (ru *RunwayUpdate) AddLength(i int) *RunwayUpdate {
	ru.mutation.AddLength(i)
	return ru
}

// SetWidth sets the "width" field.
func (ru *RunwayUpdate) SetWidth(i int) *RunwayUpdate {
	ru.mutation.ResetWidth()
	ru.mutation.SetWidth(i)
	return ru
}

// AddWidth adds i to the "width" field.
func (ru *RunwayUpdate) AddWidth(i int) *RunwayUpdate {
	ru.mutation.AddWidth(i)
	return ru
}

// SetSurface sets the "surface" field.
func (ru *RunwayUpdate) SetSurface(s string) *RunwayUpdate {
	ru.mutation.SetSurface(s)
	return ru
}

// SetNillableSurface sets the "surface" field if the given value is not nil.
func (ru *RunwayUpdate) SetNillableSurface(s *string) *RunwayUpdate {
	if s != nil {
		ru.SetSurface(*s)
	}
	return ru
}

// ClearSurface clears the value of the "surface" field.
func (ru *RunwayUpdate) ClearSurface() *RunwayUpdate {
	ru.mutation.ClearSurface()
	return ru
}

// SetLighted sets the "lighted" field.
func (ru *RunwayUpdate) SetLighted(b bool) *RunwayUpdate {
	ru.mutation.SetLighted(b)
	return ru
}

// SetClosed sets the "closed" field.
func (ru *RunwayUpdate) SetClosed(b bool) *RunwayUpdate {
	ru.mutation.SetClosed(b)
	return ru
}

// SetLowRunwayIdentifier sets the "low_runway_identifier" field.
func (ru *RunwayUpdate) SetLowRunwayIdentifier(s string) *RunwayUpdate {
	ru.mutation.SetLowRunwayIdentifier(s)
	return ru
}

// SetLowRunwayLatitude sets the "low_runway_latitude" field.
func (ru *RunwayUpdate) SetLowRunwayLatitude(f float64) *RunwayUpdate {
	ru.mutation.ResetLowRunwayLatitude()
	ru.mutation.SetLowRunwayLatitude(f)
	return ru
}

// SetNillableLowRunwayLatitude sets the "low_runway_latitude" field if the given value is not nil.
func (ru *RunwayUpdate) SetNillableLowRunwayLatitude(f *float64) *RunwayUpdate {
	if f != nil {
		ru.SetLowRunwayLatitude(*f)
	}
	return ru
}

// AddLowRunwayLatitude adds f to the "low_runway_latitude" field.
func (ru *RunwayUpdate) AddLowRunwayLatitude(f float64) *RunwayUpdate {
	ru.mutation.AddLowRunwayLatitude(f)
	return ru
}

// ClearLowRunwayLatitude clears the value of the "low_runway_latitude" field.
func (ru *RunwayUpdate) ClearLowRunwayLatitude() *RunwayUpdate {
	ru.mutation.ClearLowRunwayLatitude()
	return ru
}

// SetLowRunwayLongitude sets the "low_runway_longitude" field.
func (ru *RunwayUpdate) SetLowRunwayLongitude(f float64) *RunwayUpdate {
	ru.mutation.ResetLowRunwayLongitude()
	ru.mutation.SetLowRunwayLongitude(f)
	return ru
}

// SetNillableLowRunwayLongitude sets the "low_runway_longitude" field if the given value is not nil.
func (ru *RunwayUpdate) SetNillableLowRunwayLongitude(f *float64) *RunwayUpdate {
	if f != nil {
		ru.SetLowRunwayLongitude(*f)
	}
	return ru
}

// AddLowRunwayLongitude adds f to the "low_runway_longitude" field.
func (ru *RunwayUpdate) AddLowRunwayLongitude(f float64) *RunwayUpdate {
	ru.mutation.AddLowRunwayLongitude(f)
	return ru
}

// ClearLowRunwayLongitude clears the value of the "low_runway_longitude" field.
func (ru *RunwayUpdate) ClearLowRunwayLongitude() *RunwayUpdate {
	ru.mutation.ClearLowRunwayLongitude()
	return ru
}

// SetLowRunwayElevation sets the "low_runway_elevation" field.
func (ru *RunwayUpdate) SetLowRunwayElevation(i int) *RunwayUpdate {
	ru.mutation.ResetLowRunwayElevation()
	ru.mutation.SetLowRunwayElevation(i)
	return ru
}

// SetNillableLowRunwayElevation sets the "low_runway_elevation" field if the given value is not nil.
func (ru *RunwayUpdate) SetNillableLowRunwayElevation(i *int) *RunwayUpdate {
	if i != nil {
		ru.SetLowRunwayElevation(*i)
	}
	return ru
}

// AddLowRunwayElevation adds i to the "low_runway_elevation" field.
func (ru *RunwayUpdate) AddLowRunwayElevation(i int) *RunwayUpdate {
	ru.mutation.AddLowRunwayElevation(i)
	return ru
}

// ClearLowRunwayElevation clears the value of the "low_runway_elevation" field.
func (ru *RunwayUpdate) ClearLowRunwayElevation() *RunwayUpdate {
	ru.mutation.ClearLowRunwayElevation()
	return ru
}

// SetLowRunwayHeading sets the "low_runway_heading" field.
func (ru *RunwayUpdate) SetLowRunwayHeading(f float64) *RunwayUpdate {
	ru.mutation.ResetLowRunwayHeading()
	ru.mutation.SetLowRunwayHeading(f)
	return ru
}

// SetNillableLowRunwayHeading sets the "low_runway_heading" field if the given value is not nil.
func (ru *RunwayUpdate) SetNillableLowRunwayHeading(f *float64) *RunwayUpdate {
	if f != nil {
		ru.SetLowRunwayHeading(*f)
	}
	return ru
}

// AddLowRunwayHeading adds f to the "low_runway_heading" field.
func (ru *RunwayUpdate) AddLowRunwayHeading(f float64) *RunwayUpdate {
	ru.mutation.AddLowRunwayHeading(f)
	return ru
}

// ClearLowRunwayHeading clears the value of the "low_runway_heading" field.
func (ru *RunwayUpdate) ClearLowRunwayHeading() *RunwayUpdate {
	ru.mutation.ClearLowRunwayHeading()
	return ru
}

// SetLowRunwayDisplacedThreshold sets the "low_runway_displaced_threshold" field.
func (ru *RunwayUpdate) SetLowRunwayDisplacedThreshold(i int) *RunwayUpdate {
	ru.mutation.ResetLowRunwayDisplacedThreshold()
	ru.mutation.SetLowRunwayDisplacedThreshold(i)
	return ru
}

// SetNillableLowRunwayDisplacedThreshold sets the "low_runway_displaced_threshold" field if the given value is not nil.
func (ru *RunwayUpdate) SetNillableLowRunwayDisplacedThreshold(i *int) *RunwayUpdate {
	if i != nil {
		ru.SetLowRunwayDisplacedThreshold(*i)
	}
	return ru
}

// AddLowRunwayDisplacedThreshold adds i to the "low_runway_displaced_threshold" field.
func (ru *RunwayUpdate) AddLowRunwayDisplacedThreshold(i int) *RunwayUpdate {
	ru.mutation.AddLowRunwayDisplacedThreshold(i)
	return ru
}

// ClearLowRunwayDisplacedThreshold clears the value of the "low_runway_displaced_threshold" field.
func (ru *RunwayUpdate) ClearLowRunwayDisplacedThreshold() *RunwayUpdate {
	ru.mutation.ClearLowRunwayDisplacedThreshold()
	return ru
}

// SetHighRunwayIdentifier sets the "high_runway_identifier" field.
func (ru *RunwayUpdate) SetHighRunwayIdentifier(s string) *RunwayUpdate {
	ru.mutation.SetHighRunwayIdentifier(s)
	return ru
}

// SetHighRunwayLatitude sets the "high_runway_latitude" field.
func (ru *RunwayUpdate) SetHighRunwayLatitude(f float64) *RunwayUpdate {
	ru.mutation.ResetHighRunwayLatitude()
	ru.mutation.SetHighRunwayLatitude(f)
	return ru
}

// SetNillableHighRunwayLatitude sets the "high_runway_latitude" field if the given value is not nil.
func (ru *RunwayUpdate) SetNillableHighRunwayLatitude(f *float64) *RunwayUpdate {
	if f != nil {
		ru.SetHighRunwayLatitude(*f)
	}
	return ru
}

// AddHighRunwayLatitude adds f to the "high_runway_latitude" field.
func (ru *RunwayUpdate) AddHighRunwayLatitude(f float64) *RunwayUpdate {
	ru.mutation.AddHighRunwayLatitude(f)
	return ru
}

// ClearHighRunwayLatitude clears the value of the "high_runway_latitude" field.
func (ru *RunwayUpdate) ClearHighRunwayLatitude() *RunwayUpdate {
	ru.mutation.ClearHighRunwayLatitude()
	return ru
}

// SetHighRunwayLongitude sets the "high_runway_longitude" field.
func (ru *RunwayUpdate) SetHighRunwayLongitude(f float64) *RunwayUpdate {
	ru.mutation.ResetHighRunwayLongitude()
	ru.mutation.SetHighRunwayLongitude(f)
	return ru
}

// SetNillableHighRunwayLongitude sets the "high_runway_longitude" field if the given value is not nil.
func (ru *RunwayUpdate) SetNillableHighRunwayLongitude(f *float64) *RunwayUpdate {
	if f != nil {
		ru.SetHighRunwayLongitude(*f)
	}
	return ru
}

// AddHighRunwayLongitude adds f to the "high_runway_longitude" field.
func (ru *RunwayUpdate) AddHighRunwayLongitude(f float64) *RunwayUpdate {
	ru.mutation.AddHighRunwayLongitude(f)
	return ru
}

// ClearHighRunwayLongitude clears the value of the "high_runway_longitude" field.
func (ru *RunwayUpdate) ClearHighRunwayLongitude() *RunwayUpdate {
	ru.mutation.ClearHighRunwayLongitude()
	return ru
}

// SetHighRunwayElevation sets the "high_runway_elevation" field.
func (ru *RunwayUpdate) SetHighRunwayElevation(i int) *RunwayUpdate {
	ru.mutation.ResetHighRunwayElevation()
	ru.mutation.SetHighRunwayElevation(i)
	return ru
}

// SetNillableHighRunwayElevation sets the "high_runway_elevation" field if the given value is not nil.
func (ru *RunwayUpdate) SetNillableHighRunwayElevation(i *int) *RunwayUpdate {
	if i != nil {
		ru.SetHighRunwayElevation(*i)
	}
	return ru
}

// AddHighRunwayElevation adds i to the "high_runway_elevation" field.
func (ru *RunwayUpdate) AddHighRunwayElevation(i int) *RunwayUpdate {
	ru.mutation.AddHighRunwayElevation(i)
	return ru
}

// ClearHighRunwayElevation clears the value of the "high_runway_elevation" field.
func (ru *RunwayUpdate) ClearHighRunwayElevation() *RunwayUpdate {
	ru.mutation.ClearHighRunwayElevation()
	return ru
}

// SetHighRunwayHeading sets the "high_runway_heading" field.
func (ru *RunwayUpdate) SetHighRunwayHeading(f float64) *RunwayUpdate {
	ru.mutation.ResetHighRunwayHeading()
	ru.mutation.SetHighRunwayHeading(f)
	return ru
}

// SetNillableHighRunwayHeading sets the "high_runway_heading" field if the given value is not nil.
func (ru *RunwayUpdate) SetNillableHighRunwayHeading(f *float64) *RunwayUpdate {
	if f != nil {
		ru.SetHighRunwayHeading(*f)
	}
	return ru
}

// AddHighRunwayHeading adds f to the "high_runway_heading" field.
func (ru *RunwayUpdate) AddHighRunwayHeading(f float64) *RunwayUpdate {
	ru.mutation.AddHighRunwayHeading(f)
	return ru
}

// ClearHighRunwayHeading clears the value of the "high_runway_heading" field.
func (ru *RunwayUpdate) ClearHighRunwayHeading() *RunwayUpdate {
	ru.mutation.ClearHighRunwayHeading()
	return ru
}

// SetHighRunwayDisplacedThreshold sets the "high_runway_displaced_threshold" field.
func (ru *RunwayUpdate) SetHighRunwayDisplacedThreshold(i int) *RunwayUpdate {
	ru.mutation.ResetHighRunwayDisplacedThreshold()
	ru.mutation.SetHighRunwayDisplacedThreshold(i)
	return ru
}

// SetNillableHighRunwayDisplacedThreshold sets the "high_runway_displaced_threshold" field if the given value is not nil.
func (ru *RunwayUpdate) SetNillableHighRunwayDisplacedThreshold(i *int) *RunwayUpdate {
	if i != nil {
		ru.SetHighRunwayDisplacedThreshold(*i)
	}
	return ru
}

// AddHighRunwayDisplacedThreshold adds i to the "high_runway_displaced_threshold" field.
func (ru *RunwayUpdate) AddHighRunwayDisplacedThreshold(i int) *RunwayUpdate {
	ru.mutation.AddHighRunwayDisplacedThreshold(i)
	return ru
}

// ClearHighRunwayDisplacedThreshold clears the value of the "high_runway_displaced_threshold" field.
func (ru *RunwayUpdate) ClearHighRunwayDisplacedThreshold() *RunwayUpdate {
	ru.mutation.ClearHighRunwayDisplacedThreshold()
	return ru
}

// SetAirportID sets the "airport" edge to the Airport entity by ID.
func (ru *RunwayUpdate) SetAirportID(id uuid.UUID) *RunwayUpdate {
	ru.mutation.SetAirportID(id)
	return ru
}

// SetNillableAirportID sets the "airport" edge to the Airport entity by ID if the given value is not nil.
func (ru *RunwayUpdate) SetNillableAirportID(id *uuid.UUID) *RunwayUpdate {
	if id != nil {
		ru = ru.SetAirportID(*id)
	}
	return ru
}

// SetAirport sets the "airport" edge to the Airport entity.
func (ru *RunwayUpdate) SetAirport(a *Airport) *RunwayUpdate {
	return ru.SetAirportID(a.ID)
}

// Mutation returns the RunwayMutation object of the builder.
func (ru *RunwayUpdate) Mutation() *RunwayMutation {
	return ru.mutation
}

// ClearAirport clears the "airport" edge to the Airport entity.
func (ru *RunwayUpdate) ClearAirport() *RunwayUpdate {
	ru.mutation.ClearAirport()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RunwayUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, RunwayMutation](ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RunwayUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RunwayUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RunwayUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ru *RunwayUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RunwayUpdate {
	ru.modifiers = append(ru.modifiers, modifiers...)
	return ru
}

func (ru *RunwayUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(runway.Table, runway.Columns, sqlgraph.NewFieldSpec(runway.FieldID, field.TypeUUID))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.ImportID(); ok {
		_spec.SetField(runway.FieldImportID, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedImportID(); ok {
		_spec.AddField(runway.FieldImportID, field.TypeInt, value)
	}
	if value, ok := ru.mutation.Hash(); ok {
		_spec.SetField(runway.FieldHash, field.TypeString, value)
	}
	if value, ok := ru.mutation.ImportFlag(); ok {
		_spec.SetField(runway.FieldImportFlag, field.TypeBool, value)
	}
	if value, ok := ru.mutation.LastUpdated(); ok {
		_spec.SetField(runway.FieldLastUpdated, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Length(); ok {
		_spec.SetField(runway.FieldLength, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedLength(); ok {
		_spec.AddField(runway.FieldLength, field.TypeInt, value)
	}
	if value, ok := ru.mutation.Width(); ok {
		_spec.SetField(runway.FieldWidth, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedWidth(); ok {
		_spec.AddField(runway.FieldWidth, field.TypeInt, value)
	}
	if value, ok := ru.mutation.Surface(); ok {
		_spec.SetField(runway.FieldSurface, field.TypeString, value)
	}
	if ru.mutation.SurfaceCleared() {
		_spec.ClearField(runway.FieldSurface, field.TypeString)
	}
	if value, ok := ru.mutation.Lighted(); ok {
		_spec.SetField(runway.FieldLighted, field.TypeBool, value)
	}
	if value, ok := ru.mutation.Closed(); ok {
		_spec.SetField(runway.FieldClosed, field.TypeBool, value)
	}
	if value, ok := ru.mutation.LowRunwayIdentifier(); ok {
		_spec.SetField(runway.FieldLowRunwayIdentifier, field.TypeString, value)
	}
	if value, ok := ru.mutation.LowRunwayLatitude(); ok {
		_spec.SetField(runway.FieldLowRunwayLatitude, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.AddedLowRunwayLatitude(); ok {
		_spec.AddField(runway.FieldLowRunwayLatitude, field.TypeFloat64, value)
	}
	if ru.mutation.LowRunwayLatitudeCleared() {
		_spec.ClearField(runway.FieldLowRunwayLatitude, field.TypeFloat64)
	}
	if value, ok := ru.mutation.LowRunwayLongitude(); ok {
		_spec.SetField(runway.FieldLowRunwayLongitude, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.AddedLowRunwayLongitude(); ok {
		_spec.AddField(runway.FieldLowRunwayLongitude, field.TypeFloat64, value)
	}
	if ru.mutation.LowRunwayLongitudeCleared() {
		_spec.ClearField(runway.FieldLowRunwayLongitude, field.TypeFloat64)
	}
	if value, ok := ru.mutation.LowRunwayElevation(); ok {
		_spec.SetField(runway.FieldLowRunwayElevation, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedLowRunwayElevation(); ok {
		_spec.AddField(runway.FieldLowRunwayElevation, field.TypeInt, value)
	}
	if ru.mutation.LowRunwayElevationCleared() {
		_spec.ClearField(runway.FieldLowRunwayElevation, field.TypeInt)
	}
	if value, ok := ru.mutation.LowRunwayHeading(); ok {
		_spec.SetField(runway.FieldLowRunwayHeading, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.AddedLowRunwayHeading(); ok {
		_spec.AddField(runway.FieldLowRunwayHeading, field.TypeFloat64, value)
	}
	if ru.mutation.LowRunwayHeadingCleared() {
		_spec.ClearField(runway.FieldLowRunwayHeading, field.TypeFloat64)
	}
	if value, ok := ru.mutation.LowRunwayDisplacedThreshold(); ok {
		_spec.SetField(runway.FieldLowRunwayDisplacedThreshold, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedLowRunwayDisplacedThreshold(); ok {
		_spec.AddField(runway.FieldLowRunwayDisplacedThreshold, field.TypeInt, value)
	}
	if ru.mutation.LowRunwayDisplacedThresholdCleared() {
		_spec.ClearField(runway.FieldLowRunwayDisplacedThreshold, field.TypeInt)
	}
	if value, ok := ru.mutation.HighRunwayIdentifier(); ok {
		_spec.SetField(runway.FieldHighRunwayIdentifier, field.TypeString, value)
	}
	if value, ok := ru.mutation.HighRunwayLatitude(); ok {
		_spec.SetField(runway.FieldHighRunwayLatitude, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.AddedHighRunwayLatitude(); ok {
		_spec.AddField(runway.FieldHighRunwayLatitude, field.TypeFloat64, value)
	}
	if ru.mutation.HighRunwayLatitudeCleared() {
		_spec.ClearField(runway.FieldHighRunwayLatitude, field.TypeFloat64)
	}
	if value, ok := ru.mutation.HighRunwayLongitude(); ok {
		_spec.SetField(runway.FieldHighRunwayLongitude, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.AddedHighRunwayLongitude(); ok {
		_spec.AddField(runway.FieldHighRunwayLongitude, field.TypeFloat64, value)
	}
	if ru.mutation.HighRunwayLongitudeCleared() {
		_spec.ClearField(runway.FieldHighRunwayLongitude, field.TypeFloat64)
	}
	if value, ok := ru.mutation.HighRunwayElevation(); ok {
		_spec.SetField(runway.FieldHighRunwayElevation, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedHighRunwayElevation(); ok {
		_spec.AddField(runway.FieldHighRunwayElevation, field.TypeInt, value)
	}
	if ru.mutation.HighRunwayElevationCleared() {
		_spec.ClearField(runway.FieldHighRunwayElevation, field.TypeInt)
	}
	if value, ok := ru.mutation.HighRunwayHeading(); ok {
		_spec.SetField(runway.FieldHighRunwayHeading, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.AddedHighRunwayHeading(); ok {
		_spec.AddField(runway.FieldHighRunwayHeading, field.TypeFloat64, value)
	}
	if ru.mutation.HighRunwayHeadingCleared() {
		_spec.ClearField(runway.FieldHighRunwayHeading, field.TypeFloat64)
	}
	if value, ok := ru.mutation.HighRunwayDisplacedThreshold(); ok {
		_spec.SetField(runway.FieldHighRunwayDisplacedThreshold, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedHighRunwayDisplacedThreshold(); ok {
		_spec.AddField(runway.FieldHighRunwayDisplacedThreshold, field.TypeInt, value)
	}
	if ru.mutation.HighRunwayDisplacedThresholdCleared() {
		_spec.ClearField(runway.FieldHighRunwayDisplacedThreshold, field.TypeInt)
	}
	if ru.mutation.AirportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   runway.AirportTable,
			Columns: []string{runway.AirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airport.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.AirportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   runway.AirportTable,
			Columns: []string{runway.AirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{runway.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RunwayUpdateOne is the builder for updating a single Runway entity.
type RunwayUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RunwayMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetImportID sets the "import_id" field.
func (ruo *RunwayUpdateOne) SetImportID(i int) *RunwayUpdateOne {
	ruo.mutation.ResetImportID()
	ruo.mutation.SetImportID(i)
	return ruo
}

// AddImportID adds i to the "import_id" field.
func (ruo *RunwayUpdateOne) AddImportID(i int) *RunwayUpdateOne {
	ruo.mutation.AddImportID(i)
	return ruo
}

// SetHash sets the "hash" field.
func (ruo *RunwayUpdateOne) SetHash(s string) *RunwayUpdateOne {
	ruo.mutation.SetHash(s)
	return ruo
}

// SetImportFlag sets the "import_flag" field.
func (ruo *RunwayUpdateOne) SetImportFlag(b bool) *RunwayUpdateOne {
	ruo.mutation.SetImportFlag(b)
	return ruo
}

// SetNillableImportFlag sets the "import_flag" field if the given value is not nil.
func (ruo *RunwayUpdateOne) SetNillableImportFlag(b *bool) *RunwayUpdateOne {
	if b != nil {
		ruo.SetImportFlag(*b)
	}
	return ruo
}

// SetLastUpdated sets the "last_updated" field.
func (ruo *RunwayUpdateOne) SetLastUpdated(t time.Time) *RunwayUpdateOne {
	ruo.mutation.SetLastUpdated(t)
	return ruo
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (ruo *RunwayUpdateOne) SetNillableLastUpdated(t *time.Time) *RunwayUpdateOne {
	if t != nil {
		ruo.SetLastUpdated(*t)
	}
	return ruo
}

// SetLength sets the "length" field.
func (ruo *RunwayUpdateOne) SetLength(i int) *RunwayUpdateOne {
	ruo.mutation.ResetLength()
	ruo.mutation.SetLength(i)
	return ruo
}

// AddLength adds i to the "length" field.
func (ruo *RunwayUpdateOne) AddLength(i int) *RunwayUpdateOne {
	ruo.mutation.AddLength(i)
	return ruo
}

// SetWidth sets the "width" field.
func (ruo *RunwayUpdateOne) SetWidth(i int) *RunwayUpdateOne {
	ruo.mutation.ResetWidth()
	ruo.mutation.SetWidth(i)
	return ruo
}

// AddWidth adds i to the "width" field.
func (ruo *RunwayUpdateOne) AddWidth(i int) *RunwayUpdateOne {
	ruo.mutation.AddWidth(i)
	return ruo
}

// SetSurface sets the "surface" field.
func (ruo *RunwayUpdateOne) SetSurface(s string) *RunwayUpdateOne {
	ruo.mutation.SetSurface(s)
	return ruo
}

// SetNillableSurface sets the "surface" field if the given value is not nil.
func (ruo *RunwayUpdateOne) SetNillableSurface(s *string) *RunwayUpdateOne {
	if s != nil {
		ruo.SetSurface(*s)
	}
	return ruo
}

// ClearSurface clears the value of the "surface" field.
func (ruo *RunwayUpdateOne) ClearSurface() *RunwayUpdateOne {
	ruo.mutation.ClearSurface()
	return ruo
}

// SetLighted sets the "lighted" field.
func (ruo *RunwayUpdateOne) SetLighted(b bool) *RunwayUpdateOne {
	ruo.mutation.SetLighted(b)
	return ruo
}

// SetClosed sets the "closed" field.
func (ruo *RunwayUpdateOne) SetClosed(b bool) *RunwayUpdateOne {
	ruo.mutation.SetClosed(b)
	return ruo
}

// SetLowRunwayIdentifier sets the "low_runway_identifier" field.
func (ruo *RunwayUpdateOne) SetLowRunwayIdentifier(s string) *RunwayUpdateOne {
	ruo.mutation.SetLowRunwayIdentifier(s)
	return ruo
}

// SetLowRunwayLatitude sets the "low_runway_latitude" field.
func (ruo *RunwayUpdateOne) SetLowRunwayLatitude(f float64) *RunwayUpdateOne {
	ruo.mutation.ResetLowRunwayLatitude()
	ruo.mutation.SetLowRunwayLatitude(f)
	return ruo
}

// SetNillableLowRunwayLatitude sets the "low_runway_latitude" field if the given value is not nil.
func (ruo *RunwayUpdateOne) SetNillableLowRunwayLatitude(f *float64) *RunwayUpdateOne {
	if f != nil {
		ruo.SetLowRunwayLatitude(*f)
	}
	return ruo
}

// AddLowRunwayLatitude adds f to the "low_runway_latitude" field.
func (ruo *RunwayUpdateOne) AddLowRunwayLatitude(f float64) *RunwayUpdateOne {
	ruo.mutation.AddLowRunwayLatitude(f)
	return ruo
}

// ClearLowRunwayLatitude clears the value of the "low_runway_latitude" field.
func (ruo *RunwayUpdateOne) ClearLowRunwayLatitude() *RunwayUpdateOne {
	ruo.mutation.ClearLowRunwayLatitude()
	return ruo
}

// SetLowRunwayLongitude sets the "low_runway_longitude" field.
func (ruo *RunwayUpdateOne) SetLowRunwayLongitude(f float64) *RunwayUpdateOne {
	ruo.mutation.ResetLowRunwayLongitude()
	ruo.mutation.SetLowRunwayLongitude(f)
	return ruo
}

// SetNillableLowRunwayLongitude sets the "low_runway_longitude" field if the given value is not nil.
func (ruo *RunwayUpdateOne) SetNillableLowRunwayLongitude(f *float64) *RunwayUpdateOne {
	if f != nil {
		ruo.SetLowRunwayLongitude(*f)
	}
	return ruo
}

// AddLowRunwayLongitude adds f to the "low_runway_longitude" field.
func (ruo *RunwayUpdateOne) AddLowRunwayLongitude(f float64) *RunwayUpdateOne {
	ruo.mutation.AddLowRunwayLongitude(f)
	return ruo
}

// ClearLowRunwayLongitude clears the value of the "low_runway_longitude" field.
func (ruo *RunwayUpdateOne) ClearLowRunwayLongitude() *RunwayUpdateOne {
	ruo.mutation.ClearLowRunwayLongitude()
	return ruo
}

// SetLowRunwayElevation sets the "low_runway_elevation" field.
func (ruo *RunwayUpdateOne) SetLowRunwayElevation(i int) *RunwayUpdateOne {
	ruo.mutation.ResetLowRunwayElevation()
	ruo.mutation.SetLowRunwayElevation(i)
	return ruo
}

// SetNillableLowRunwayElevation sets the "low_runway_elevation" field if the given value is not nil.
func (ruo *RunwayUpdateOne) SetNillableLowRunwayElevation(i *int) *RunwayUpdateOne {
	if i != nil {
		ruo.SetLowRunwayElevation(*i)
	}
	return ruo
}

// AddLowRunwayElevation adds i to the "low_runway_elevation" field.
func (ruo *RunwayUpdateOne) AddLowRunwayElevation(i int) *RunwayUpdateOne {
	ruo.mutation.AddLowRunwayElevation(i)
	return ruo
}

// ClearLowRunwayElevation clears the value of the "low_runway_elevation" field.
func (ruo *RunwayUpdateOne) ClearLowRunwayElevation() *RunwayUpdateOne {
	ruo.mutation.ClearLowRunwayElevation()
	return ruo
}

// SetLowRunwayHeading sets the "low_runway_heading" field.
func (ruo *RunwayUpdateOne) SetLowRunwayHeading(f float64) *RunwayUpdateOne {
	ruo.mutation.ResetLowRunwayHeading()
	ruo.mutation.SetLowRunwayHeading(f)
	return ruo
}

// SetNillableLowRunwayHeading sets the "low_runway_heading" field if the given value is not nil.
func (ruo *RunwayUpdateOne) SetNillableLowRunwayHeading(f *float64) *RunwayUpdateOne {
	if f != nil {
		ruo.SetLowRunwayHeading(*f)
	}
	return ruo
}

// AddLowRunwayHeading adds f to the "low_runway_heading" field.
func (ruo *RunwayUpdateOne) AddLowRunwayHeading(f float64) *RunwayUpdateOne {
	ruo.mutation.AddLowRunwayHeading(f)
	return ruo
}

// ClearLowRunwayHeading clears the value of the "low_runway_heading" field.
func (ruo *RunwayUpdateOne) ClearLowRunwayHeading() *RunwayUpdateOne {
	ruo.mutation.ClearLowRunwayHeading()
	return ruo
}

// SetLowRunwayDisplacedThreshold sets the "low_runway_displaced_threshold" field.
func (ruo *RunwayUpdateOne) SetLowRunwayDisplacedThreshold(i int) *RunwayUpdateOne {
	ruo.mutation.ResetLowRunwayDisplacedThreshold()
	ruo.mutation.SetLowRunwayDisplacedThreshold(i)
	return ruo
}

// SetNillableLowRunwayDisplacedThreshold sets the "low_runway_displaced_threshold" field if the given value is not nil.
func (ruo *RunwayUpdateOne) SetNillableLowRunwayDisplacedThreshold(i *int) *RunwayUpdateOne {
	if i != nil {
		ruo.SetLowRunwayDisplacedThreshold(*i)
	}
	return ruo
}

// AddLowRunwayDisplacedThreshold adds i to the "low_runway_displaced_threshold" field.
func (ruo *RunwayUpdateOne) AddLowRunwayDisplacedThreshold(i int) *RunwayUpdateOne {
	ruo.mutation.AddLowRunwayDisplacedThreshold(i)
	return ruo
}

// ClearLowRunwayDisplacedThreshold clears the value of the "low_runway_displaced_threshold" field.
func (ruo *RunwayUpdateOne) ClearLowRunwayDisplacedThreshold() *RunwayUpdateOne {
	ruo.mutation.ClearLowRunwayDisplacedThreshold()
	return ruo
}

// SetHighRunwayIdentifier sets the "high_runway_identifier" field.
func (ruo *RunwayUpdateOne) SetHighRunwayIdentifier(s string) *RunwayUpdateOne {
	ruo.mutation.SetHighRunwayIdentifier(s)
	return ruo
}

// SetHighRunwayLatitude sets the "high_runway_latitude" field.
func (ruo *RunwayUpdateOne) SetHighRunwayLatitude(f float64) *RunwayUpdateOne {
	ruo.mutation.ResetHighRunwayLatitude()
	ruo.mutation.SetHighRunwayLatitude(f)
	return ruo
}

// SetNillableHighRunwayLatitude sets the "high_runway_latitude" field if the given value is not nil.
func (ruo *RunwayUpdateOne) SetNillableHighRunwayLatitude(f *float64) *RunwayUpdateOne {
	if f != nil {
		ruo.SetHighRunwayLatitude(*f)
	}
	return ruo
}

// AddHighRunwayLatitude adds f to the "high_runway_latitude" field.
func (ruo *RunwayUpdateOne) AddHighRunwayLatitude(f float64) *RunwayUpdateOne {
	ruo.mutation.AddHighRunwayLatitude(f)
	return ruo
}

// ClearHighRunwayLatitude clears the value of the "high_runway_latitude" field.
func (ruo *RunwayUpdateOne) ClearHighRunwayLatitude() *RunwayUpdateOne {
	ruo.mutation.ClearHighRunwayLatitude()
	return ruo
}

// SetHighRunwayLongitude sets the "high_runway_longitude" field.
func (ruo *RunwayUpdateOne) SetHighRunwayLongitude(f float64) *RunwayUpdateOne {
	ruo.mutation.ResetHighRunwayLongitude()
	ruo.mutation.SetHighRunwayLongitude(f)
	return ruo
}

// SetNillableHighRunwayLongitude sets the "high_runway_longitude" field if the given value is not nil.
func (ruo *RunwayUpdateOne) SetNillableHighRunwayLongitude(f *float64) *RunwayUpdateOne {
	if f != nil {
		ruo.SetHighRunwayLongitude(*f)
	}
	return ruo
}

// AddHighRunwayLongitude adds f to the "high_runway_longitude" field.
func (ruo *RunwayUpdateOne) AddHighRunwayLongitude(f float64) *RunwayUpdateOne {
	ruo.mutation.AddHighRunwayLongitude(f)
	return ruo
}

// ClearHighRunwayLongitude clears the value of the "high_runway_longitude" field.
func (ruo *RunwayUpdateOne) ClearHighRunwayLongitude() *RunwayUpdateOne {
	ruo.mutation.ClearHighRunwayLongitude()
	return ruo
}

// SetHighRunwayElevation sets the "high_runway_elevation" field.
func (ruo *RunwayUpdateOne) SetHighRunwayElevation(i int) *RunwayUpdateOne {
	ruo.mutation.ResetHighRunwayElevation()
	ruo.mutation.SetHighRunwayElevation(i)
	return ruo
}

// SetNillableHighRunwayElevation sets the "high_runway_elevation" field if the given value is not nil.
func (ruo *RunwayUpdateOne) SetNillableHighRunwayElevation(i *int) *RunwayUpdateOne {
	if i != nil {
		ruo.SetHighRunwayElevation(*i)
	}
	return ruo
}

// AddHighRunwayElevation adds i to the "high_runway_elevation" field.
func (ruo *RunwayUpdateOne) AddHighRunwayElevation(i int) *RunwayUpdateOne {
	ruo.mutation.AddHighRunwayElevation(i)
	return ruo
}

// ClearHighRunwayElevation clears the value of the "high_runway_elevation" field.
func (ruo *RunwayUpdateOne) ClearHighRunwayElevation() *RunwayUpdateOne {
	ruo.mutation.ClearHighRunwayElevation()
	return ruo
}

// SetHighRunwayHeading sets the "high_runway_heading" field.
func (ruo *RunwayUpdateOne) SetHighRunwayHeading(f float64) *RunwayUpdateOne {
	ruo.mutation.ResetHighRunwayHeading()
	ruo.mutation.SetHighRunwayHeading(f)
	return ruo
}

// SetNillableHighRunwayHeading sets the "high_runway_heading" field if the given value is not nil.
func (ruo *RunwayUpdateOne) SetNillableHighRunwayHeading(f *float64) *RunwayUpdateOne {
	if f != nil {
		ruo.SetHighRunwayHeading(*f)
	}
	return ruo
}

// AddHighRunwayHeading adds f to the "high_runway_heading" field.
func (ruo *RunwayUpdateOne) AddHighRunwayHeading(f float64) *RunwayUpdateOne {
	ruo.mutation.AddHighRunwayHeading(f)
	return ruo
}

// ClearHighRunwayHeading clears the value of the "high_runway_heading" field.
func (ruo *RunwayUpdateOne) ClearHighRunwayHeading() *RunwayUpdateOne {
	ruo.mutation.ClearHighRunwayHeading()
	return ruo
}

// SetHighRunwayDisplacedThreshold sets the "high_runway_displaced_threshold" field.
func (ruo *RunwayUpdateOne) SetHighRunwayDisplacedThreshold(i int) *RunwayUpdateOne {
	ruo.mutation.ResetHighRunwayDisplacedThreshold()
	ruo.mutation.SetHighRunwayDisplacedThreshold(i)
	return ruo
}

// SetNillableHighRunwayDisplacedThreshold sets the "high_runway_displaced_threshold" field if the given value is not nil.
func (ruo *RunwayUpdateOne) SetNillableHighRunwayDisplacedThreshold(i *int) *RunwayUpdateOne {
	if i != nil {
		ruo.SetHighRunwayDisplacedThreshold(*i)
	}
	return ruo
}

// AddHighRunwayDisplacedThreshold adds i to the "high_runway_displaced_threshold" field.
func (ruo *RunwayUpdateOne) AddHighRunwayDisplacedThreshold(i int) *RunwayUpdateOne {
	ruo.mutation.AddHighRunwayDisplacedThreshold(i)
	return ruo
}

// ClearHighRunwayDisplacedThreshold clears the value of the "high_runway_displaced_threshold" field.
func (ruo *RunwayUpdateOne) ClearHighRunwayDisplacedThreshold() *RunwayUpdateOne {
	ruo.mutation.ClearHighRunwayDisplacedThreshold()
	return ruo
}

// SetAirportID sets the "airport" edge to the Airport entity by ID.
func (ruo *RunwayUpdateOne) SetAirportID(id uuid.UUID) *RunwayUpdateOne {
	ruo.mutation.SetAirportID(id)
	return ruo
}

// SetNillableAirportID sets the "airport" edge to the Airport entity by ID if the given value is not nil.
func (ruo *RunwayUpdateOne) SetNillableAirportID(id *uuid.UUID) *RunwayUpdateOne {
	if id != nil {
		ruo = ruo.SetAirportID(*id)
	}
	return ruo
}

// SetAirport sets the "airport" edge to the Airport entity.
func (ruo *RunwayUpdateOne) SetAirport(a *Airport) *RunwayUpdateOne {
	return ruo.SetAirportID(a.ID)
}

// Mutation returns the RunwayMutation object of the builder.
func (ruo *RunwayUpdateOne) Mutation() *RunwayMutation {
	return ruo.mutation
}

// ClearAirport clears the "airport" edge to the Airport entity.
func (ruo *RunwayUpdateOne) ClearAirport() *RunwayUpdateOne {
	ruo.mutation.ClearAirport()
	return ruo
}

// Where appends a list predicates to the RunwayUpdate builder.
func (ruo *RunwayUpdateOne) Where(ps ...predicate.Runway) *RunwayUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RunwayUpdateOne) Select(field string, fields ...string) *RunwayUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Runway entity.
func (ruo *RunwayUpdateOne) Save(ctx context.Context) (*Runway, error) {
	return withHooks[*Runway, RunwayMutation](ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RunwayUpdateOne) SaveX(ctx context.Context) *Runway {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RunwayUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RunwayUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ruo *RunwayUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RunwayUpdateOne {
	ruo.modifiers = append(ruo.modifiers, modifiers...)
	return ruo
}

func (ruo *RunwayUpdateOne) sqlSave(ctx context.Context) (_node *Runway, err error) {
	_spec := sqlgraph.NewUpdateSpec(runway.Table, runway.Columns, sqlgraph.NewFieldSpec(runway.FieldID, field.TypeUUID))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Runway.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, runway.FieldID)
		for _, f := range fields {
			if !runway.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != runway.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.ImportID(); ok {
		_spec.SetField(runway.FieldImportID, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedImportID(); ok {
		_spec.AddField(runway.FieldImportID, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.Hash(); ok {
		_spec.SetField(runway.FieldHash, field.TypeString, value)
	}
	if value, ok := ruo.mutation.ImportFlag(); ok {
		_spec.SetField(runway.FieldImportFlag, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.LastUpdated(); ok {
		_spec.SetField(runway.FieldLastUpdated, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Length(); ok {
		_spec.SetField(runway.FieldLength, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedLength(); ok {
		_spec.AddField(runway.FieldLength, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.Width(); ok {
		_spec.SetField(runway.FieldWidth, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedWidth(); ok {
		_spec.AddField(runway.FieldWidth, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.Surface(); ok {
		_spec.SetField(runway.FieldSurface, field.TypeString, value)
	}
	if ruo.mutation.SurfaceCleared() {
		_spec.ClearField(runway.FieldSurface, field.TypeString)
	}
	if value, ok := ruo.mutation.Lighted(); ok {
		_spec.SetField(runway.FieldLighted, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.Closed(); ok {
		_spec.SetField(runway.FieldClosed, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.LowRunwayIdentifier(); ok {
		_spec.SetField(runway.FieldLowRunwayIdentifier, field.TypeString, value)
	}
	if value, ok := ruo.mutation.LowRunwayLatitude(); ok {
		_spec.SetField(runway.FieldLowRunwayLatitude, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.AddedLowRunwayLatitude(); ok {
		_spec.AddField(runway.FieldLowRunwayLatitude, field.TypeFloat64, value)
	}
	if ruo.mutation.LowRunwayLatitudeCleared() {
		_spec.ClearField(runway.FieldLowRunwayLatitude, field.TypeFloat64)
	}
	if value, ok := ruo.mutation.LowRunwayLongitude(); ok {
		_spec.SetField(runway.FieldLowRunwayLongitude, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.AddedLowRunwayLongitude(); ok {
		_spec.AddField(runway.FieldLowRunwayLongitude, field.TypeFloat64, value)
	}
	if ruo.mutation.LowRunwayLongitudeCleared() {
		_spec.ClearField(runway.FieldLowRunwayLongitude, field.TypeFloat64)
	}
	if value, ok := ruo.mutation.LowRunwayElevation(); ok {
		_spec.SetField(runway.FieldLowRunwayElevation, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedLowRunwayElevation(); ok {
		_spec.AddField(runway.FieldLowRunwayElevation, field.TypeInt, value)
	}
	if ruo.mutation.LowRunwayElevationCleared() {
		_spec.ClearField(runway.FieldLowRunwayElevation, field.TypeInt)
	}
	if value, ok := ruo.mutation.LowRunwayHeading(); ok {
		_spec.SetField(runway.FieldLowRunwayHeading, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.AddedLowRunwayHeading(); ok {
		_spec.AddField(runway.FieldLowRunwayHeading, field.TypeFloat64, value)
	}
	if ruo.mutation.LowRunwayHeadingCleared() {
		_spec.ClearField(runway.FieldLowRunwayHeading, field.TypeFloat64)
	}
	if value, ok := ruo.mutation.LowRunwayDisplacedThreshold(); ok {
		_spec.SetField(runway.FieldLowRunwayDisplacedThreshold, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedLowRunwayDisplacedThreshold(); ok {
		_spec.AddField(runway.FieldLowRunwayDisplacedThreshold, field.TypeInt, value)
	}
	if ruo.mutation.LowRunwayDisplacedThresholdCleared() {
		_spec.ClearField(runway.FieldLowRunwayDisplacedThreshold, field.TypeInt)
	}
	if value, ok := ruo.mutation.HighRunwayIdentifier(); ok {
		_spec.SetField(runway.FieldHighRunwayIdentifier, field.TypeString, value)
	}
	if value, ok := ruo.mutation.HighRunwayLatitude(); ok {
		_spec.SetField(runway.FieldHighRunwayLatitude, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.AddedHighRunwayLatitude(); ok {
		_spec.AddField(runway.FieldHighRunwayLatitude, field.TypeFloat64, value)
	}
	if ruo.mutation.HighRunwayLatitudeCleared() {
		_spec.ClearField(runway.FieldHighRunwayLatitude, field.TypeFloat64)
	}
	if value, ok := ruo.mutation.HighRunwayLongitude(); ok {
		_spec.SetField(runway.FieldHighRunwayLongitude, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.AddedHighRunwayLongitude(); ok {
		_spec.AddField(runway.FieldHighRunwayLongitude, field.TypeFloat64, value)
	}
	if ruo.mutation.HighRunwayLongitudeCleared() {
		_spec.ClearField(runway.FieldHighRunwayLongitude, field.TypeFloat64)
	}
	if value, ok := ruo.mutation.HighRunwayElevation(); ok {
		_spec.SetField(runway.FieldHighRunwayElevation, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedHighRunwayElevation(); ok {
		_spec.AddField(runway.FieldHighRunwayElevation, field.TypeInt, value)
	}
	if ruo.mutation.HighRunwayElevationCleared() {
		_spec.ClearField(runway.FieldHighRunwayElevation, field.TypeInt)
	}
	if value, ok := ruo.mutation.HighRunwayHeading(); ok {
		_spec.SetField(runway.FieldHighRunwayHeading, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.AddedHighRunwayHeading(); ok {
		_spec.AddField(runway.FieldHighRunwayHeading, field.TypeFloat64, value)
	}
	if ruo.mutation.HighRunwayHeadingCleared() {
		_spec.ClearField(runway.FieldHighRunwayHeading, field.TypeFloat64)
	}
	if value, ok := ruo.mutation.HighRunwayDisplacedThreshold(); ok {
		_spec.SetField(runway.FieldHighRunwayDisplacedThreshold, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedHighRunwayDisplacedThreshold(); ok {
		_spec.AddField(runway.FieldHighRunwayDisplacedThreshold, field.TypeInt, value)
	}
	if ruo.mutation.HighRunwayDisplacedThresholdCleared() {
		_spec.ClearField(runway.FieldHighRunwayDisplacedThreshold, field.TypeInt)
	}
	if ruo.mutation.AirportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   runway.AirportTable,
			Columns: []string{runway.AirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airport.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.AirportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   runway.AirportTable,
			Columns: []string{runway.AirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ruo.modifiers...)
	_node = &Runway{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{runway.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
