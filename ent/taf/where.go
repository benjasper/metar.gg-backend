// Code generated by ent, DO NOT EDIT.

package taf

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"metar.gg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RawText applies equality check predicate on the "raw_text" field. It's identical to RawTextEQ.
func RawText(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRawText), v))
	})
}

// IssueTime applies equality check predicate on the "issue_time" field. It's identical to IssueTimeEQ.
func IssueTime(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIssueTime), v))
	})
}

// BulletinTime applies equality check predicate on the "bulletin_time" field. It's identical to BulletinTimeEQ.
func BulletinTime(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBulletinTime), v))
	})
}

// ValidFromTime applies equality check predicate on the "valid_from_time" field. It's identical to ValidFromTimeEQ.
func ValidFromTime(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValidFromTime), v))
	})
}

// ValidToTime applies equality check predicate on the "valid_to_time" field. It's identical to ValidToTimeEQ.
func ValidToTime(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValidToTime), v))
	})
}

// Remarks applies equality check predicate on the "remarks" field. It's identical to RemarksEQ.
func Remarks(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHash), v))
	})
}

// RawTextEQ applies the EQ predicate on the "raw_text" field.
func RawTextEQ(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRawText), v))
	})
}

// RawTextNEQ applies the NEQ predicate on the "raw_text" field.
func RawTextNEQ(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRawText), v))
	})
}

// RawTextIn applies the In predicate on the "raw_text" field.
func RawTextIn(vs ...string) predicate.Taf {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRawText), v...))
	})
}

// RawTextNotIn applies the NotIn predicate on the "raw_text" field.
func RawTextNotIn(vs ...string) predicate.Taf {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRawText), v...))
	})
}

// RawTextGT applies the GT predicate on the "raw_text" field.
func RawTextGT(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRawText), v))
	})
}

// RawTextGTE applies the GTE predicate on the "raw_text" field.
func RawTextGTE(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRawText), v))
	})
}

// RawTextLT applies the LT predicate on the "raw_text" field.
func RawTextLT(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRawText), v))
	})
}

// RawTextLTE applies the LTE predicate on the "raw_text" field.
func RawTextLTE(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRawText), v))
	})
}

// RawTextContains applies the Contains predicate on the "raw_text" field.
func RawTextContains(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRawText), v))
	})
}

// RawTextHasPrefix applies the HasPrefix predicate on the "raw_text" field.
func RawTextHasPrefix(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRawText), v))
	})
}

// RawTextHasSuffix applies the HasSuffix predicate on the "raw_text" field.
func RawTextHasSuffix(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRawText), v))
	})
}

// RawTextEqualFold applies the EqualFold predicate on the "raw_text" field.
func RawTextEqualFold(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRawText), v))
	})
}

// RawTextContainsFold applies the ContainsFold predicate on the "raw_text" field.
func RawTextContainsFold(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRawText), v))
	})
}

// IssueTimeEQ applies the EQ predicate on the "issue_time" field.
func IssueTimeEQ(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIssueTime), v))
	})
}

// IssueTimeNEQ applies the NEQ predicate on the "issue_time" field.
func IssueTimeNEQ(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIssueTime), v))
	})
}

// IssueTimeIn applies the In predicate on the "issue_time" field.
func IssueTimeIn(vs ...time.Time) predicate.Taf {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIssueTime), v...))
	})
}

// IssueTimeNotIn applies the NotIn predicate on the "issue_time" field.
func IssueTimeNotIn(vs ...time.Time) predicate.Taf {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIssueTime), v...))
	})
}

// IssueTimeGT applies the GT predicate on the "issue_time" field.
func IssueTimeGT(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIssueTime), v))
	})
}

// IssueTimeGTE applies the GTE predicate on the "issue_time" field.
func IssueTimeGTE(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIssueTime), v))
	})
}

// IssueTimeLT applies the LT predicate on the "issue_time" field.
func IssueTimeLT(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIssueTime), v))
	})
}

// IssueTimeLTE applies the LTE predicate on the "issue_time" field.
func IssueTimeLTE(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIssueTime), v))
	})
}

// BulletinTimeEQ applies the EQ predicate on the "bulletin_time" field.
func BulletinTimeEQ(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBulletinTime), v))
	})
}

// BulletinTimeNEQ applies the NEQ predicate on the "bulletin_time" field.
func BulletinTimeNEQ(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBulletinTime), v))
	})
}

// BulletinTimeIn applies the In predicate on the "bulletin_time" field.
func BulletinTimeIn(vs ...time.Time) predicate.Taf {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBulletinTime), v...))
	})
}

// BulletinTimeNotIn applies the NotIn predicate on the "bulletin_time" field.
func BulletinTimeNotIn(vs ...time.Time) predicate.Taf {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBulletinTime), v...))
	})
}

// BulletinTimeGT applies the GT predicate on the "bulletin_time" field.
func BulletinTimeGT(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBulletinTime), v))
	})
}

// BulletinTimeGTE applies the GTE predicate on the "bulletin_time" field.
func BulletinTimeGTE(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBulletinTime), v))
	})
}

// BulletinTimeLT applies the LT predicate on the "bulletin_time" field.
func BulletinTimeLT(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBulletinTime), v))
	})
}

// BulletinTimeLTE applies the LTE predicate on the "bulletin_time" field.
func BulletinTimeLTE(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBulletinTime), v))
	})
}

// ValidFromTimeEQ applies the EQ predicate on the "valid_from_time" field.
func ValidFromTimeEQ(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValidFromTime), v))
	})
}

// ValidFromTimeNEQ applies the NEQ predicate on the "valid_from_time" field.
func ValidFromTimeNEQ(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldValidFromTime), v))
	})
}

// ValidFromTimeIn applies the In predicate on the "valid_from_time" field.
func ValidFromTimeIn(vs ...time.Time) predicate.Taf {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldValidFromTime), v...))
	})
}

// ValidFromTimeNotIn applies the NotIn predicate on the "valid_from_time" field.
func ValidFromTimeNotIn(vs ...time.Time) predicate.Taf {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldValidFromTime), v...))
	})
}

// ValidFromTimeGT applies the GT predicate on the "valid_from_time" field.
func ValidFromTimeGT(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldValidFromTime), v))
	})
}

// ValidFromTimeGTE applies the GTE predicate on the "valid_from_time" field.
func ValidFromTimeGTE(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldValidFromTime), v))
	})
}

// ValidFromTimeLT applies the LT predicate on the "valid_from_time" field.
func ValidFromTimeLT(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldValidFromTime), v))
	})
}

// ValidFromTimeLTE applies the LTE predicate on the "valid_from_time" field.
func ValidFromTimeLTE(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldValidFromTime), v))
	})
}

// ValidToTimeEQ applies the EQ predicate on the "valid_to_time" field.
func ValidToTimeEQ(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValidToTime), v))
	})
}

// ValidToTimeNEQ applies the NEQ predicate on the "valid_to_time" field.
func ValidToTimeNEQ(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldValidToTime), v))
	})
}

// ValidToTimeIn applies the In predicate on the "valid_to_time" field.
func ValidToTimeIn(vs ...time.Time) predicate.Taf {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldValidToTime), v...))
	})
}

// ValidToTimeNotIn applies the NotIn predicate on the "valid_to_time" field.
func ValidToTimeNotIn(vs ...time.Time) predicate.Taf {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldValidToTime), v...))
	})
}

// ValidToTimeGT applies the GT predicate on the "valid_to_time" field.
func ValidToTimeGT(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldValidToTime), v))
	})
}

// ValidToTimeGTE applies the GTE predicate on the "valid_to_time" field.
func ValidToTimeGTE(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldValidToTime), v))
	})
}

// ValidToTimeLT applies the LT predicate on the "valid_to_time" field.
func ValidToTimeLT(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldValidToTime), v))
	})
}

// ValidToTimeLTE applies the LTE predicate on the "valid_to_time" field.
func ValidToTimeLTE(v time.Time) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldValidToTime), v))
	})
}

// RemarksEQ applies the EQ predicate on the "remarks" field.
func RemarksEQ(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// RemarksNEQ applies the NEQ predicate on the "remarks" field.
func RemarksNEQ(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemarks), v))
	})
}

// RemarksIn applies the In predicate on the "remarks" field.
func RemarksIn(vs ...string) predicate.Taf {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRemarks), v...))
	})
}

// RemarksNotIn applies the NotIn predicate on the "remarks" field.
func RemarksNotIn(vs ...string) predicate.Taf {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRemarks), v...))
	})
}

// RemarksGT applies the GT predicate on the "remarks" field.
func RemarksGT(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemarks), v))
	})
}

// RemarksGTE applies the GTE predicate on the "remarks" field.
func RemarksGTE(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemarks), v))
	})
}

// RemarksLT applies the LT predicate on the "remarks" field.
func RemarksLT(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemarks), v))
	})
}

// RemarksLTE applies the LTE predicate on the "remarks" field.
func RemarksLTE(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemarks), v))
	})
}

// RemarksContains applies the Contains predicate on the "remarks" field.
func RemarksContains(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemarks), v))
	})
}

// RemarksHasPrefix applies the HasPrefix predicate on the "remarks" field.
func RemarksHasPrefix(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemarks), v))
	})
}

// RemarksHasSuffix applies the HasSuffix predicate on the "remarks" field.
func RemarksHasSuffix(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemarks), v))
	})
}

// RemarksEqualFold applies the EqualFold predicate on the "remarks" field.
func RemarksEqualFold(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemarks), v))
	})
}

// RemarksContainsFold applies the ContainsFold predicate on the "remarks" field.
func RemarksContainsFold(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemarks), v))
	})
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHash), v))
	})
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHash), v))
	})
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.Taf {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHash), v...))
	})
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.Taf {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHash), v...))
	})
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHash), v))
	})
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHash), v))
	})
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHash), v))
	})
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHash), v))
	})
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHash), v))
	})
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHash), v))
	})
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHash), v))
	})
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHash), v))
	})
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHash), v))
	})
}

// HasStation applies the HasEdge predicate on the "station" edge.
func HasStation() predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StationTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StationTable, StationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStationWith applies the HasEdge predicate on the "station" edge with a given conditions (other predicates).
func HasStationWith(preds ...predicate.Station) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StationTable, StationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSkyConditions applies the HasEdge predicate on the "sky_conditions" edge.
func HasSkyConditions() predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SkyConditionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SkyConditionsTable, SkyConditionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSkyConditionsWith applies the HasEdge predicate on the "sky_conditions" edge with a given conditions (other predicates).
func HasSkyConditionsWith(preds ...predicate.SkyCondition) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SkyConditionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SkyConditionsTable, SkyConditionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasForecast applies the HasEdge predicate on the "forecast" edge.
func HasForecast() predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ForecastTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ForecastTable, ForecastColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasForecastWith applies the HasEdge predicate on the "forecast" edge with a given conditions (other predicates).
func HasForecastWith(preds ...predicate.Forecast) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ForecastInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ForecastTable, ForecastColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Taf) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Taf) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Taf) predicate.Taf {
	return predicate.Taf(func(s *sql.Selector) {
		p(s.Not())
	})
}
