// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *Airport) Region(ctx context.Context) (*Region, error) {
	result, err := a.Edges.RegionOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryRegion().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *Airport) Country(ctx context.Context) (*Country, error) {
	result, err := a.Edges.CountryOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryCountry().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *Airport) Frequencies(ctx context.Context) (result []*Frequency, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedFrequencies(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.FrequenciesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryFrequencies().All(ctx)
	}
	return result, err
}

func (a *Airport) Station(ctx context.Context) (*WeatherStation, error) {
	result, err := a.Edges.StationOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryStation().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (f *Forecast) SkyConditions(ctx context.Context) (result []*SkyCondition, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedSkyConditions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.SkyConditionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QuerySkyConditions().All(ctx)
	}
	return result, err
}

func (f *Forecast) TurbulenceConditions(ctx context.Context) (result []*TurbulenceCondition, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedTurbulenceConditions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.TurbulenceConditionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryTurbulenceConditions().All(ctx)
	}
	return result, err
}

func (f *Forecast) IcingConditions(ctx context.Context) (result []*IcingCondition, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedIcingConditions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.IcingConditionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryIcingConditions().All(ctx)
	}
	return result, err
}

func (f *Forecast) TemperatureData(ctx context.Context) (result []*TemperatureData, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedTemperatureData(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.TemperatureDataOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryTemperatureData().All(ctx)
	}
	return result, err
}

func (f *Frequency) Airport(ctx context.Context) (*Airport, error) {
	result, err := f.Edges.AirportOrErr()
	if IsNotLoaded(err) {
		result, err = f.QueryAirport().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (m *Metar) Station(ctx context.Context) (*WeatherStation, error) {
	result, err := m.Edges.StationOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryStation().Only(ctx)
	}
	return result, err
}

func (m *Metar) SkyConditions(ctx context.Context) (result []*SkyCondition, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = m.NamedSkyConditions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = m.Edges.SkyConditionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = m.QuerySkyConditions().All(ctx)
	}
	return result, err
}

func (r *Runway) Airport(ctx context.Context) (*Airport, error) {
	result, err := r.Edges.AirportOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryAirport().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Taf) Station(ctx context.Context) (*WeatherStation, error) {
	result, err := t.Edges.StationOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryStation().Only(ctx)
	}
	return result, err
}

func (t *Taf) Forecast(ctx context.Context) (result []*Forecast, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedForecast(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.ForecastOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryForecast().All(ctx)
	}
	return result, err
}

func (ws *WeatherStation) Airport(ctx context.Context) (*Airport, error) {
	result, err := ws.Edges.AirportOrErr()
	if IsNotLoaded(err) {
		result, err = ws.QueryAirport().Only(ctx)
	}
	return result, MaskNotFound(err)
}
