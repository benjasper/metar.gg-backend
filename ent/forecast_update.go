// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"metar.gg/ent/forecast"
	"metar.gg/ent/icingcondition"
	"metar.gg/ent/predicate"
	"metar.gg/ent/skycondition"
	"metar.gg/ent/temperaturedata"
	"metar.gg/ent/turbulencecondition"
)

// ForecastUpdate is the builder for updating Forecast entities.
type ForecastUpdate struct {
	config
	hooks     []Hook
	mutation  *ForecastMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ForecastUpdate builder.
func (fu *ForecastUpdate) Where(ps ...predicate.Forecast) *ForecastUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetFromTime sets the "from_time" field.
func (fu *ForecastUpdate) SetFromTime(t time.Time) *ForecastUpdate {
	fu.mutation.SetFromTime(t)
	return fu
}

// SetToTime sets the "to_time" field.
func (fu *ForecastUpdate) SetToTime(t time.Time) *ForecastUpdate {
	fu.mutation.SetToTime(t)
	return fu
}

// SetChangeIndicator sets the "change_indicator" field.
func (fu *ForecastUpdate) SetChangeIndicator(fi forecast.ChangeIndicator) *ForecastUpdate {
	fu.mutation.SetChangeIndicator(fi)
	return fu
}

// SetNillableChangeIndicator sets the "change_indicator" field if the given value is not nil.
func (fu *ForecastUpdate) SetNillableChangeIndicator(fi *forecast.ChangeIndicator) *ForecastUpdate {
	if fi != nil {
		fu.SetChangeIndicator(*fi)
	}
	return fu
}

// ClearChangeIndicator clears the value of the "change_indicator" field.
func (fu *ForecastUpdate) ClearChangeIndicator() *ForecastUpdate {
	fu.mutation.ClearChangeIndicator()
	return fu
}

// SetChangeTime sets the "change_time" field.
func (fu *ForecastUpdate) SetChangeTime(t time.Time) *ForecastUpdate {
	fu.mutation.SetChangeTime(t)
	return fu
}

// SetNillableChangeTime sets the "change_time" field if the given value is not nil.
func (fu *ForecastUpdate) SetNillableChangeTime(t *time.Time) *ForecastUpdate {
	if t != nil {
		fu.SetChangeTime(*t)
	}
	return fu
}

// ClearChangeTime clears the value of the "change_time" field.
func (fu *ForecastUpdate) ClearChangeTime() *ForecastUpdate {
	fu.mutation.ClearChangeTime()
	return fu
}

// SetChangeProbability sets the "change_probability" field.
func (fu *ForecastUpdate) SetChangeProbability(i int) *ForecastUpdate {
	fu.mutation.ResetChangeProbability()
	fu.mutation.SetChangeProbability(i)
	return fu
}

// SetNillableChangeProbability sets the "change_probability" field if the given value is not nil.
func (fu *ForecastUpdate) SetNillableChangeProbability(i *int) *ForecastUpdate {
	if i != nil {
		fu.SetChangeProbability(*i)
	}
	return fu
}

// AddChangeProbability adds i to the "change_probability" field.
func (fu *ForecastUpdate) AddChangeProbability(i int) *ForecastUpdate {
	fu.mutation.AddChangeProbability(i)
	return fu
}

// ClearChangeProbability clears the value of the "change_probability" field.
func (fu *ForecastUpdate) ClearChangeProbability() *ForecastUpdate {
	fu.mutation.ClearChangeProbability()
	return fu
}

// SetWindDirection sets the "wind_direction" field.
func (fu *ForecastUpdate) SetWindDirection(i int) *ForecastUpdate {
	fu.mutation.ResetWindDirection()
	fu.mutation.SetWindDirection(i)
	return fu
}

// SetNillableWindDirection sets the "wind_direction" field if the given value is not nil.
func (fu *ForecastUpdate) SetNillableWindDirection(i *int) *ForecastUpdate {
	if i != nil {
		fu.SetWindDirection(*i)
	}
	return fu
}

// AddWindDirection adds i to the "wind_direction" field.
func (fu *ForecastUpdate) AddWindDirection(i int) *ForecastUpdate {
	fu.mutation.AddWindDirection(i)
	return fu
}

// ClearWindDirection clears the value of the "wind_direction" field.
func (fu *ForecastUpdate) ClearWindDirection() *ForecastUpdate {
	fu.mutation.ClearWindDirection()
	return fu
}

// SetWindSpeed sets the "wind_speed" field.
func (fu *ForecastUpdate) SetWindSpeed(i int) *ForecastUpdate {
	fu.mutation.ResetWindSpeed()
	fu.mutation.SetWindSpeed(i)
	return fu
}

// SetNillableWindSpeed sets the "wind_speed" field if the given value is not nil.
func (fu *ForecastUpdate) SetNillableWindSpeed(i *int) *ForecastUpdate {
	if i != nil {
		fu.SetWindSpeed(*i)
	}
	return fu
}

// AddWindSpeed adds i to the "wind_speed" field.
func (fu *ForecastUpdate) AddWindSpeed(i int) *ForecastUpdate {
	fu.mutation.AddWindSpeed(i)
	return fu
}

// ClearWindSpeed clears the value of the "wind_speed" field.
func (fu *ForecastUpdate) ClearWindSpeed() *ForecastUpdate {
	fu.mutation.ClearWindSpeed()
	return fu
}

// SetWindGust sets the "wind_gust" field.
func (fu *ForecastUpdate) SetWindGust(i int) *ForecastUpdate {
	fu.mutation.ResetWindGust()
	fu.mutation.SetWindGust(i)
	return fu
}

// SetNillableWindGust sets the "wind_gust" field if the given value is not nil.
func (fu *ForecastUpdate) SetNillableWindGust(i *int) *ForecastUpdate {
	if i != nil {
		fu.SetWindGust(*i)
	}
	return fu
}

// AddWindGust adds i to the "wind_gust" field.
func (fu *ForecastUpdate) AddWindGust(i int) *ForecastUpdate {
	fu.mutation.AddWindGust(i)
	return fu
}

// ClearWindGust clears the value of the "wind_gust" field.
func (fu *ForecastUpdate) ClearWindGust() *ForecastUpdate {
	fu.mutation.ClearWindGust()
	return fu
}

// SetWindShearHeight sets the "wind_shear_height" field.
func (fu *ForecastUpdate) SetWindShearHeight(i int) *ForecastUpdate {
	fu.mutation.ResetWindShearHeight()
	fu.mutation.SetWindShearHeight(i)
	return fu
}

// SetNillableWindShearHeight sets the "wind_shear_height" field if the given value is not nil.
func (fu *ForecastUpdate) SetNillableWindShearHeight(i *int) *ForecastUpdate {
	if i != nil {
		fu.SetWindShearHeight(*i)
	}
	return fu
}

// AddWindShearHeight adds i to the "wind_shear_height" field.
func (fu *ForecastUpdate) AddWindShearHeight(i int) *ForecastUpdate {
	fu.mutation.AddWindShearHeight(i)
	return fu
}

// ClearWindShearHeight clears the value of the "wind_shear_height" field.
func (fu *ForecastUpdate) ClearWindShearHeight() *ForecastUpdate {
	fu.mutation.ClearWindShearHeight()
	return fu
}

// SetWindShearDirection sets the "wind_shear_direction" field.
func (fu *ForecastUpdate) SetWindShearDirection(i int) *ForecastUpdate {
	fu.mutation.ResetWindShearDirection()
	fu.mutation.SetWindShearDirection(i)
	return fu
}

// SetNillableWindShearDirection sets the "wind_shear_direction" field if the given value is not nil.
func (fu *ForecastUpdate) SetNillableWindShearDirection(i *int) *ForecastUpdate {
	if i != nil {
		fu.SetWindShearDirection(*i)
	}
	return fu
}

// AddWindShearDirection adds i to the "wind_shear_direction" field.
func (fu *ForecastUpdate) AddWindShearDirection(i int) *ForecastUpdate {
	fu.mutation.AddWindShearDirection(i)
	return fu
}

// ClearWindShearDirection clears the value of the "wind_shear_direction" field.
func (fu *ForecastUpdate) ClearWindShearDirection() *ForecastUpdate {
	fu.mutation.ClearWindShearDirection()
	return fu
}

// SetWindShearSpeed sets the "wind_shear_speed" field.
func (fu *ForecastUpdate) SetWindShearSpeed(i int) *ForecastUpdate {
	fu.mutation.ResetWindShearSpeed()
	fu.mutation.SetWindShearSpeed(i)
	return fu
}

// SetNillableWindShearSpeed sets the "wind_shear_speed" field if the given value is not nil.
func (fu *ForecastUpdate) SetNillableWindShearSpeed(i *int) *ForecastUpdate {
	if i != nil {
		fu.SetWindShearSpeed(*i)
	}
	return fu
}

// AddWindShearSpeed adds i to the "wind_shear_speed" field.
func (fu *ForecastUpdate) AddWindShearSpeed(i int) *ForecastUpdate {
	fu.mutation.AddWindShearSpeed(i)
	return fu
}

// ClearWindShearSpeed clears the value of the "wind_shear_speed" field.
func (fu *ForecastUpdate) ClearWindShearSpeed() *ForecastUpdate {
	fu.mutation.ClearWindShearSpeed()
	return fu
}

// SetVisibilityHorizontal sets the "visibility_horizontal" field.
func (fu *ForecastUpdate) SetVisibilityHorizontal(f float64) *ForecastUpdate {
	fu.mutation.ResetVisibilityHorizontal()
	fu.mutation.SetVisibilityHorizontal(f)
	return fu
}

// SetNillableVisibilityHorizontal sets the "visibility_horizontal" field if the given value is not nil.
func (fu *ForecastUpdate) SetNillableVisibilityHorizontal(f *float64) *ForecastUpdate {
	if f != nil {
		fu.SetVisibilityHorizontal(*f)
	}
	return fu
}

// AddVisibilityHorizontal adds f to the "visibility_horizontal" field.
func (fu *ForecastUpdate) AddVisibilityHorizontal(f float64) *ForecastUpdate {
	fu.mutation.AddVisibilityHorizontal(f)
	return fu
}

// ClearVisibilityHorizontal clears the value of the "visibility_horizontal" field.
func (fu *ForecastUpdate) ClearVisibilityHorizontal() *ForecastUpdate {
	fu.mutation.ClearVisibilityHorizontal()
	return fu
}

// SetVisibilityVertical sets the "visibility_vertical" field.
func (fu *ForecastUpdate) SetVisibilityVertical(i int) *ForecastUpdate {
	fu.mutation.ResetVisibilityVertical()
	fu.mutation.SetVisibilityVertical(i)
	return fu
}

// SetNillableVisibilityVertical sets the "visibility_vertical" field if the given value is not nil.
func (fu *ForecastUpdate) SetNillableVisibilityVertical(i *int) *ForecastUpdate {
	if i != nil {
		fu.SetVisibilityVertical(*i)
	}
	return fu
}

// AddVisibilityVertical adds i to the "visibility_vertical" field.
func (fu *ForecastUpdate) AddVisibilityVertical(i int) *ForecastUpdate {
	fu.mutation.AddVisibilityVertical(i)
	return fu
}

// ClearVisibilityVertical clears the value of the "visibility_vertical" field.
func (fu *ForecastUpdate) ClearVisibilityVertical() *ForecastUpdate {
	fu.mutation.ClearVisibilityVertical()
	return fu
}

// SetAltimeter sets the "altimeter" field.
func (fu *ForecastUpdate) SetAltimeter(f float64) *ForecastUpdate {
	fu.mutation.ResetAltimeter()
	fu.mutation.SetAltimeter(f)
	return fu
}

// SetNillableAltimeter sets the "altimeter" field if the given value is not nil.
func (fu *ForecastUpdate) SetNillableAltimeter(f *float64) *ForecastUpdate {
	if f != nil {
		fu.SetAltimeter(*f)
	}
	return fu
}

// AddAltimeter adds f to the "altimeter" field.
func (fu *ForecastUpdate) AddAltimeter(f float64) *ForecastUpdate {
	fu.mutation.AddAltimeter(f)
	return fu
}

// ClearAltimeter clears the value of the "altimeter" field.
func (fu *ForecastUpdate) ClearAltimeter() *ForecastUpdate {
	fu.mutation.ClearAltimeter()
	return fu
}

// SetWeather sets the "weather" field.
func (fu *ForecastUpdate) SetWeather(s string) *ForecastUpdate {
	fu.mutation.SetWeather(s)
	return fu
}

// SetNillableWeather sets the "weather" field if the given value is not nil.
func (fu *ForecastUpdate) SetNillableWeather(s *string) *ForecastUpdate {
	if s != nil {
		fu.SetWeather(*s)
	}
	return fu
}

// ClearWeather clears the value of the "weather" field.
func (fu *ForecastUpdate) ClearWeather() *ForecastUpdate {
	fu.mutation.ClearWeather()
	return fu
}

// SetNotDecoded sets the "not_decoded" field.
func (fu *ForecastUpdate) SetNotDecoded(s string) *ForecastUpdate {
	fu.mutation.SetNotDecoded(s)
	return fu
}

// SetNillableNotDecoded sets the "not_decoded" field if the given value is not nil.
func (fu *ForecastUpdate) SetNillableNotDecoded(s *string) *ForecastUpdate {
	if s != nil {
		fu.SetNotDecoded(*s)
	}
	return fu
}

// ClearNotDecoded clears the value of the "not_decoded" field.
func (fu *ForecastUpdate) ClearNotDecoded() *ForecastUpdate {
	fu.mutation.ClearNotDecoded()
	return fu
}

// AddSkyConditionIDs adds the "sky_conditions" edge to the SkyCondition entity by IDs.
func (fu *ForecastUpdate) AddSkyConditionIDs(ids ...uuid.UUID) *ForecastUpdate {
	fu.mutation.AddSkyConditionIDs(ids...)
	return fu
}

// AddSkyConditions adds the "sky_conditions" edges to the SkyCondition entity.
func (fu *ForecastUpdate) AddSkyConditions(s ...*SkyCondition) *ForecastUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fu.AddSkyConditionIDs(ids...)
}

// AddTurbulenceConditionIDs adds the "turbulence_conditions" edge to the TurbulenceCondition entity by IDs.
func (fu *ForecastUpdate) AddTurbulenceConditionIDs(ids ...uuid.UUID) *ForecastUpdate {
	fu.mutation.AddTurbulenceConditionIDs(ids...)
	return fu
}

// AddTurbulenceConditions adds the "turbulence_conditions" edges to the TurbulenceCondition entity.
func (fu *ForecastUpdate) AddTurbulenceConditions(t ...*TurbulenceCondition) *ForecastUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return fu.AddTurbulenceConditionIDs(ids...)
}

// AddIcingConditionIDs adds the "icing_conditions" edge to the IcingCondition entity by IDs.
func (fu *ForecastUpdate) AddIcingConditionIDs(ids ...uuid.UUID) *ForecastUpdate {
	fu.mutation.AddIcingConditionIDs(ids...)
	return fu
}

// AddIcingConditions adds the "icing_conditions" edges to the IcingCondition entity.
func (fu *ForecastUpdate) AddIcingConditions(i ...*IcingCondition) *ForecastUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fu.AddIcingConditionIDs(ids...)
}

// AddTemperatureDatumIDs adds the "temperature_data" edge to the TemperatureData entity by IDs.
func (fu *ForecastUpdate) AddTemperatureDatumIDs(ids ...uuid.UUID) *ForecastUpdate {
	fu.mutation.AddTemperatureDatumIDs(ids...)
	return fu
}

// AddTemperatureData adds the "temperature_data" edges to the TemperatureData entity.
func (fu *ForecastUpdate) AddTemperatureData(t ...*TemperatureData) *ForecastUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return fu.AddTemperatureDatumIDs(ids...)
}

// Mutation returns the ForecastMutation object of the builder.
func (fu *ForecastUpdate) Mutation() *ForecastMutation {
	return fu.mutation
}

// ClearSkyConditions clears all "sky_conditions" edges to the SkyCondition entity.
func (fu *ForecastUpdate) ClearSkyConditions() *ForecastUpdate {
	fu.mutation.ClearSkyConditions()
	return fu
}

// RemoveSkyConditionIDs removes the "sky_conditions" edge to SkyCondition entities by IDs.
func (fu *ForecastUpdate) RemoveSkyConditionIDs(ids ...uuid.UUID) *ForecastUpdate {
	fu.mutation.RemoveSkyConditionIDs(ids...)
	return fu
}

// RemoveSkyConditions removes "sky_conditions" edges to SkyCondition entities.
func (fu *ForecastUpdate) RemoveSkyConditions(s ...*SkyCondition) *ForecastUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fu.RemoveSkyConditionIDs(ids...)
}

// ClearTurbulenceConditions clears all "turbulence_conditions" edges to the TurbulenceCondition entity.
func (fu *ForecastUpdate) ClearTurbulenceConditions() *ForecastUpdate {
	fu.mutation.ClearTurbulenceConditions()
	return fu
}

// RemoveTurbulenceConditionIDs removes the "turbulence_conditions" edge to TurbulenceCondition entities by IDs.
func (fu *ForecastUpdate) RemoveTurbulenceConditionIDs(ids ...uuid.UUID) *ForecastUpdate {
	fu.mutation.RemoveTurbulenceConditionIDs(ids...)
	return fu
}

// RemoveTurbulenceConditions removes "turbulence_conditions" edges to TurbulenceCondition entities.
func (fu *ForecastUpdate) RemoveTurbulenceConditions(t ...*TurbulenceCondition) *ForecastUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return fu.RemoveTurbulenceConditionIDs(ids...)
}

// ClearIcingConditions clears all "icing_conditions" edges to the IcingCondition entity.
func (fu *ForecastUpdate) ClearIcingConditions() *ForecastUpdate {
	fu.mutation.ClearIcingConditions()
	return fu
}

// RemoveIcingConditionIDs removes the "icing_conditions" edge to IcingCondition entities by IDs.
func (fu *ForecastUpdate) RemoveIcingConditionIDs(ids ...uuid.UUID) *ForecastUpdate {
	fu.mutation.RemoveIcingConditionIDs(ids...)
	return fu
}

// RemoveIcingConditions removes "icing_conditions" edges to IcingCondition entities.
func (fu *ForecastUpdate) RemoveIcingConditions(i ...*IcingCondition) *ForecastUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fu.RemoveIcingConditionIDs(ids...)
}

// ClearTemperatureData clears all "temperature_data" edges to the TemperatureData entity.
func (fu *ForecastUpdate) ClearTemperatureData() *ForecastUpdate {
	fu.mutation.ClearTemperatureData()
	return fu
}

// RemoveTemperatureDatumIDs removes the "temperature_data" edge to TemperatureData entities by IDs.
func (fu *ForecastUpdate) RemoveTemperatureDatumIDs(ids ...uuid.UUID) *ForecastUpdate {
	fu.mutation.RemoveTemperatureDatumIDs(ids...)
	return fu
}

// RemoveTemperatureData removes "temperature_data" edges to TemperatureData entities.
func (fu *ForecastUpdate) RemoveTemperatureData(t ...*TemperatureData) *ForecastUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return fu.RemoveTemperatureDatumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *ForecastUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ForecastMutation](ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *ForecastUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *ForecastUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *ForecastUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *ForecastUpdate) check() error {
	if v, ok := fu.mutation.ChangeIndicator(); ok {
		if err := forecast.ChangeIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "change_indicator", err: fmt.Errorf(`ent: validator failed for field "Forecast.change_indicator": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fu *ForecastUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ForecastUpdate {
	fu.modifiers = append(fu.modifiers, modifiers...)
	return fu
}

func (fu *ForecastUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(forecast.Table, forecast.Columns, sqlgraph.NewFieldSpec(forecast.FieldID, field.TypeUUID))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.FromTime(); ok {
		_spec.SetField(forecast.FieldFromTime, field.TypeTime, value)
	}
	if value, ok := fu.mutation.ToTime(); ok {
		_spec.SetField(forecast.FieldToTime, field.TypeTime, value)
	}
	if value, ok := fu.mutation.ChangeIndicator(); ok {
		_spec.SetField(forecast.FieldChangeIndicator, field.TypeEnum, value)
	}
	if fu.mutation.ChangeIndicatorCleared() {
		_spec.ClearField(forecast.FieldChangeIndicator, field.TypeEnum)
	}
	if value, ok := fu.mutation.ChangeTime(); ok {
		_spec.SetField(forecast.FieldChangeTime, field.TypeTime, value)
	}
	if fu.mutation.ChangeTimeCleared() {
		_spec.ClearField(forecast.FieldChangeTime, field.TypeTime)
	}
	if value, ok := fu.mutation.ChangeProbability(); ok {
		_spec.SetField(forecast.FieldChangeProbability, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedChangeProbability(); ok {
		_spec.AddField(forecast.FieldChangeProbability, field.TypeInt, value)
	}
	if fu.mutation.ChangeProbabilityCleared() {
		_spec.ClearField(forecast.FieldChangeProbability, field.TypeInt)
	}
	if value, ok := fu.mutation.WindDirection(); ok {
		_spec.SetField(forecast.FieldWindDirection, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedWindDirection(); ok {
		_spec.AddField(forecast.FieldWindDirection, field.TypeInt, value)
	}
	if fu.mutation.WindDirectionCleared() {
		_spec.ClearField(forecast.FieldWindDirection, field.TypeInt)
	}
	if value, ok := fu.mutation.WindSpeed(); ok {
		_spec.SetField(forecast.FieldWindSpeed, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedWindSpeed(); ok {
		_spec.AddField(forecast.FieldWindSpeed, field.TypeInt, value)
	}
	if fu.mutation.WindSpeedCleared() {
		_spec.ClearField(forecast.FieldWindSpeed, field.TypeInt)
	}
	if value, ok := fu.mutation.WindGust(); ok {
		_spec.SetField(forecast.FieldWindGust, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedWindGust(); ok {
		_spec.AddField(forecast.FieldWindGust, field.TypeInt, value)
	}
	if fu.mutation.WindGustCleared() {
		_spec.ClearField(forecast.FieldWindGust, field.TypeInt)
	}
	if value, ok := fu.mutation.WindShearHeight(); ok {
		_spec.SetField(forecast.FieldWindShearHeight, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedWindShearHeight(); ok {
		_spec.AddField(forecast.FieldWindShearHeight, field.TypeInt, value)
	}
	if fu.mutation.WindShearHeightCleared() {
		_spec.ClearField(forecast.FieldWindShearHeight, field.TypeInt)
	}
	if value, ok := fu.mutation.WindShearDirection(); ok {
		_spec.SetField(forecast.FieldWindShearDirection, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedWindShearDirection(); ok {
		_spec.AddField(forecast.FieldWindShearDirection, field.TypeInt, value)
	}
	if fu.mutation.WindShearDirectionCleared() {
		_spec.ClearField(forecast.FieldWindShearDirection, field.TypeInt)
	}
	if value, ok := fu.mutation.WindShearSpeed(); ok {
		_spec.SetField(forecast.FieldWindShearSpeed, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedWindShearSpeed(); ok {
		_spec.AddField(forecast.FieldWindShearSpeed, field.TypeInt, value)
	}
	if fu.mutation.WindShearSpeedCleared() {
		_spec.ClearField(forecast.FieldWindShearSpeed, field.TypeInt)
	}
	if value, ok := fu.mutation.VisibilityHorizontal(); ok {
		_spec.SetField(forecast.FieldVisibilityHorizontal, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedVisibilityHorizontal(); ok {
		_spec.AddField(forecast.FieldVisibilityHorizontal, field.TypeFloat64, value)
	}
	if fu.mutation.VisibilityHorizontalCleared() {
		_spec.ClearField(forecast.FieldVisibilityHorizontal, field.TypeFloat64)
	}
	if value, ok := fu.mutation.VisibilityVertical(); ok {
		_spec.SetField(forecast.FieldVisibilityVertical, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedVisibilityVertical(); ok {
		_spec.AddField(forecast.FieldVisibilityVertical, field.TypeInt, value)
	}
	if fu.mutation.VisibilityVerticalCleared() {
		_spec.ClearField(forecast.FieldVisibilityVertical, field.TypeInt)
	}
	if value, ok := fu.mutation.Altimeter(); ok {
		_spec.SetField(forecast.FieldAltimeter, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedAltimeter(); ok {
		_spec.AddField(forecast.FieldAltimeter, field.TypeFloat64, value)
	}
	if fu.mutation.AltimeterCleared() {
		_spec.ClearField(forecast.FieldAltimeter, field.TypeFloat64)
	}
	if value, ok := fu.mutation.Weather(); ok {
		_spec.SetField(forecast.FieldWeather, field.TypeString, value)
	}
	if fu.mutation.WeatherCleared() {
		_spec.ClearField(forecast.FieldWeather, field.TypeString)
	}
	if value, ok := fu.mutation.NotDecoded(); ok {
		_spec.SetField(forecast.FieldNotDecoded, field.TypeString, value)
	}
	if fu.mutation.NotDecodedCleared() {
		_spec.ClearField(forecast.FieldNotDecoded, field.TypeString)
	}
	if fu.mutation.SkyConditionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.SkyConditionsTable,
			Columns: []string{forecast.SkyConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: skycondition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedSkyConditionsIDs(); len(nodes) > 0 && !fu.mutation.SkyConditionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.SkyConditionsTable,
			Columns: []string{forecast.SkyConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: skycondition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.SkyConditionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.SkyConditionsTable,
			Columns: []string{forecast.SkyConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: skycondition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.TurbulenceConditionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.TurbulenceConditionsTable,
			Columns: []string{forecast.TurbulenceConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: turbulencecondition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedTurbulenceConditionsIDs(); len(nodes) > 0 && !fu.mutation.TurbulenceConditionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.TurbulenceConditionsTable,
			Columns: []string{forecast.TurbulenceConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: turbulencecondition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.TurbulenceConditionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.TurbulenceConditionsTable,
			Columns: []string{forecast.TurbulenceConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: turbulencecondition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.IcingConditionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.IcingConditionsTable,
			Columns: []string{forecast.IcingConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: icingcondition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedIcingConditionsIDs(); len(nodes) > 0 && !fu.mutation.IcingConditionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.IcingConditionsTable,
			Columns: []string{forecast.IcingConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: icingcondition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.IcingConditionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.IcingConditionsTable,
			Columns: []string{forecast.IcingConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: icingcondition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.TemperatureDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.TemperatureDataTable,
			Columns: []string{forecast.TemperatureDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: temperaturedata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedTemperatureDataIDs(); len(nodes) > 0 && !fu.mutation.TemperatureDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.TemperatureDataTable,
			Columns: []string{forecast.TemperatureDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: temperaturedata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.TemperatureDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.TemperatureDataTable,
			Columns: []string{forecast.TemperatureDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: temperaturedata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(fu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{forecast.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// ForecastUpdateOne is the builder for updating a single Forecast entity.
type ForecastUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ForecastMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetFromTime sets the "from_time" field.
func (fuo *ForecastUpdateOne) SetFromTime(t time.Time) *ForecastUpdateOne {
	fuo.mutation.SetFromTime(t)
	return fuo
}

// SetToTime sets the "to_time" field.
func (fuo *ForecastUpdateOne) SetToTime(t time.Time) *ForecastUpdateOne {
	fuo.mutation.SetToTime(t)
	return fuo
}

// SetChangeIndicator sets the "change_indicator" field.
func (fuo *ForecastUpdateOne) SetChangeIndicator(fi forecast.ChangeIndicator) *ForecastUpdateOne {
	fuo.mutation.SetChangeIndicator(fi)
	return fuo
}

// SetNillableChangeIndicator sets the "change_indicator" field if the given value is not nil.
func (fuo *ForecastUpdateOne) SetNillableChangeIndicator(fi *forecast.ChangeIndicator) *ForecastUpdateOne {
	if fi != nil {
		fuo.SetChangeIndicator(*fi)
	}
	return fuo
}

// ClearChangeIndicator clears the value of the "change_indicator" field.
func (fuo *ForecastUpdateOne) ClearChangeIndicator() *ForecastUpdateOne {
	fuo.mutation.ClearChangeIndicator()
	return fuo
}

// SetChangeTime sets the "change_time" field.
func (fuo *ForecastUpdateOne) SetChangeTime(t time.Time) *ForecastUpdateOne {
	fuo.mutation.SetChangeTime(t)
	return fuo
}

// SetNillableChangeTime sets the "change_time" field if the given value is not nil.
func (fuo *ForecastUpdateOne) SetNillableChangeTime(t *time.Time) *ForecastUpdateOne {
	if t != nil {
		fuo.SetChangeTime(*t)
	}
	return fuo
}

// ClearChangeTime clears the value of the "change_time" field.
func (fuo *ForecastUpdateOne) ClearChangeTime() *ForecastUpdateOne {
	fuo.mutation.ClearChangeTime()
	return fuo
}

// SetChangeProbability sets the "change_probability" field.
func (fuo *ForecastUpdateOne) SetChangeProbability(i int) *ForecastUpdateOne {
	fuo.mutation.ResetChangeProbability()
	fuo.mutation.SetChangeProbability(i)
	return fuo
}

// SetNillableChangeProbability sets the "change_probability" field if the given value is not nil.
func (fuo *ForecastUpdateOne) SetNillableChangeProbability(i *int) *ForecastUpdateOne {
	if i != nil {
		fuo.SetChangeProbability(*i)
	}
	return fuo
}

// AddChangeProbability adds i to the "change_probability" field.
func (fuo *ForecastUpdateOne) AddChangeProbability(i int) *ForecastUpdateOne {
	fuo.mutation.AddChangeProbability(i)
	return fuo
}

// ClearChangeProbability clears the value of the "change_probability" field.
func (fuo *ForecastUpdateOne) ClearChangeProbability() *ForecastUpdateOne {
	fuo.mutation.ClearChangeProbability()
	return fuo
}

// SetWindDirection sets the "wind_direction" field.
func (fuo *ForecastUpdateOne) SetWindDirection(i int) *ForecastUpdateOne {
	fuo.mutation.ResetWindDirection()
	fuo.mutation.SetWindDirection(i)
	return fuo
}

// SetNillableWindDirection sets the "wind_direction" field if the given value is not nil.
func (fuo *ForecastUpdateOne) SetNillableWindDirection(i *int) *ForecastUpdateOne {
	if i != nil {
		fuo.SetWindDirection(*i)
	}
	return fuo
}

// AddWindDirection adds i to the "wind_direction" field.
func (fuo *ForecastUpdateOne) AddWindDirection(i int) *ForecastUpdateOne {
	fuo.mutation.AddWindDirection(i)
	return fuo
}

// ClearWindDirection clears the value of the "wind_direction" field.
func (fuo *ForecastUpdateOne) ClearWindDirection() *ForecastUpdateOne {
	fuo.mutation.ClearWindDirection()
	return fuo
}

// SetWindSpeed sets the "wind_speed" field.
func (fuo *ForecastUpdateOne) SetWindSpeed(i int) *ForecastUpdateOne {
	fuo.mutation.ResetWindSpeed()
	fuo.mutation.SetWindSpeed(i)
	return fuo
}

// SetNillableWindSpeed sets the "wind_speed" field if the given value is not nil.
func (fuo *ForecastUpdateOne) SetNillableWindSpeed(i *int) *ForecastUpdateOne {
	if i != nil {
		fuo.SetWindSpeed(*i)
	}
	return fuo
}

// AddWindSpeed adds i to the "wind_speed" field.
func (fuo *ForecastUpdateOne) AddWindSpeed(i int) *ForecastUpdateOne {
	fuo.mutation.AddWindSpeed(i)
	return fuo
}

// ClearWindSpeed clears the value of the "wind_speed" field.
func (fuo *ForecastUpdateOne) ClearWindSpeed() *ForecastUpdateOne {
	fuo.mutation.ClearWindSpeed()
	return fuo
}

// SetWindGust sets the "wind_gust" field.
func (fuo *ForecastUpdateOne) SetWindGust(i int) *ForecastUpdateOne {
	fuo.mutation.ResetWindGust()
	fuo.mutation.SetWindGust(i)
	return fuo
}

// SetNillableWindGust sets the "wind_gust" field if the given value is not nil.
func (fuo *ForecastUpdateOne) SetNillableWindGust(i *int) *ForecastUpdateOne {
	if i != nil {
		fuo.SetWindGust(*i)
	}
	return fuo
}

// AddWindGust adds i to the "wind_gust" field.
func (fuo *ForecastUpdateOne) AddWindGust(i int) *ForecastUpdateOne {
	fuo.mutation.AddWindGust(i)
	return fuo
}

// ClearWindGust clears the value of the "wind_gust" field.
func (fuo *ForecastUpdateOne) ClearWindGust() *ForecastUpdateOne {
	fuo.mutation.ClearWindGust()
	return fuo
}

// SetWindShearHeight sets the "wind_shear_height" field.
func (fuo *ForecastUpdateOne) SetWindShearHeight(i int) *ForecastUpdateOne {
	fuo.mutation.ResetWindShearHeight()
	fuo.mutation.SetWindShearHeight(i)
	return fuo
}

// SetNillableWindShearHeight sets the "wind_shear_height" field if the given value is not nil.
func (fuo *ForecastUpdateOne) SetNillableWindShearHeight(i *int) *ForecastUpdateOne {
	if i != nil {
		fuo.SetWindShearHeight(*i)
	}
	return fuo
}

// AddWindShearHeight adds i to the "wind_shear_height" field.
func (fuo *ForecastUpdateOne) AddWindShearHeight(i int) *ForecastUpdateOne {
	fuo.mutation.AddWindShearHeight(i)
	return fuo
}

// ClearWindShearHeight clears the value of the "wind_shear_height" field.
func (fuo *ForecastUpdateOne) ClearWindShearHeight() *ForecastUpdateOne {
	fuo.mutation.ClearWindShearHeight()
	return fuo
}

// SetWindShearDirection sets the "wind_shear_direction" field.
func (fuo *ForecastUpdateOne) SetWindShearDirection(i int) *ForecastUpdateOne {
	fuo.mutation.ResetWindShearDirection()
	fuo.mutation.SetWindShearDirection(i)
	return fuo
}

// SetNillableWindShearDirection sets the "wind_shear_direction" field if the given value is not nil.
func (fuo *ForecastUpdateOne) SetNillableWindShearDirection(i *int) *ForecastUpdateOne {
	if i != nil {
		fuo.SetWindShearDirection(*i)
	}
	return fuo
}

// AddWindShearDirection adds i to the "wind_shear_direction" field.
func (fuo *ForecastUpdateOne) AddWindShearDirection(i int) *ForecastUpdateOne {
	fuo.mutation.AddWindShearDirection(i)
	return fuo
}

// ClearWindShearDirection clears the value of the "wind_shear_direction" field.
func (fuo *ForecastUpdateOne) ClearWindShearDirection() *ForecastUpdateOne {
	fuo.mutation.ClearWindShearDirection()
	return fuo
}

// SetWindShearSpeed sets the "wind_shear_speed" field.
func (fuo *ForecastUpdateOne) SetWindShearSpeed(i int) *ForecastUpdateOne {
	fuo.mutation.ResetWindShearSpeed()
	fuo.mutation.SetWindShearSpeed(i)
	return fuo
}

// SetNillableWindShearSpeed sets the "wind_shear_speed" field if the given value is not nil.
func (fuo *ForecastUpdateOne) SetNillableWindShearSpeed(i *int) *ForecastUpdateOne {
	if i != nil {
		fuo.SetWindShearSpeed(*i)
	}
	return fuo
}

// AddWindShearSpeed adds i to the "wind_shear_speed" field.
func (fuo *ForecastUpdateOne) AddWindShearSpeed(i int) *ForecastUpdateOne {
	fuo.mutation.AddWindShearSpeed(i)
	return fuo
}

// ClearWindShearSpeed clears the value of the "wind_shear_speed" field.
func (fuo *ForecastUpdateOne) ClearWindShearSpeed() *ForecastUpdateOne {
	fuo.mutation.ClearWindShearSpeed()
	return fuo
}

// SetVisibilityHorizontal sets the "visibility_horizontal" field.
func (fuo *ForecastUpdateOne) SetVisibilityHorizontal(f float64) *ForecastUpdateOne {
	fuo.mutation.ResetVisibilityHorizontal()
	fuo.mutation.SetVisibilityHorizontal(f)
	return fuo
}

// SetNillableVisibilityHorizontal sets the "visibility_horizontal" field if the given value is not nil.
func (fuo *ForecastUpdateOne) SetNillableVisibilityHorizontal(f *float64) *ForecastUpdateOne {
	if f != nil {
		fuo.SetVisibilityHorizontal(*f)
	}
	return fuo
}

// AddVisibilityHorizontal adds f to the "visibility_horizontal" field.
func (fuo *ForecastUpdateOne) AddVisibilityHorizontal(f float64) *ForecastUpdateOne {
	fuo.mutation.AddVisibilityHorizontal(f)
	return fuo
}

// ClearVisibilityHorizontal clears the value of the "visibility_horizontal" field.
func (fuo *ForecastUpdateOne) ClearVisibilityHorizontal() *ForecastUpdateOne {
	fuo.mutation.ClearVisibilityHorizontal()
	return fuo
}

// SetVisibilityVertical sets the "visibility_vertical" field.
func (fuo *ForecastUpdateOne) SetVisibilityVertical(i int) *ForecastUpdateOne {
	fuo.mutation.ResetVisibilityVertical()
	fuo.mutation.SetVisibilityVertical(i)
	return fuo
}

// SetNillableVisibilityVertical sets the "visibility_vertical" field if the given value is not nil.
func (fuo *ForecastUpdateOne) SetNillableVisibilityVertical(i *int) *ForecastUpdateOne {
	if i != nil {
		fuo.SetVisibilityVertical(*i)
	}
	return fuo
}

// AddVisibilityVertical adds i to the "visibility_vertical" field.
func (fuo *ForecastUpdateOne) AddVisibilityVertical(i int) *ForecastUpdateOne {
	fuo.mutation.AddVisibilityVertical(i)
	return fuo
}

// ClearVisibilityVertical clears the value of the "visibility_vertical" field.
func (fuo *ForecastUpdateOne) ClearVisibilityVertical() *ForecastUpdateOne {
	fuo.mutation.ClearVisibilityVertical()
	return fuo
}

// SetAltimeter sets the "altimeter" field.
func (fuo *ForecastUpdateOne) SetAltimeter(f float64) *ForecastUpdateOne {
	fuo.mutation.ResetAltimeter()
	fuo.mutation.SetAltimeter(f)
	return fuo
}

// SetNillableAltimeter sets the "altimeter" field if the given value is not nil.
func (fuo *ForecastUpdateOne) SetNillableAltimeter(f *float64) *ForecastUpdateOne {
	if f != nil {
		fuo.SetAltimeter(*f)
	}
	return fuo
}

// AddAltimeter adds f to the "altimeter" field.
func (fuo *ForecastUpdateOne) AddAltimeter(f float64) *ForecastUpdateOne {
	fuo.mutation.AddAltimeter(f)
	return fuo
}

// ClearAltimeter clears the value of the "altimeter" field.
func (fuo *ForecastUpdateOne) ClearAltimeter() *ForecastUpdateOne {
	fuo.mutation.ClearAltimeter()
	return fuo
}

// SetWeather sets the "weather" field.
func (fuo *ForecastUpdateOne) SetWeather(s string) *ForecastUpdateOne {
	fuo.mutation.SetWeather(s)
	return fuo
}

// SetNillableWeather sets the "weather" field if the given value is not nil.
func (fuo *ForecastUpdateOne) SetNillableWeather(s *string) *ForecastUpdateOne {
	if s != nil {
		fuo.SetWeather(*s)
	}
	return fuo
}

// ClearWeather clears the value of the "weather" field.
func (fuo *ForecastUpdateOne) ClearWeather() *ForecastUpdateOne {
	fuo.mutation.ClearWeather()
	return fuo
}

// SetNotDecoded sets the "not_decoded" field.
func (fuo *ForecastUpdateOne) SetNotDecoded(s string) *ForecastUpdateOne {
	fuo.mutation.SetNotDecoded(s)
	return fuo
}

// SetNillableNotDecoded sets the "not_decoded" field if the given value is not nil.
func (fuo *ForecastUpdateOne) SetNillableNotDecoded(s *string) *ForecastUpdateOne {
	if s != nil {
		fuo.SetNotDecoded(*s)
	}
	return fuo
}

// ClearNotDecoded clears the value of the "not_decoded" field.
func (fuo *ForecastUpdateOne) ClearNotDecoded() *ForecastUpdateOne {
	fuo.mutation.ClearNotDecoded()
	return fuo
}

// AddSkyConditionIDs adds the "sky_conditions" edge to the SkyCondition entity by IDs.
func (fuo *ForecastUpdateOne) AddSkyConditionIDs(ids ...uuid.UUID) *ForecastUpdateOne {
	fuo.mutation.AddSkyConditionIDs(ids...)
	return fuo
}

// AddSkyConditions adds the "sky_conditions" edges to the SkyCondition entity.
func (fuo *ForecastUpdateOne) AddSkyConditions(s ...*SkyCondition) *ForecastUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fuo.AddSkyConditionIDs(ids...)
}

// AddTurbulenceConditionIDs adds the "turbulence_conditions" edge to the TurbulenceCondition entity by IDs.
func (fuo *ForecastUpdateOne) AddTurbulenceConditionIDs(ids ...uuid.UUID) *ForecastUpdateOne {
	fuo.mutation.AddTurbulenceConditionIDs(ids...)
	return fuo
}

// AddTurbulenceConditions adds the "turbulence_conditions" edges to the TurbulenceCondition entity.
func (fuo *ForecastUpdateOne) AddTurbulenceConditions(t ...*TurbulenceCondition) *ForecastUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return fuo.AddTurbulenceConditionIDs(ids...)
}

// AddIcingConditionIDs adds the "icing_conditions" edge to the IcingCondition entity by IDs.
func (fuo *ForecastUpdateOne) AddIcingConditionIDs(ids ...uuid.UUID) *ForecastUpdateOne {
	fuo.mutation.AddIcingConditionIDs(ids...)
	return fuo
}

// AddIcingConditions adds the "icing_conditions" edges to the IcingCondition entity.
func (fuo *ForecastUpdateOne) AddIcingConditions(i ...*IcingCondition) *ForecastUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fuo.AddIcingConditionIDs(ids...)
}

// AddTemperatureDatumIDs adds the "temperature_data" edge to the TemperatureData entity by IDs.
func (fuo *ForecastUpdateOne) AddTemperatureDatumIDs(ids ...uuid.UUID) *ForecastUpdateOne {
	fuo.mutation.AddTemperatureDatumIDs(ids...)
	return fuo
}

// AddTemperatureData adds the "temperature_data" edges to the TemperatureData entity.
func (fuo *ForecastUpdateOne) AddTemperatureData(t ...*TemperatureData) *ForecastUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return fuo.AddTemperatureDatumIDs(ids...)
}

// Mutation returns the ForecastMutation object of the builder.
func (fuo *ForecastUpdateOne) Mutation() *ForecastMutation {
	return fuo.mutation
}

// ClearSkyConditions clears all "sky_conditions" edges to the SkyCondition entity.
func (fuo *ForecastUpdateOne) ClearSkyConditions() *ForecastUpdateOne {
	fuo.mutation.ClearSkyConditions()
	return fuo
}

// RemoveSkyConditionIDs removes the "sky_conditions" edge to SkyCondition entities by IDs.
func (fuo *ForecastUpdateOne) RemoveSkyConditionIDs(ids ...uuid.UUID) *ForecastUpdateOne {
	fuo.mutation.RemoveSkyConditionIDs(ids...)
	return fuo
}

// RemoveSkyConditions removes "sky_conditions" edges to SkyCondition entities.
func (fuo *ForecastUpdateOne) RemoveSkyConditions(s ...*SkyCondition) *ForecastUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fuo.RemoveSkyConditionIDs(ids...)
}

// ClearTurbulenceConditions clears all "turbulence_conditions" edges to the TurbulenceCondition entity.
func (fuo *ForecastUpdateOne) ClearTurbulenceConditions() *ForecastUpdateOne {
	fuo.mutation.ClearTurbulenceConditions()
	return fuo
}

// RemoveTurbulenceConditionIDs removes the "turbulence_conditions" edge to TurbulenceCondition entities by IDs.
func (fuo *ForecastUpdateOne) RemoveTurbulenceConditionIDs(ids ...uuid.UUID) *ForecastUpdateOne {
	fuo.mutation.RemoveTurbulenceConditionIDs(ids...)
	return fuo
}

// RemoveTurbulenceConditions removes "turbulence_conditions" edges to TurbulenceCondition entities.
func (fuo *ForecastUpdateOne) RemoveTurbulenceConditions(t ...*TurbulenceCondition) *ForecastUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return fuo.RemoveTurbulenceConditionIDs(ids...)
}

// ClearIcingConditions clears all "icing_conditions" edges to the IcingCondition entity.
func (fuo *ForecastUpdateOne) ClearIcingConditions() *ForecastUpdateOne {
	fuo.mutation.ClearIcingConditions()
	return fuo
}

// RemoveIcingConditionIDs removes the "icing_conditions" edge to IcingCondition entities by IDs.
func (fuo *ForecastUpdateOne) RemoveIcingConditionIDs(ids ...uuid.UUID) *ForecastUpdateOne {
	fuo.mutation.RemoveIcingConditionIDs(ids...)
	return fuo
}

// RemoveIcingConditions removes "icing_conditions" edges to IcingCondition entities.
func (fuo *ForecastUpdateOne) RemoveIcingConditions(i ...*IcingCondition) *ForecastUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fuo.RemoveIcingConditionIDs(ids...)
}

// ClearTemperatureData clears all "temperature_data" edges to the TemperatureData entity.
func (fuo *ForecastUpdateOne) ClearTemperatureData() *ForecastUpdateOne {
	fuo.mutation.ClearTemperatureData()
	return fuo
}

// RemoveTemperatureDatumIDs removes the "temperature_data" edge to TemperatureData entities by IDs.
func (fuo *ForecastUpdateOne) RemoveTemperatureDatumIDs(ids ...uuid.UUID) *ForecastUpdateOne {
	fuo.mutation.RemoveTemperatureDatumIDs(ids...)
	return fuo
}

// RemoveTemperatureData removes "temperature_data" edges to TemperatureData entities.
func (fuo *ForecastUpdateOne) RemoveTemperatureData(t ...*TemperatureData) *ForecastUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return fuo.RemoveTemperatureDatumIDs(ids...)
}

// Where appends a list predicates to the ForecastUpdate builder.
func (fuo *ForecastUpdateOne) Where(ps ...predicate.Forecast) *ForecastUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *ForecastUpdateOne) Select(field string, fields ...string) *ForecastUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Forecast entity.
func (fuo *ForecastUpdateOne) Save(ctx context.Context) (*Forecast, error) {
	return withHooks[*Forecast, ForecastMutation](ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *ForecastUpdateOne) SaveX(ctx context.Context) *Forecast {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *ForecastUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *ForecastUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *ForecastUpdateOne) check() error {
	if v, ok := fuo.mutation.ChangeIndicator(); ok {
		if err := forecast.ChangeIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "change_indicator", err: fmt.Errorf(`ent: validator failed for field "Forecast.change_indicator": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fuo *ForecastUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ForecastUpdateOne {
	fuo.modifiers = append(fuo.modifiers, modifiers...)
	return fuo
}

func (fuo *ForecastUpdateOne) sqlSave(ctx context.Context) (_node *Forecast, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(forecast.Table, forecast.Columns, sqlgraph.NewFieldSpec(forecast.FieldID, field.TypeUUID))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Forecast.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, forecast.FieldID)
		for _, f := range fields {
			if !forecast.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != forecast.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.FromTime(); ok {
		_spec.SetField(forecast.FieldFromTime, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.ToTime(); ok {
		_spec.SetField(forecast.FieldToTime, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.ChangeIndicator(); ok {
		_spec.SetField(forecast.FieldChangeIndicator, field.TypeEnum, value)
	}
	if fuo.mutation.ChangeIndicatorCleared() {
		_spec.ClearField(forecast.FieldChangeIndicator, field.TypeEnum)
	}
	if value, ok := fuo.mutation.ChangeTime(); ok {
		_spec.SetField(forecast.FieldChangeTime, field.TypeTime, value)
	}
	if fuo.mutation.ChangeTimeCleared() {
		_spec.ClearField(forecast.FieldChangeTime, field.TypeTime)
	}
	if value, ok := fuo.mutation.ChangeProbability(); ok {
		_spec.SetField(forecast.FieldChangeProbability, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedChangeProbability(); ok {
		_spec.AddField(forecast.FieldChangeProbability, field.TypeInt, value)
	}
	if fuo.mutation.ChangeProbabilityCleared() {
		_spec.ClearField(forecast.FieldChangeProbability, field.TypeInt)
	}
	if value, ok := fuo.mutation.WindDirection(); ok {
		_spec.SetField(forecast.FieldWindDirection, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedWindDirection(); ok {
		_spec.AddField(forecast.FieldWindDirection, field.TypeInt, value)
	}
	if fuo.mutation.WindDirectionCleared() {
		_spec.ClearField(forecast.FieldWindDirection, field.TypeInt)
	}
	if value, ok := fuo.mutation.WindSpeed(); ok {
		_spec.SetField(forecast.FieldWindSpeed, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedWindSpeed(); ok {
		_spec.AddField(forecast.FieldWindSpeed, field.TypeInt, value)
	}
	if fuo.mutation.WindSpeedCleared() {
		_spec.ClearField(forecast.FieldWindSpeed, field.TypeInt)
	}
	if value, ok := fuo.mutation.WindGust(); ok {
		_spec.SetField(forecast.FieldWindGust, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedWindGust(); ok {
		_spec.AddField(forecast.FieldWindGust, field.TypeInt, value)
	}
	if fuo.mutation.WindGustCleared() {
		_spec.ClearField(forecast.FieldWindGust, field.TypeInt)
	}
	if value, ok := fuo.mutation.WindShearHeight(); ok {
		_spec.SetField(forecast.FieldWindShearHeight, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedWindShearHeight(); ok {
		_spec.AddField(forecast.FieldWindShearHeight, field.TypeInt, value)
	}
	if fuo.mutation.WindShearHeightCleared() {
		_spec.ClearField(forecast.FieldWindShearHeight, field.TypeInt)
	}
	if value, ok := fuo.mutation.WindShearDirection(); ok {
		_spec.SetField(forecast.FieldWindShearDirection, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedWindShearDirection(); ok {
		_spec.AddField(forecast.FieldWindShearDirection, field.TypeInt, value)
	}
	if fuo.mutation.WindShearDirectionCleared() {
		_spec.ClearField(forecast.FieldWindShearDirection, field.TypeInt)
	}
	if value, ok := fuo.mutation.WindShearSpeed(); ok {
		_spec.SetField(forecast.FieldWindShearSpeed, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedWindShearSpeed(); ok {
		_spec.AddField(forecast.FieldWindShearSpeed, field.TypeInt, value)
	}
	if fuo.mutation.WindShearSpeedCleared() {
		_spec.ClearField(forecast.FieldWindShearSpeed, field.TypeInt)
	}
	if value, ok := fuo.mutation.VisibilityHorizontal(); ok {
		_spec.SetField(forecast.FieldVisibilityHorizontal, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedVisibilityHorizontal(); ok {
		_spec.AddField(forecast.FieldVisibilityHorizontal, field.TypeFloat64, value)
	}
	if fuo.mutation.VisibilityHorizontalCleared() {
		_spec.ClearField(forecast.FieldVisibilityHorizontal, field.TypeFloat64)
	}
	if value, ok := fuo.mutation.VisibilityVertical(); ok {
		_spec.SetField(forecast.FieldVisibilityVertical, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedVisibilityVertical(); ok {
		_spec.AddField(forecast.FieldVisibilityVertical, field.TypeInt, value)
	}
	if fuo.mutation.VisibilityVerticalCleared() {
		_spec.ClearField(forecast.FieldVisibilityVertical, field.TypeInt)
	}
	if value, ok := fuo.mutation.Altimeter(); ok {
		_spec.SetField(forecast.FieldAltimeter, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedAltimeter(); ok {
		_spec.AddField(forecast.FieldAltimeter, field.TypeFloat64, value)
	}
	if fuo.mutation.AltimeterCleared() {
		_spec.ClearField(forecast.FieldAltimeter, field.TypeFloat64)
	}
	if value, ok := fuo.mutation.Weather(); ok {
		_spec.SetField(forecast.FieldWeather, field.TypeString, value)
	}
	if fuo.mutation.WeatherCleared() {
		_spec.ClearField(forecast.FieldWeather, field.TypeString)
	}
	if value, ok := fuo.mutation.NotDecoded(); ok {
		_spec.SetField(forecast.FieldNotDecoded, field.TypeString, value)
	}
	if fuo.mutation.NotDecodedCleared() {
		_spec.ClearField(forecast.FieldNotDecoded, field.TypeString)
	}
	if fuo.mutation.SkyConditionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.SkyConditionsTable,
			Columns: []string{forecast.SkyConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: skycondition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedSkyConditionsIDs(); len(nodes) > 0 && !fuo.mutation.SkyConditionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.SkyConditionsTable,
			Columns: []string{forecast.SkyConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: skycondition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.SkyConditionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.SkyConditionsTable,
			Columns: []string{forecast.SkyConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: skycondition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.TurbulenceConditionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.TurbulenceConditionsTable,
			Columns: []string{forecast.TurbulenceConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: turbulencecondition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedTurbulenceConditionsIDs(); len(nodes) > 0 && !fuo.mutation.TurbulenceConditionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.TurbulenceConditionsTable,
			Columns: []string{forecast.TurbulenceConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: turbulencecondition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.TurbulenceConditionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.TurbulenceConditionsTable,
			Columns: []string{forecast.TurbulenceConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: turbulencecondition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.IcingConditionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.IcingConditionsTable,
			Columns: []string{forecast.IcingConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: icingcondition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedIcingConditionsIDs(); len(nodes) > 0 && !fuo.mutation.IcingConditionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.IcingConditionsTable,
			Columns: []string{forecast.IcingConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: icingcondition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.IcingConditionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.IcingConditionsTable,
			Columns: []string{forecast.IcingConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: icingcondition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.TemperatureDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.TemperatureDataTable,
			Columns: []string{forecast.TemperatureDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: temperaturedata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedTemperatureDataIDs(); len(nodes) > 0 && !fuo.mutation.TemperatureDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.TemperatureDataTable,
			Columns: []string{forecast.TemperatureDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: temperaturedata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.TemperatureDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.TemperatureDataTable,
			Columns: []string{forecast.TemperatureDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: temperaturedata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(fuo.modifiers...)
	_node = &Forecast{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{forecast.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
