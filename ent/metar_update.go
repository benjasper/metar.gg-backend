// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"metar.gg/ent/metar"
	"metar.gg/ent/predicate"
	"metar.gg/ent/skycondition"
	"metar.gg/ent/weatherstation"
)

// MetarUpdate is the builder for updating Metar entities.
type MetarUpdate struct {
	config
	hooks     []Hook
	mutation  *MetarMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MetarUpdate builder.
func (mu *MetarUpdate) Where(ps ...predicate.Metar) *MetarUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetRawText sets the "raw_text" field.
func (mu *MetarUpdate) SetRawText(s string) *MetarUpdate {
	mu.mutation.SetRawText(s)
	return mu
}

// SetObservationTime sets the "observation_time" field.
func (mu *MetarUpdate) SetObservationTime(t time.Time) *MetarUpdate {
	mu.mutation.SetObservationTime(t)
	return mu
}

// SetImportTime sets the "import_time" field.
func (mu *MetarUpdate) SetImportTime(t time.Time) *MetarUpdate {
	mu.mutation.SetImportTime(t)
	return mu
}

// SetNillableImportTime sets the "import_time" field if the given value is not nil.
func (mu *MetarUpdate) SetNillableImportTime(t *time.Time) *MetarUpdate {
	if t != nil {
		mu.SetImportTime(*t)
	}
	return mu
}

// SetNextImportTimePrediction sets the "next_import_time_prediction" field.
func (mu *MetarUpdate) SetNextImportTimePrediction(t time.Time) *MetarUpdate {
	mu.mutation.SetNextImportTimePrediction(t)
	return mu
}

// SetNillableNextImportTimePrediction sets the "next_import_time_prediction" field if the given value is not nil.
func (mu *MetarUpdate) SetNillableNextImportTimePrediction(t *time.Time) *MetarUpdate {
	if t != nil {
		mu.SetNextImportTimePrediction(*t)
	}
	return mu
}

// ClearNextImportTimePrediction clears the value of the "next_import_time_prediction" field.
func (mu *MetarUpdate) ClearNextImportTimePrediction() *MetarUpdate {
	mu.mutation.ClearNextImportTimePrediction()
	return mu
}

// SetTemperature sets the "temperature" field.
func (mu *MetarUpdate) SetTemperature(f float64) *MetarUpdate {
	mu.mutation.ResetTemperature()
	mu.mutation.SetTemperature(f)
	return mu
}

// SetNillableTemperature sets the "temperature" field if the given value is not nil.
func (mu *MetarUpdate) SetNillableTemperature(f *float64) *MetarUpdate {
	if f != nil {
		mu.SetTemperature(*f)
	}
	return mu
}

// AddTemperature adds f to the "temperature" field.
func (mu *MetarUpdate) AddTemperature(f float64) *MetarUpdate {
	mu.mutation.AddTemperature(f)
	return mu
}

// ClearTemperature clears the value of the "temperature" field.
func (mu *MetarUpdate) ClearTemperature() *MetarUpdate {
	mu.mutation.ClearTemperature()
	return mu
}

// SetDewpoint sets the "dewpoint" field.
func (mu *MetarUpdate) SetDewpoint(f float64) *MetarUpdate {
	mu.mutation.ResetDewpoint()
	mu.mutation.SetDewpoint(f)
	return mu
}

// SetNillableDewpoint sets the "dewpoint" field if the given value is not nil.
func (mu *MetarUpdate) SetNillableDewpoint(f *float64) *MetarUpdate {
	if f != nil {
		mu.SetDewpoint(*f)
	}
	return mu
}

// AddDewpoint adds f to the "dewpoint" field.
func (mu *MetarUpdate) AddDewpoint(f float64) *MetarUpdate {
	mu.mutation.AddDewpoint(f)
	return mu
}

// ClearDewpoint clears the value of the "dewpoint" field.
func (mu *MetarUpdate) ClearDewpoint() *MetarUpdate {
	mu.mutation.ClearDewpoint()
	return mu
}

// SetWindSpeed sets the "wind_speed" field.
func (mu *MetarUpdate) SetWindSpeed(i int) *MetarUpdate {
	mu.mutation.ResetWindSpeed()
	mu.mutation.SetWindSpeed(i)
	return mu
}

// SetNillableWindSpeed sets the "wind_speed" field if the given value is not nil.
func (mu *MetarUpdate) SetNillableWindSpeed(i *int) *MetarUpdate {
	if i != nil {
		mu.SetWindSpeed(*i)
	}
	return mu
}

// AddWindSpeed adds i to the "wind_speed" field.
func (mu *MetarUpdate) AddWindSpeed(i int) *MetarUpdate {
	mu.mutation.AddWindSpeed(i)
	return mu
}

// ClearWindSpeed clears the value of the "wind_speed" field.
func (mu *MetarUpdate) ClearWindSpeed() *MetarUpdate {
	mu.mutation.ClearWindSpeed()
	return mu
}

// SetWindGust sets the "wind_gust" field.
func (mu *MetarUpdate) SetWindGust(i int) *MetarUpdate {
	mu.mutation.ResetWindGust()
	mu.mutation.SetWindGust(i)
	return mu
}

// SetNillableWindGust sets the "wind_gust" field if the given value is not nil.
func (mu *MetarUpdate) SetNillableWindGust(i *int) *MetarUpdate {
	if i != nil {
		mu.SetWindGust(*i)
	}
	return mu
}

// AddWindGust adds i to the "wind_gust" field.
func (mu *MetarUpdate) AddWindGust(i int) *MetarUpdate {
	mu.mutation.AddWindGust(i)
	return mu
}

// ClearWindGust clears the value of the "wind_gust" field.
func (mu *MetarUpdate) ClearWindGust() *MetarUpdate {
	mu.mutation.ClearWindGust()
	return mu
}

// SetWindDirection sets the "wind_direction" field.
func (mu *MetarUpdate) SetWindDirection(i int) *MetarUpdate {
	mu.mutation.ResetWindDirection()
	mu.mutation.SetWindDirection(i)
	return mu
}

// SetNillableWindDirection sets the "wind_direction" field if the given value is not nil.
func (mu *MetarUpdate) SetNillableWindDirection(i *int) *MetarUpdate {
	if i != nil {
		mu.SetWindDirection(*i)
	}
	return mu
}

// AddWindDirection adds i to the "wind_direction" field.
func (mu *MetarUpdate) AddWindDirection(i int) *MetarUpdate {
	mu.mutation.AddWindDirection(i)
	return mu
}

// ClearWindDirection clears the value of the "wind_direction" field.
func (mu *MetarUpdate) ClearWindDirection() *MetarUpdate {
	mu.mutation.ClearWindDirection()
	return mu
}

// SetWindDirectionVariable sets the "wind_direction_variable" field.
func (mu *MetarUpdate) SetWindDirectionVariable(b bool) *MetarUpdate {
	mu.mutation.SetWindDirectionVariable(b)
	return mu
}

// SetVisibility sets the "visibility" field.
func (mu *MetarUpdate) SetVisibility(f float64) *MetarUpdate {
	mu.mutation.ResetVisibility()
	mu.mutation.SetVisibility(f)
	return mu
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (mu *MetarUpdate) SetNillableVisibility(f *float64) *MetarUpdate {
	if f != nil {
		mu.SetVisibility(*f)
	}
	return mu
}

// AddVisibility adds f to the "visibility" field.
func (mu *MetarUpdate) AddVisibility(f float64) *MetarUpdate {
	mu.mutation.AddVisibility(f)
	return mu
}

// ClearVisibility clears the value of the "visibility" field.
func (mu *MetarUpdate) ClearVisibility() *MetarUpdate {
	mu.mutation.ClearVisibility()
	return mu
}

// SetVisibilityIsMoreThan sets the "visibility_is_more_than" field.
func (mu *MetarUpdate) SetVisibilityIsMoreThan(b bool) *MetarUpdate {
	mu.mutation.SetVisibilityIsMoreThan(b)
	return mu
}

// SetAltimeter sets the "altimeter" field.
func (mu *MetarUpdate) SetAltimeter(f float64) *MetarUpdate {
	mu.mutation.ResetAltimeter()
	mu.mutation.SetAltimeter(f)
	return mu
}

// SetNillableAltimeter sets the "altimeter" field if the given value is not nil.
func (mu *MetarUpdate) SetNillableAltimeter(f *float64) *MetarUpdate {
	if f != nil {
		mu.SetAltimeter(*f)
	}
	return mu
}

// AddAltimeter adds f to the "altimeter" field.
func (mu *MetarUpdate) AddAltimeter(f float64) *MetarUpdate {
	mu.mutation.AddAltimeter(f)
	return mu
}

// ClearAltimeter clears the value of the "altimeter" field.
func (mu *MetarUpdate) ClearAltimeter() *MetarUpdate {
	mu.mutation.ClearAltimeter()
	return mu
}

// SetPresentWeather sets the "present_weather" field.
func (mu *MetarUpdate) SetPresentWeather(s string) *MetarUpdate {
	mu.mutation.SetPresentWeather(s)
	return mu
}

// SetNillablePresentWeather sets the "present_weather" field if the given value is not nil.
func (mu *MetarUpdate) SetNillablePresentWeather(s *string) *MetarUpdate {
	if s != nil {
		mu.SetPresentWeather(*s)
	}
	return mu
}

// ClearPresentWeather clears the value of the "present_weather" field.
func (mu *MetarUpdate) ClearPresentWeather() *MetarUpdate {
	mu.mutation.ClearPresentWeather()
	return mu
}

// SetFlightCategory sets the "flight_category" field.
func (mu *MetarUpdate) SetFlightCategory(mc metar.FlightCategory) *MetarUpdate {
	mu.mutation.SetFlightCategory(mc)
	return mu
}

// SetNillableFlightCategory sets the "flight_category" field if the given value is not nil.
func (mu *MetarUpdate) SetNillableFlightCategory(mc *metar.FlightCategory) *MetarUpdate {
	if mc != nil {
		mu.SetFlightCategory(*mc)
	}
	return mu
}

// ClearFlightCategory clears the value of the "flight_category" field.
func (mu *MetarUpdate) ClearFlightCategory() *MetarUpdate {
	mu.mutation.ClearFlightCategory()
	return mu
}

// SetQualityControlCorrected sets the "quality_control_corrected" field.
func (mu *MetarUpdate) SetQualityControlCorrected(b bool) *MetarUpdate {
	mu.mutation.SetQualityControlCorrected(b)
	return mu
}

// SetNillableQualityControlCorrected sets the "quality_control_corrected" field if the given value is not nil.
func (mu *MetarUpdate) SetNillableQualityControlCorrected(b *bool) *MetarUpdate {
	if b != nil {
		mu.SetQualityControlCorrected(*b)
	}
	return mu
}

// ClearQualityControlCorrected clears the value of the "quality_control_corrected" field.
func (mu *MetarUpdate) ClearQualityControlCorrected() *MetarUpdate {
	mu.mutation.ClearQualityControlCorrected()
	return mu
}

// SetQualityControlAutoStation sets the "quality_control_auto_station" field.
func (mu *MetarUpdate) SetQualityControlAutoStation(b bool) *MetarUpdate {
	mu.mutation.SetQualityControlAutoStation(b)
	return mu
}

// SetQualityControlMaintenanceIndicatorOn sets the "quality_control_maintenance_indicator_on" field.
func (mu *MetarUpdate) SetQualityControlMaintenanceIndicatorOn(b bool) *MetarUpdate {
	mu.mutation.SetQualityControlMaintenanceIndicatorOn(b)
	return mu
}

// SetQualityControlNoSignal sets the "quality_control_no_signal" field.
func (mu *MetarUpdate) SetQualityControlNoSignal(b bool) *MetarUpdate {
	mu.mutation.SetQualityControlNoSignal(b)
	return mu
}

// SetQualityControlLightningSensorOff sets the "quality_control_lightning_sensor_off" field.
func (mu *MetarUpdate) SetQualityControlLightningSensorOff(b bool) *MetarUpdate {
	mu.mutation.SetQualityControlLightningSensorOff(b)
	return mu
}

// SetQualityControlFreezingRainSensorOff sets the "quality_control_freezing_rain_sensor_off" field.
func (mu *MetarUpdate) SetQualityControlFreezingRainSensorOff(b bool) *MetarUpdate {
	mu.mutation.SetQualityControlFreezingRainSensorOff(b)
	return mu
}

// SetQualityControlPresentWeatherSensorOff sets the "quality_control_present_weather_sensor_off" field.
func (mu *MetarUpdate) SetQualityControlPresentWeatherSensorOff(b bool) *MetarUpdate {
	mu.mutation.SetQualityControlPresentWeatherSensorOff(b)
	return mu
}

// SetSeaLevelPressure sets the "sea_level_pressure" field.
func (mu *MetarUpdate) SetSeaLevelPressure(f float64) *MetarUpdate {
	mu.mutation.ResetSeaLevelPressure()
	mu.mutation.SetSeaLevelPressure(f)
	return mu
}

// SetNillableSeaLevelPressure sets the "sea_level_pressure" field if the given value is not nil.
func (mu *MetarUpdate) SetNillableSeaLevelPressure(f *float64) *MetarUpdate {
	if f != nil {
		mu.SetSeaLevelPressure(*f)
	}
	return mu
}

// AddSeaLevelPressure adds f to the "sea_level_pressure" field.
func (mu *MetarUpdate) AddSeaLevelPressure(f float64) *MetarUpdate {
	mu.mutation.AddSeaLevelPressure(f)
	return mu
}

// ClearSeaLevelPressure clears the value of the "sea_level_pressure" field.
func (mu *MetarUpdate) ClearSeaLevelPressure() *MetarUpdate {
	mu.mutation.ClearSeaLevelPressure()
	return mu
}

// SetPressureTendency sets the "pressure_tendency" field.
func (mu *MetarUpdate) SetPressureTendency(f float64) *MetarUpdate {
	mu.mutation.ResetPressureTendency()
	mu.mutation.SetPressureTendency(f)
	return mu
}

// SetNillablePressureTendency sets the "pressure_tendency" field if the given value is not nil.
func (mu *MetarUpdate) SetNillablePressureTendency(f *float64) *MetarUpdate {
	if f != nil {
		mu.SetPressureTendency(*f)
	}
	return mu
}

// AddPressureTendency adds f to the "pressure_tendency" field.
func (mu *MetarUpdate) AddPressureTendency(f float64) *MetarUpdate {
	mu.mutation.AddPressureTendency(f)
	return mu
}

// ClearPressureTendency clears the value of the "pressure_tendency" field.
func (mu *MetarUpdate) ClearPressureTendency() *MetarUpdate {
	mu.mutation.ClearPressureTendency()
	return mu
}

// SetMaxTemp6 sets the "max_temp_6" field.
func (mu *MetarUpdate) SetMaxTemp6(f float64) *MetarUpdate {
	mu.mutation.ResetMaxTemp6()
	mu.mutation.SetMaxTemp6(f)
	return mu
}

// SetNillableMaxTemp6 sets the "max_temp_6" field if the given value is not nil.
func (mu *MetarUpdate) SetNillableMaxTemp6(f *float64) *MetarUpdate {
	if f != nil {
		mu.SetMaxTemp6(*f)
	}
	return mu
}

// AddMaxTemp6 adds f to the "max_temp_6" field.
func (mu *MetarUpdate) AddMaxTemp6(f float64) *MetarUpdate {
	mu.mutation.AddMaxTemp6(f)
	return mu
}

// ClearMaxTemp6 clears the value of the "max_temp_6" field.
func (mu *MetarUpdate) ClearMaxTemp6() *MetarUpdate {
	mu.mutation.ClearMaxTemp6()
	return mu
}

// SetMinTemp6 sets the "min_temp_6" field.
func (mu *MetarUpdate) SetMinTemp6(f float64) *MetarUpdate {
	mu.mutation.ResetMinTemp6()
	mu.mutation.SetMinTemp6(f)
	return mu
}

// SetNillableMinTemp6 sets the "min_temp_6" field if the given value is not nil.
func (mu *MetarUpdate) SetNillableMinTemp6(f *float64) *MetarUpdate {
	if f != nil {
		mu.SetMinTemp6(*f)
	}
	return mu
}

// AddMinTemp6 adds f to the "min_temp_6" field.
func (mu *MetarUpdate) AddMinTemp6(f float64) *MetarUpdate {
	mu.mutation.AddMinTemp6(f)
	return mu
}

// ClearMinTemp6 clears the value of the "min_temp_6" field.
func (mu *MetarUpdate) ClearMinTemp6() *MetarUpdate {
	mu.mutation.ClearMinTemp6()
	return mu
}

// SetMaxTemp24 sets the "max_temp_24" field.
func (mu *MetarUpdate) SetMaxTemp24(f float64) *MetarUpdate {
	mu.mutation.ResetMaxTemp24()
	mu.mutation.SetMaxTemp24(f)
	return mu
}

// SetNillableMaxTemp24 sets the "max_temp_24" field if the given value is not nil.
func (mu *MetarUpdate) SetNillableMaxTemp24(f *float64) *MetarUpdate {
	if f != nil {
		mu.SetMaxTemp24(*f)
	}
	return mu
}

// AddMaxTemp24 adds f to the "max_temp_24" field.
func (mu *MetarUpdate) AddMaxTemp24(f float64) *MetarUpdate {
	mu.mutation.AddMaxTemp24(f)
	return mu
}

// ClearMaxTemp24 clears the value of the "max_temp_24" field.
func (mu *MetarUpdate) ClearMaxTemp24() *MetarUpdate {
	mu.mutation.ClearMaxTemp24()
	return mu
}

// SetMinTemp24 sets the "min_temp_24" field.
func (mu *MetarUpdate) SetMinTemp24(f float64) *MetarUpdate {
	mu.mutation.ResetMinTemp24()
	mu.mutation.SetMinTemp24(f)
	return mu
}

// SetNillableMinTemp24 sets the "min_temp_24" field if the given value is not nil.
func (mu *MetarUpdate) SetNillableMinTemp24(f *float64) *MetarUpdate {
	if f != nil {
		mu.SetMinTemp24(*f)
	}
	return mu
}

// AddMinTemp24 adds f to the "min_temp_24" field.
func (mu *MetarUpdate) AddMinTemp24(f float64) *MetarUpdate {
	mu.mutation.AddMinTemp24(f)
	return mu
}

// ClearMinTemp24 clears the value of the "min_temp_24" field.
func (mu *MetarUpdate) ClearMinTemp24() *MetarUpdate {
	mu.mutation.ClearMinTemp24()
	return mu
}

// SetPrecipitation sets the "precipitation" field.
func (mu *MetarUpdate) SetPrecipitation(f float64) *MetarUpdate {
	mu.mutation.ResetPrecipitation()
	mu.mutation.SetPrecipitation(f)
	return mu
}

// SetNillablePrecipitation sets the "precipitation" field if the given value is not nil.
func (mu *MetarUpdate) SetNillablePrecipitation(f *float64) *MetarUpdate {
	if f != nil {
		mu.SetPrecipitation(*f)
	}
	return mu
}

// AddPrecipitation adds f to the "precipitation" field.
func (mu *MetarUpdate) AddPrecipitation(f float64) *MetarUpdate {
	mu.mutation.AddPrecipitation(f)
	return mu
}

// ClearPrecipitation clears the value of the "precipitation" field.
func (mu *MetarUpdate) ClearPrecipitation() *MetarUpdate {
	mu.mutation.ClearPrecipitation()
	return mu
}

// SetPrecipitation3 sets the "precipitation_3" field.
func (mu *MetarUpdate) SetPrecipitation3(f float64) *MetarUpdate {
	mu.mutation.ResetPrecipitation3()
	mu.mutation.SetPrecipitation3(f)
	return mu
}

// SetNillablePrecipitation3 sets the "precipitation_3" field if the given value is not nil.
func (mu *MetarUpdate) SetNillablePrecipitation3(f *float64) *MetarUpdate {
	if f != nil {
		mu.SetPrecipitation3(*f)
	}
	return mu
}

// AddPrecipitation3 adds f to the "precipitation_3" field.
func (mu *MetarUpdate) AddPrecipitation3(f float64) *MetarUpdate {
	mu.mutation.AddPrecipitation3(f)
	return mu
}

// ClearPrecipitation3 clears the value of the "precipitation_3" field.
func (mu *MetarUpdate) ClearPrecipitation3() *MetarUpdate {
	mu.mutation.ClearPrecipitation3()
	return mu
}

// SetPrecipitation6 sets the "precipitation_6" field.
func (mu *MetarUpdate) SetPrecipitation6(f float64) *MetarUpdate {
	mu.mutation.ResetPrecipitation6()
	mu.mutation.SetPrecipitation6(f)
	return mu
}

// SetNillablePrecipitation6 sets the "precipitation_6" field if the given value is not nil.
func (mu *MetarUpdate) SetNillablePrecipitation6(f *float64) *MetarUpdate {
	if f != nil {
		mu.SetPrecipitation6(*f)
	}
	return mu
}

// AddPrecipitation6 adds f to the "precipitation_6" field.
func (mu *MetarUpdate) AddPrecipitation6(f float64) *MetarUpdate {
	mu.mutation.AddPrecipitation6(f)
	return mu
}

// ClearPrecipitation6 clears the value of the "precipitation_6" field.
func (mu *MetarUpdate) ClearPrecipitation6() *MetarUpdate {
	mu.mutation.ClearPrecipitation6()
	return mu
}

// SetPrecipitation24 sets the "precipitation_24" field.
func (mu *MetarUpdate) SetPrecipitation24(f float64) *MetarUpdate {
	mu.mutation.ResetPrecipitation24()
	mu.mutation.SetPrecipitation24(f)
	return mu
}

// SetNillablePrecipitation24 sets the "precipitation_24" field if the given value is not nil.
func (mu *MetarUpdate) SetNillablePrecipitation24(f *float64) *MetarUpdate {
	if f != nil {
		mu.SetPrecipitation24(*f)
	}
	return mu
}

// AddPrecipitation24 adds f to the "precipitation_24" field.
func (mu *MetarUpdate) AddPrecipitation24(f float64) *MetarUpdate {
	mu.mutation.AddPrecipitation24(f)
	return mu
}

// ClearPrecipitation24 clears the value of the "precipitation_24" field.
func (mu *MetarUpdate) ClearPrecipitation24() *MetarUpdate {
	mu.mutation.ClearPrecipitation24()
	return mu
}

// SetSnowDepth sets the "snow_depth" field.
func (mu *MetarUpdate) SetSnowDepth(f float64) *MetarUpdate {
	mu.mutation.ResetSnowDepth()
	mu.mutation.SetSnowDepth(f)
	return mu
}

// SetNillableSnowDepth sets the "snow_depth" field if the given value is not nil.
func (mu *MetarUpdate) SetNillableSnowDepth(f *float64) *MetarUpdate {
	if f != nil {
		mu.SetSnowDepth(*f)
	}
	return mu
}

// AddSnowDepth adds f to the "snow_depth" field.
func (mu *MetarUpdate) AddSnowDepth(f float64) *MetarUpdate {
	mu.mutation.AddSnowDepth(f)
	return mu
}

// ClearSnowDepth clears the value of the "snow_depth" field.
func (mu *MetarUpdate) ClearSnowDepth() *MetarUpdate {
	mu.mutation.ClearSnowDepth()
	return mu
}

// SetVertVis sets the "vert_vis" field.
func (mu *MetarUpdate) SetVertVis(f float64) *MetarUpdate {
	mu.mutation.ResetVertVis()
	mu.mutation.SetVertVis(f)
	return mu
}

// SetNillableVertVis sets the "vert_vis" field if the given value is not nil.
func (mu *MetarUpdate) SetNillableVertVis(f *float64) *MetarUpdate {
	if f != nil {
		mu.SetVertVis(*f)
	}
	return mu
}

// AddVertVis adds f to the "vert_vis" field.
func (mu *MetarUpdate) AddVertVis(f float64) *MetarUpdate {
	mu.mutation.AddVertVis(f)
	return mu
}

// ClearVertVis clears the value of the "vert_vis" field.
func (mu *MetarUpdate) ClearVertVis() *MetarUpdate {
	mu.mutation.ClearVertVis()
	return mu
}

// SetMetarType sets the "metar_type" field.
func (mu *MetarUpdate) SetMetarType(mt metar.MetarType) *MetarUpdate {
	mu.mutation.SetMetarType(mt)
	return mu
}

// SetHash sets the "hash" field.
func (mu *MetarUpdate) SetHash(s string) *MetarUpdate {
	mu.mutation.SetHash(s)
	return mu
}

// SetStationID sets the "station" edge to the WeatherStation entity by ID.
func (mu *MetarUpdate) SetStationID(id uuid.UUID) *MetarUpdate {
	mu.mutation.SetStationID(id)
	return mu
}

// SetStation sets the "station" edge to the WeatherStation entity.
func (mu *MetarUpdate) SetStation(w *WeatherStation) *MetarUpdate {
	return mu.SetStationID(w.ID)
}

// AddSkyConditionIDs adds the "sky_conditions" edge to the SkyCondition entity by IDs.
func (mu *MetarUpdate) AddSkyConditionIDs(ids ...uuid.UUID) *MetarUpdate {
	mu.mutation.AddSkyConditionIDs(ids...)
	return mu
}

// AddSkyConditions adds the "sky_conditions" edges to the SkyCondition entity.
func (mu *MetarUpdate) AddSkyConditions(s ...*SkyCondition) *MetarUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mu.AddSkyConditionIDs(ids...)
}

// Mutation returns the MetarMutation object of the builder.
func (mu *MetarUpdate) Mutation() *MetarMutation {
	return mu.mutation
}

// ClearStation clears the "station" edge to the WeatherStation entity.
func (mu *MetarUpdate) ClearStation() *MetarUpdate {
	mu.mutation.ClearStation()
	return mu
}

// ClearSkyConditions clears all "sky_conditions" edges to the SkyCondition entity.
func (mu *MetarUpdate) ClearSkyConditions() *MetarUpdate {
	mu.mutation.ClearSkyConditions()
	return mu
}

// RemoveSkyConditionIDs removes the "sky_conditions" edge to SkyCondition entities by IDs.
func (mu *MetarUpdate) RemoveSkyConditionIDs(ids ...uuid.UUID) *MetarUpdate {
	mu.mutation.RemoveSkyConditionIDs(ids...)
	return mu
}

// RemoveSkyConditions removes "sky_conditions" edges to SkyCondition entities.
func (mu *MetarUpdate) RemoveSkyConditions(s ...*SkyCondition) *MetarUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mu.RemoveSkyConditionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MetarUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MetarUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MetarUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MetarUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MetarUpdate) check() error {
	if v, ok := mu.mutation.FlightCategory(); ok {
		if err := metar.FlightCategoryValidator(v); err != nil {
			return &ValidationError{Name: "flight_category", err: fmt.Errorf(`ent: validator failed for field "Metar.flight_category": %w`, err)}
		}
	}
	if v, ok := mu.mutation.MetarType(); ok {
		if err := metar.MetarTypeValidator(v); err != nil {
			return &ValidationError{Name: "metar_type", err: fmt.Errorf(`ent: validator failed for field "Metar.metar_type": %w`, err)}
		}
	}
	if _, ok := mu.mutation.StationID(); mu.mutation.StationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Metar.station"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mu *MetarUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MetarUpdate {
	mu.modifiers = append(mu.modifiers, modifiers...)
	return mu
}

func (mu *MetarUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(metar.Table, metar.Columns, sqlgraph.NewFieldSpec(metar.FieldID, field.TypeUUID))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.RawText(); ok {
		_spec.SetField(metar.FieldRawText, field.TypeString, value)
	}
	if value, ok := mu.mutation.ObservationTime(); ok {
		_spec.SetField(metar.FieldObservationTime, field.TypeTime, value)
	}
	if value, ok := mu.mutation.ImportTime(); ok {
		_spec.SetField(metar.FieldImportTime, field.TypeTime, value)
	}
	if value, ok := mu.mutation.NextImportTimePrediction(); ok {
		_spec.SetField(metar.FieldNextImportTimePrediction, field.TypeTime, value)
	}
	if mu.mutation.NextImportTimePredictionCleared() {
		_spec.ClearField(metar.FieldNextImportTimePrediction, field.TypeTime)
	}
	if value, ok := mu.mutation.Temperature(); ok {
		_spec.SetField(metar.FieldTemperature, field.TypeFloat64, value)
	}
	if value, ok := mu.mutation.AddedTemperature(); ok {
		_spec.AddField(metar.FieldTemperature, field.TypeFloat64, value)
	}
	if mu.mutation.TemperatureCleared() {
		_spec.ClearField(metar.FieldTemperature, field.TypeFloat64)
	}
	if value, ok := mu.mutation.Dewpoint(); ok {
		_spec.SetField(metar.FieldDewpoint, field.TypeFloat64, value)
	}
	if value, ok := mu.mutation.AddedDewpoint(); ok {
		_spec.AddField(metar.FieldDewpoint, field.TypeFloat64, value)
	}
	if mu.mutation.DewpointCleared() {
		_spec.ClearField(metar.FieldDewpoint, field.TypeFloat64)
	}
	if value, ok := mu.mutation.WindSpeed(); ok {
		_spec.SetField(metar.FieldWindSpeed, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedWindSpeed(); ok {
		_spec.AddField(metar.FieldWindSpeed, field.TypeInt, value)
	}
	if mu.mutation.WindSpeedCleared() {
		_spec.ClearField(metar.FieldWindSpeed, field.TypeInt)
	}
	if value, ok := mu.mutation.WindGust(); ok {
		_spec.SetField(metar.FieldWindGust, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedWindGust(); ok {
		_spec.AddField(metar.FieldWindGust, field.TypeInt, value)
	}
	if mu.mutation.WindGustCleared() {
		_spec.ClearField(metar.FieldWindGust, field.TypeInt)
	}
	if value, ok := mu.mutation.WindDirection(); ok {
		_spec.SetField(metar.FieldWindDirection, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedWindDirection(); ok {
		_spec.AddField(metar.FieldWindDirection, field.TypeInt, value)
	}
	if mu.mutation.WindDirectionCleared() {
		_spec.ClearField(metar.FieldWindDirection, field.TypeInt)
	}
	if value, ok := mu.mutation.WindDirectionVariable(); ok {
		_spec.SetField(metar.FieldWindDirectionVariable, field.TypeBool, value)
	}
	if value, ok := mu.mutation.Visibility(); ok {
		_spec.SetField(metar.FieldVisibility, field.TypeFloat64, value)
	}
	if value, ok := mu.mutation.AddedVisibility(); ok {
		_spec.AddField(metar.FieldVisibility, field.TypeFloat64, value)
	}
	if mu.mutation.VisibilityCleared() {
		_spec.ClearField(metar.FieldVisibility, field.TypeFloat64)
	}
	if value, ok := mu.mutation.VisibilityIsMoreThan(); ok {
		_spec.SetField(metar.FieldVisibilityIsMoreThan, field.TypeBool, value)
	}
	if value, ok := mu.mutation.Altimeter(); ok {
		_spec.SetField(metar.FieldAltimeter, field.TypeFloat64, value)
	}
	if value, ok := mu.mutation.AddedAltimeter(); ok {
		_spec.AddField(metar.FieldAltimeter, field.TypeFloat64, value)
	}
	if mu.mutation.AltimeterCleared() {
		_spec.ClearField(metar.FieldAltimeter, field.TypeFloat64)
	}
	if value, ok := mu.mutation.PresentWeather(); ok {
		_spec.SetField(metar.FieldPresentWeather, field.TypeString, value)
	}
	if mu.mutation.PresentWeatherCleared() {
		_spec.ClearField(metar.FieldPresentWeather, field.TypeString)
	}
	if value, ok := mu.mutation.FlightCategory(); ok {
		_spec.SetField(metar.FieldFlightCategory, field.TypeEnum, value)
	}
	if mu.mutation.FlightCategoryCleared() {
		_spec.ClearField(metar.FieldFlightCategory, field.TypeEnum)
	}
	if value, ok := mu.mutation.QualityControlCorrected(); ok {
		_spec.SetField(metar.FieldQualityControlCorrected, field.TypeBool, value)
	}
	if mu.mutation.QualityControlCorrectedCleared() {
		_spec.ClearField(metar.FieldQualityControlCorrected, field.TypeBool)
	}
	if value, ok := mu.mutation.QualityControlAutoStation(); ok {
		_spec.SetField(metar.FieldQualityControlAutoStation, field.TypeBool, value)
	}
	if value, ok := mu.mutation.QualityControlMaintenanceIndicatorOn(); ok {
		_spec.SetField(metar.FieldQualityControlMaintenanceIndicatorOn, field.TypeBool, value)
	}
	if value, ok := mu.mutation.QualityControlNoSignal(); ok {
		_spec.SetField(metar.FieldQualityControlNoSignal, field.TypeBool, value)
	}
	if value, ok := mu.mutation.QualityControlLightningSensorOff(); ok {
		_spec.SetField(metar.FieldQualityControlLightningSensorOff, field.TypeBool, value)
	}
	if value, ok := mu.mutation.QualityControlFreezingRainSensorOff(); ok {
		_spec.SetField(metar.FieldQualityControlFreezingRainSensorOff, field.TypeBool, value)
	}
	if value, ok := mu.mutation.QualityControlPresentWeatherSensorOff(); ok {
		_spec.SetField(metar.FieldQualityControlPresentWeatherSensorOff, field.TypeBool, value)
	}
	if value, ok := mu.mutation.SeaLevelPressure(); ok {
		_spec.SetField(metar.FieldSeaLevelPressure, field.TypeFloat64, value)
	}
	if value, ok := mu.mutation.AddedSeaLevelPressure(); ok {
		_spec.AddField(metar.FieldSeaLevelPressure, field.TypeFloat64, value)
	}
	if mu.mutation.SeaLevelPressureCleared() {
		_spec.ClearField(metar.FieldSeaLevelPressure, field.TypeFloat64)
	}
	if value, ok := mu.mutation.PressureTendency(); ok {
		_spec.SetField(metar.FieldPressureTendency, field.TypeFloat64, value)
	}
	if value, ok := mu.mutation.AddedPressureTendency(); ok {
		_spec.AddField(metar.FieldPressureTendency, field.TypeFloat64, value)
	}
	if mu.mutation.PressureTendencyCleared() {
		_spec.ClearField(metar.FieldPressureTendency, field.TypeFloat64)
	}
	if value, ok := mu.mutation.MaxTemp6(); ok {
		_spec.SetField(metar.FieldMaxTemp6, field.TypeFloat64, value)
	}
	if value, ok := mu.mutation.AddedMaxTemp6(); ok {
		_spec.AddField(metar.FieldMaxTemp6, field.TypeFloat64, value)
	}
	if mu.mutation.MaxTemp6Cleared() {
		_spec.ClearField(metar.FieldMaxTemp6, field.TypeFloat64)
	}
	if value, ok := mu.mutation.MinTemp6(); ok {
		_spec.SetField(metar.FieldMinTemp6, field.TypeFloat64, value)
	}
	if value, ok := mu.mutation.AddedMinTemp6(); ok {
		_spec.AddField(metar.FieldMinTemp6, field.TypeFloat64, value)
	}
	if mu.mutation.MinTemp6Cleared() {
		_spec.ClearField(metar.FieldMinTemp6, field.TypeFloat64)
	}
	if value, ok := mu.mutation.MaxTemp24(); ok {
		_spec.SetField(metar.FieldMaxTemp24, field.TypeFloat64, value)
	}
	if value, ok := mu.mutation.AddedMaxTemp24(); ok {
		_spec.AddField(metar.FieldMaxTemp24, field.TypeFloat64, value)
	}
	if mu.mutation.MaxTemp24Cleared() {
		_spec.ClearField(metar.FieldMaxTemp24, field.TypeFloat64)
	}
	if value, ok := mu.mutation.MinTemp24(); ok {
		_spec.SetField(metar.FieldMinTemp24, field.TypeFloat64, value)
	}
	if value, ok := mu.mutation.AddedMinTemp24(); ok {
		_spec.AddField(metar.FieldMinTemp24, field.TypeFloat64, value)
	}
	if mu.mutation.MinTemp24Cleared() {
		_spec.ClearField(metar.FieldMinTemp24, field.TypeFloat64)
	}
	if value, ok := mu.mutation.Precipitation(); ok {
		_spec.SetField(metar.FieldPrecipitation, field.TypeFloat64, value)
	}
	if value, ok := mu.mutation.AddedPrecipitation(); ok {
		_spec.AddField(metar.FieldPrecipitation, field.TypeFloat64, value)
	}
	if mu.mutation.PrecipitationCleared() {
		_spec.ClearField(metar.FieldPrecipitation, field.TypeFloat64)
	}
	if value, ok := mu.mutation.Precipitation3(); ok {
		_spec.SetField(metar.FieldPrecipitation3, field.TypeFloat64, value)
	}
	if value, ok := mu.mutation.AddedPrecipitation3(); ok {
		_spec.AddField(metar.FieldPrecipitation3, field.TypeFloat64, value)
	}
	if mu.mutation.Precipitation3Cleared() {
		_spec.ClearField(metar.FieldPrecipitation3, field.TypeFloat64)
	}
	if value, ok := mu.mutation.Precipitation6(); ok {
		_spec.SetField(metar.FieldPrecipitation6, field.TypeFloat64, value)
	}
	if value, ok := mu.mutation.AddedPrecipitation6(); ok {
		_spec.AddField(metar.FieldPrecipitation6, field.TypeFloat64, value)
	}
	if mu.mutation.Precipitation6Cleared() {
		_spec.ClearField(metar.FieldPrecipitation6, field.TypeFloat64)
	}
	if value, ok := mu.mutation.Precipitation24(); ok {
		_spec.SetField(metar.FieldPrecipitation24, field.TypeFloat64, value)
	}
	if value, ok := mu.mutation.AddedPrecipitation24(); ok {
		_spec.AddField(metar.FieldPrecipitation24, field.TypeFloat64, value)
	}
	if mu.mutation.Precipitation24Cleared() {
		_spec.ClearField(metar.FieldPrecipitation24, field.TypeFloat64)
	}
	if value, ok := mu.mutation.SnowDepth(); ok {
		_spec.SetField(metar.FieldSnowDepth, field.TypeFloat64, value)
	}
	if value, ok := mu.mutation.AddedSnowDepth(); ok {
		_spec.AddField(metar.FieldSnowDepth, field.TypeFloat64, value)
	}
	if mu.mutation.SnowDepthCleared() {
		_spec.ClearField(metar.FieldSnowDepth, field.TypeFloat64)
	}
	if value, ok := mu.mutation.VertVis(); ok {
		_spec.SetField(metar.FieldVertVis, field.TypeFloat64, value)
	}
	if value, ok := mu.mutation.AddedVertVis(); ok {
		_spec.AddField(metar.FieldVertVis, field.TypeFloat64, value)
	}
	if mu.mutation.VertVisCleared() {
		_spec.ClearField(metar.FieldVertVis, field.TypeFloat64)
	}
	if value, ok := mu.mutation.MetarType(); ok {
		_spec.SetField(metar.FieldMetarType, field.TypeEnum, value)
	}
	if value, ok := mu.mutation.Hash(); ok {
		_spec.SetField(metar.FieldHash, field.TypeString, value)
	}
	if mu.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   metar.StationTable,
			Columns: []string{metar.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weatherstation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   metar.StationTable,
			Columns: []string{metar.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weatherstation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.SkyConditionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metar.SkyConditionsTable,
			Columns: []string{metar.SkyConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skycondition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedSkyConditionsIDs(); len(nodes) > 0 && !mu.mutation.SkyConditionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metar.SkyConditionsTable,
			Columns: []string{metar.SkyConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skycondition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.SkyConditionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metar.SkyConditionsTable,
			Columns: []string{metar.SkyConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skycondition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metar.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MetarUpdateOne is the builder for updating a single Metar entity.
type MetarUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MetarMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetRawText sets the "raw_text" field.
func (muo *MetarUpdateOne) SetRawText(s string) *MetarUpdateOne {
	muo.mutation.SetRawText(s)
	return muo
}

// SetObservationTime sets the "observation_time" field.
func (muo *MetarUpdateOne) SetObservationTime(t time.Time) *MetarUpdateOne {
	muo.mutation.SetObservationTime(t)
	return muo
}

// SetImportTime sets the "import_time" field.
func (muo *MetarUpdateOne) SetImportTime(t time.Time) *MetarUpdateOne {
	muo.mutation.SetImportTime(t)
	return muo
}

// SetNillableImportTime sets the "import_time" field if the given value is not nil.
func (muo *MetarUpdateOne) SetNillableImportTime(t *time.Time) *MetarUpdateOne {
	if t != nil {
		muo.SetImportTime(*t)
	}
	return muo
}

// SetNextImportTimePrediction sets the "next_import_time_prediction" field.
func (muo *MetarUpdateOne) SetNextImportTimePrediction(t time.Time) *MetarUpdateOne {
	muo.mutation.SetNextImportTimePrediction(t)
	return muo
}

// SetNillableNextImportTimePrediction sets the "next_import_time_prediction" field if the given value is not nil.
func (muo *MetarUpdateOne) SetNillableNextImportTimePrediction(t *time.Time) *MetarUpdateOne {
	if t != nil {
		muo.SetNextImportTimePrediction(*t)
	}
	return muo
}

// ClearNextImportTimePrediction clears the value of the "next_import_time_prediction" field.
func (muo *MetarUpdateOne) ClearNextImportTimePrediction() *MetarUpdateOne {
	muo.mutation.ClearNextImportTimePrediction()
	return muo
}

// SetTemperature sets the "temperature" field.
func (muo *MetarUpdateOne) SetTemperature(f float64) *MetarUpdateOne {
	muo.mutation.ResetTemperature()
	muo.mutation.SetTemperature(f)
	return muo
}

// SetNillableTemperature sets the "temperature" field if the given value is not nil.
func (muo *MetarUpdateOne) SetNillableTemperature(f *float64) *MetarUpdateOne {
	if f != nil {
		muo.SetTemperature(*f)
	}
	return muo
}

// AddTemperature adds f to the "temperature" field.
func (muo *MetarUpdateOne) AddTemperature(f float64) *MetarUpdateOne {
	muo.mutation.AddTemperature(f)
	return muo
}

// ClearTemperature clears the value of the "temperature" field.
func (muo *MetarUpdateOne) ClearTemperature() *MetarUpdateOne {
	muo.mutation.ClearTemperature()
	return muo
}

// SetDewpoint sets the "dewpoint" field.
func (muo *MetarUpdateOne) SetDewpoint(f float64) *MetarUpdateOne {
	muo.mutation.ResetDewpoint()
	muo.mutation.SetDewpoint(f)
	return muo
}

// SetNillableDewpoint sets the "dewpoint" field if the given value is not nil.
func (muo *MetarUpdateOne) SetNillableDewpoint(f *float64) *MetarUpdateOne {
	if f != nil {
		muo.SetDewpoint(*f)
	}
	return muo
}

// AddDewpoint adds f to the "dewpoint" field.
func (muo *MetarUpdateOne) AddDewpoint(f float64) *MetarUpdateOne {
	muo.mutation.AddDewpoint(f)
	return muo
}

// ClearDewpoint clears the value of the "dewpoint" field.
func (muo *MetarUpdateOne) ClearDewpoint() *MetarUpdateOne {
	muo.mutation.ClearDewpoint()
	return muo
}

// SetWindSpeed sets the "wind_speed" field.
func (muo *MetarUpdateOne) SetWindSpeed(i int) *MetarUpdateOne {
	muo.mutation.ResetWindSpeed()
	muo.mutation.SetWindSpeed(i)
	return muo
}

// SetNillableWindSpeed sets the "wind_speed" field if the given value is not nil.
func (muo *MetarUpdateOne) SetNillableWindSpeed(i *int) *MetarUpdateOne {
	if i != nil {
		muo.SetWindSpeed(*i)
	}
	return muo
}

// AddWindSpeed adds i to the "wind_speed" field.
func (muo *MetarUpdateOne) AddWindSpeed(i int) *MetarUpdateOne {
	muo.mutation.AddWindSpeed(i)
	return muo
}

// ClearWindSpeed clears the value of the "wind_speed" field.
func (muo *MetarUpdateOne) ClearWindSpeed() *MetarUpdateOne {
	muo.mutation.ClearWindSpeed()
	return muo
}

// SetWindGust sets the "wind_gust" field.
func (muo *MetarUpdateOne) SetWindGust(i int) *MetarUpdateOne {
	muo.mutation.ResetWindGust()
	muo.mutation.SetWindGust(i)
	return muo
}

// SetNillableWindGust sets the "wind_gust" field if the given value is not nil.
func (muo *MetarUpdateOne) SetNillableWindGust(i *int) *MetarUpdateOne {
	if i != nil {
		muo.SetWindGust(*i)
	}
	return muo
}

// AddWindGust adds i to the "wind_gust" field.
func (muo *MetarUpdateOne) AddWindGust(i int) *MetarUpdateOne {
	muo.mutation.AddWindGust(i)
	return muo
}

// ClearWindGust clears the value of the "wind_gust" field.
func (muo *MetarUpdateOne) ClearWindGust() *MetarUpdateOne {
	muo.mutation.ClearWindGust()
	return muo
}

// SetWindDirection sets the "wind_direction" field.
func (muo *MetarUpdateOne) SetWindDirection(i int) *MetarUpdateOne {
	muo.mutation.ResetWindDirection()
	muo.mutation.SetWindDirection(i)
	return muo
}

// SetNillableWindDirection sets the "wind_direction" field if the given value is not nil.
func (muo *MetarUpdateOne) SetNillableWindDirection(i *int) *MetarUpdateOne {
	if i != nil {
		muo.SetWindDirection(*i)
	}
	return muo
}

// AddWindDirection adds i to the "wind_direction" field.
func (muo *MetarUpdateOne) AddWindDirection(i int) *MetarUpdateOne {
	muo.mutation.AddWindDirection(i)
	return muo
}

// ClearWindDirection clears the value of the "wind_direction" field.
func (muo *MetarUpdateOne) ClearWindDirection() *MetarUpdateOne {
	muo.mutation.ClearWindDirection()
	return muo
}

// SetWindDirectionVariable sets the "wind_direction_variable" field.
func (muo *MetarUpdateOne) SetWindDirectionVariable(b bool) *MetarUpdateOne {
	muo.mutation.SetWindDirectionVariable(b)
	return muo
}

// SetVisibility sets the "visibility" field.
func (muo *MetarUpdateOne) SetVisibility(f float64) *MetarUpdateOne {
	muo.mutation.ResetVisibility()
	muo.mutation.SetVisibility(f)
	return muo
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (muo *MetarUpdateOne) SetNillableVisibility(f *float64) *MetarUpdateOne {
	if f != nil {
		muo.SetVisibility(*f)
	}
	return muo
}

// AddVisibility adds f to the "visibility" field.
func (muo *MetarUpdateOne) AddVisibility(f float64) *MetarUpdateOne {
	muo.mutation.AddVisibility(f)
	return muo
}

// ClearVisibility clears the value of the "visibility" field.
func (muo *MetarUpdateOne) ClearVisibility() *MetarUpdateOne {
	muo.mutation.ClearVisibility()
	return muo
}

// SetVisibilityIsMoreThan sets the "visibility_is_more_than" field.
func (muo *MetarUpdateOne) SetVisibilityIsMoreThan(b bool) *MetarUpdateOne {
	muo.mutation.SetVisibilityIsMoreThan(b)
	return muo
}

// SetAltimeter sets the "altimeter" field.
func (muo *MetarUpdateOne) SetAltimeter(f float64) *MetarUpdateOne {
	muo.mutation.ResetAltimeter()
	muo.mutation.SetAltimeter(f)
	return muo
}

// SetNillableAltimeter sets the "altimeter" field if the given value is not nil.
func (muo *MetarUpdateOne) SetNillableAltimeter(f *float64) *MetarUpdateOne {
	if f != nil {
		muo.SetAltimeter(*f)
	}
	return muo
}

// AddAltimeter adds f to the "altimeter" field.
func (muo *MetarUpdateOne) AddAltimeter(f float64) *MetarUpdateOne {
	muo.mutation.AddAltimeter(f)
	return muo
}

// ClearAltimeter clears the value of the "altimeter" field.
func (muo *MetarUpdateOne) ClearAltimeter() *MetarUpdateOne {
	muo.mutation.ClearAltimeter()
	return muo
}

// SetPresentWeather sets the "present_weather" field.
func (muo *MetarUpdateOne) SetPresentWeather(s string) *MetarUpdateOne {
	muo.mutation.SetPresentWeather(s)
	return muo
}

// SetNillablePresentWeather sets the "present_weather" field if the given value is not nil.
func (muo *MetarUpdateOne) SetNillablePresentWeather(s *string) *MetarUpdateOne {
	if s != nil {
		muo.SetPresentWeather(*s)
	}
	return muo
}

// ClearPresentWeather clears the value of the "present_weather" field.
func (muo *MetarUpdateOne) ClearPresentWeather() *MetarUpdateOne {
	muo.mutation.ClearPresentWeather()
	return muo
}

// SetFlightCategory sets the "flight_category" field.
func (muo *MetarUpdateOne) SetFlightCategory(mc metar.FlightCategory) *MetarUpdateOne {
	muo.mutation.SetFlightCategory(mc)
	return muo
}

// SetNillableFlightCategory sets the "flight_category" field if the given value is not nil.
func (muo *MetarUpdateOne) SetNillableFlightCategory(mc *metar.FlightCategory) *MetarUpdateOne {
	if mc != nil {
		muo.SetFlightCategory(*mc)
	}
	return muo
}

// ClearFlightCategory clears the value of the "flight_category" field.
func (muo *MetarUpdateOne) ClearFlightCategory() *MetarUpdateOne {
	muo.mutation.ClearFlightCategory()
	return muo
}

// SetQualityControlCorrected sets the "quality_control_corrected" field.
func (muo *MetarUpdateOne) SetQualityControlCorrected(b bool) *MetarUpdateOne {
	muo.mutation.SetQualityControlCorrected(b)
	return muo
}

// SetNillableQualityControlCorrected sets the "quality_control_corrected" field if the given value is not nil.
func (muo *MetarUpdateOne) SetNillableQualityControlCorrected(b *bool) *MetarUpdateOne {
	if b != nil {
		muo.SetQualityControlCorrected(*b)
	}
	return muo
}

// ClearQualityControlCorrected clears the value of the "quality_control_corrected" field.
func (muo *MetarUpdateOne) ClearQualityControlCorrected() *MetarUpdateOne {
	muo.mutation.ClearQualityControlCorrected()
	return muo
}

// SetQualityControlAutoStation sets the "quality_control_auto_station" field.
func (muo *MetarUpdateOne) SetQualityControlAutoStation(b bool) *MetarUpdateOne {
	muo.mutation.SetQualityControlAutoStation(b)
	return muo
}

// SetQualityControlMaintenanceIndicatorOn sets the "quality_control_maintenance_indicator_on" field.
func (muo *MetarUpdateOne) SetQualityControlMaintenanceIndicatorOn(b bool) *MetarUpdateOne {
	muo.mutation.SetQualityControlMaintenanceIndicatorOn(b)
	return muo
}

// SetQualityControlNoSignal sets the "quality_control_no_signal" field.
func (muo *MetarUpdateOne) SetQualityControlNoSignal(b bool) *MetarUpdateOne {
	muo.mutation.SetQualityControlNoSignal(b)
	return muo
}

// SetQualityControlLightningSensorOff sets the "quality_control_lightning_sensor_off" field.
func (muo *MetarUpdateOne) SetQualityControlLightningSensorOff(b bool) *MetarUpdateOne {
	muo.mutation.SetQualityControlLightningSensorOff(b)
	return muo
}

// SetQualityControlFreezingRainSensorOff sets the "quality_control_freezing_rain_sensor_off" field.
func (muo *MetarUpdateOne) SetQualityControlFreezingRainSensorOff(b bool) *MetarUpdateOne {
	muo.mutation.SetQualityControlFreezingRainSensorOff(b)
	return muo
}

// SetQualityControlPresentWeatherSensorOff sets the "quality_control_present_weather_sensor_off" field.
func (muo *MetarUpdateOne) SetQualityControlPresentWeatherSensorOff(b bool) *MetarUpdateOne {
	muo.mutation.SetQualityControlPresentWeatherSensorOff(b)
	return muo
}

// SetSeaLevelPressure sets the "sea_level_pressure" field.
func (muo *MetarUpdateOne) SetSeaLevelPressure(f float64) *MetarUpdateOne {
	muo.mutation.ResetSeaLevelPressure()
	muo.mutation.SetSeaLevelPressure(f)
	return muo
}

// SetNillableSeaLevelPressure sets the "sea_level_pressure" field if the given value is not nil.
func (muo *MetarUpdateOne) SetNillableSeaLevelPressure(f *float64) *MetarUpdateOne {
	if f != nil {
		muo.SetSeaLevelPressure(*f)
	}
	return muo
}

// AddSeaLevelPressure adds f to the "sea_level_pressure" field.
func (muo *MetarUpdateOne) AddSeaLevelPressure(f float64) *MetarUpdateOne {
	muo.mutation.AddSeaLevelPressure(f)
	return muo
}

// ClearSeaLevelPressure clears the value of the "sea_level_pressure" field.
func (muo *MetarUpdateOne) ClearSeaLevelPressure() *MetarUpdateOne {
	muo.mutation.ClearSeaLevelPressure()
	return muo
}

// SetPressureTendency sets the "pressure_tendency" field.
func (muo *MetarUpdateOne) SetPressureTendency(f float64) *MetarUpdateOne {
	muo.mutation.ResetPressureTendency()
	muo.mutation.SetPressureTendency(f)
	return muo
}

// SetNillablePressureTendency sets the "pressure_tendency" field if the given value is not nil.
func (muo *MetarUpdateOne) SetNillablePressureTendency(f *float64) *MetarUpdateOne {
	if f != nil {
		muo.SetPressureTendency(*f)
	}
	return muo
}

// AddPressureTendency adds f to the "pressure_tendency" field.
func (muo *MetarUpdateOne) AddPressureTendency(f float64) *MetarUpdateOne {
	muo.mutation.AddPressureTendency(f)
	return muo
}

// ClearPressureTendency clears the value of the "pressure_tendency" field.
func (muo *MetarUpdateOne) ClearPressureTendency() *MetarUpdateOne {
	muo.mutation.ClearPressureTendency()
	return muo
}

// SetMaxTemp6 sets the "max_temp_6" field.
func (muo *MetarUpdateOne) SetMaxTemp6(f float64) *MetarUpdateOne {
	muo.mutation.ResetMaxTemp6()
	muo.mutation.SetMaxTemp6(f)
	return muo
}

// SetNillableMaxTemp6 sets the "max_temp_6" field if the given value is not nil.
func (muo *MetarUpdateOne) SetNillableMaxTemp6(f *float64) *MetarUpdateOne {
	if f != nil {
		muo.SetMaxTemp6(*f)
	}
	return muo
}

// AddMaxTemp6 adds f to the "max_temp_6" field.
func (muo *MetarUpdateOne) AddMaxTemp6(f float64) *MetarUpdateOne {
	muo.mutation.AddMaxTemp6(f)
	return muo
}

// ClearMaxTemp6 clears the value of the "max_temp_6" field.
func (muo *MetarUpdateOne) ClearMaxTemp6() *MetarUpdateOne {
	muo.mutation.ClearMaxTemp6()
	return muo
}

// SetMinTemp6 sets the "min_temp_6" field.
func (muo *MetarUpdateOne) SetMinTemp6(f float64) *MetarUpdateOne {
	muo.mutation.ResetMinTemp6()
	muo.mutation.SetMinTemp6(f)
	return muo
}

// SetNillableMinTemp6 sets the "min_temp_6" field if the given value is not nil.
func (muo *MetarUpdateOne) SetNillableMinTemp6(f *float64) *MetarUpdateOne {
	if f != nil {
		muo.SetMinTemp6(*f)
	}
	return muo
}

// AddMinTemp6 adds f to the "min_temp_6" field.
func (muo *MetarUpdateOne) AddMinTemp6(f float64) *MetarUpdateOne {
	muo.mutation.AddMinTemp6(f)
	return muo
}

// ClearMinTemp6 clears the value of the "min_temp_6" field.
func (muo *MetarUpdateOne) ClearMinTemp6() *MetarUpdateOne {
	muo.mutation.ClearMinTemp6()
	return muo
}

// SetMaxTemp24 sets the "max_temp_24" field.
func (muo *MetarUpdateOne) SetMaxTemp24(f float64) *MetarUpdateOne {
	muo.mutation.ResetMaxTemp24()
	muo.mutation.SetMaxTemp24(f)
	return muo
}

// SetNillableMaxTemp24 sets the "max_temp_24" field if the given value is not nil.
func (muo *MetarUpdateOne) SetNillableMaxTemp24(f *float64) *MetarUpdateOne {
	if f != nil {
		muo.SetMaxTemp24(*f)
	}
	return muo
}

// AddMaxTemp24 adds f to the "max_temp_24" field.
func (muo *MetarUpdateOne) AddMaxTemp24(f float64) *MetarUpdateOne {
	muo.mutation.AddMaxTemp24(f)
	return muo
}

// ClearMaxTemp24 clears the value of the "max_temp_24" field.
func (muo *MetarUpdateOne) ClearMaxTemp24() *MetarUpdateOne {
	muo.mutation.ClearMaxTemp24()
	return muo
}

// SetMinTemp24 sets the "min_temp_24" field.
func (muo *MetarUpdateOne) SetMinTemp24(f float64) *MetarUpdateOne {
	muo.mutation.ResetMinTemp24()
	muo.mutation.SetMinTemp24(f)
	return muo
}

// SetNillableMinTemp24 sets the "min_temp_24" field if the given value is not nil.
func (muo *MetarUpdateOne) SetNillableMinTemp24(f *float64) *MetarUpdateOne {
	if f != nil {
		muo.SetMinTemp24(*f)
	}
	return muo
}

// AddMinTemp24 adds f to the "min_temp_24" field.
func (muo *MetarUpdateOne) AddMinTemp24(f float64) *MetarUpdateOne {
	muo.mutation.AddMinTemp24(f)
	return muo
}

// ClearMinTemp24 clears the value of the "min_temp_24" field.
func (muo *MetarUpdateOne) ClearMinTemp24() *MetarUpdateOne {
	muo.mutation.ClearMinTemp24()
	return muo
}

// SetPrecipitation sets the "precipitation" field.
func (muo *MetarUpdateOne) SetPrecipitation(f float64) *MetarUpdateOne {
	muo.mutation.ResetPrecipitation()
	muo.mutation.SetPrecipitation(f)
	return muo
}

// SetNillablePrecipitation sets the "precipitation" field if the given value is not nil.
func (muo *MetarUpdateOne) SetNillablePrecipitation(f *float64) *MetarUpdateOne {
	if f != nil {
		muo.SetPrecipitation(*f)
	}
	return muo
}

// AddPrecipitation adds f to the "precipitation" field.
func (muo *MetarUpdateOne) AddPrecipitation(f float64) *MetarUpdateOne {
	muo.mutation.AddPrecipitation(f)
	return muo
}

// ClearPrecipitation clears the value of the "precipitation" field.
func (muo *MetarUpdateOne) ClearPrecipitation() *MetarUpdateOne {
	muo.mutation.ClearPrecipitation()
	return muo
}

// SetPrecipitation3 sets the "precipitation_3" field.
func (muo *MetarUpdateOne) SetPrecipitation3(f float64) *MetarUpdateOne {
	muo.mutation.ResetPrecipitation3()
	muo.mutation.SetPrecipitation3(f)
	return muo
}

// SetNillablePrecipitation3 sets the "precipitation_3" field if the given value is not nil.
func (muo *MetarUpdateOne) SetNillablePrecipitation3(f *float64) *MetarUpdateOne {
	if f != nil {
		muo.SetPrecipitation3(*f)
	}
	return muo
}

// AddPrecipitation3 adds f to the "precipitation_3" field.
func (muo *MetarUpdateOne) AddPrecipitation3(f float64) *MetarUpdateOne {
	muo.mutation.AddPrecipitation3(f)
	return muo
}

// ClearPrecipitation3 clears the value of the "precipitation_3" field.
func (muo *MetarUpdateOne) ClearPrecipitation3() *MetarUpdateOne {
	muo.mutation.ClearPrecipitation3()
	return muo
}

// SetPrecipitation6 sets the "precipitation_6" field.
func (muo *MetarUpdateOne) SetPrecipitation6(f float64) *MetarUpdateOne {
	muo.mutation.ResetPrecipitation6()
	muo.mutation.SetPrecipitation6(f)
	return muo
}

// SetNillablePrecipitation6 sets the "precipitation_6" field if the given value is not nil.
func (muo *MetarUpdateOne) SetNillablePrecipitation6(f *float64) *MetarUpdateOne {
	if f != nil {
		muo.SetPrecipitation6(*f)
	}
	return muo
}

// AddPrecipitation6 adds f to the "precipitation_6" field.
func (muo *MetarUpdateOne) AddPrecipitation6(f float64) *MetarUpdateOne {
	muo.mutation.AddPrecipitation6(f)
	return muo
}

// ClearPrecipitation6 clears the value of the "precipitation_6" field.
func (muo *MetarUpdateOne) ClearPrecipitation6() *MetarUpdateOne {
	muo.mutation.ClearPrecipitation6()
	return muo
}

// SetPrecipitation24 sets the "precipitation_24" field.
func (muo *MetarUpdateOne) SetPrecipitation24(f float64) *MetarUpdateOne {
	muo.mutation.ResetPrecipitation24()
	muo.mutation.SetPrecipitation24(f)
	return muo
}

// SetNillablePrecipitation24 sets the "precipitation_24" field if the given value is not nil.
func (muo *MetarUpdateOne) SetNillablePrecipitation24(f *float64) *MetarUpdateOne {
	if f != nil {
		muo.SetPrecipitation24(*f)
	}
	return muo
}

// AddPrecipitation24 adds f to the "precipitation_24" field.
func (muo *MetarUpdateOne) AddPrecipitation24(f float64) *MetarUpdateOne {
	muo.mutation.AddPrecipitation24(f)
	return muo
}

// ClearPrecipitation24 clears the value of the "precipitation_24" field.
func (muo *MetarUpdateOne) ClearPrecipitation24() *MetarUpdateOne {
	muo.mutation.ClearPrecipitation24()
	return muo
}

// SetSnowDepth sets the "snow_depth" field.
func (muo *MetarUpdateOne) SetSnowDepth(f float64) *MetarUpdateOne {
	muo.mutation.ResetSnowDepth()
	muo.mutation.SetSnowDepth(f)
	return muo
}

// SetNillableSnowDepth sets the "snow_depth" field if the given value is not nil.
func (muo *MetarUpdateOne) SetNillableSnowDepth(f *float64) *MetarUpdateOne {
	if f != nil {
		muo.SetSnowDepth(*f)
	}
	return muo
}

// AddSnowDepth adds f to the "snow_depth" field.
func (muo *MetarUpdateOne) AddSnowDepth(f float64) *MetarUpdateOne {
	muo.mutation.AddSnowDepth(f)
	return muo
}

// ClearSnowDepth clears the value of the "snow_depth" field.
func (muo *MetarUpdateOne) ClearSnowDepth() *MetarUpdateOne {
	muo.mutation.ClearSnowDepth()
	return muo
}

// SetVertVis sets the "vert_vis" field.
func (muo *MetarUpdateOne) SetVertVis(f float64) *MetarUpdateOne {
	muo.mutation.ResetVertVis()
	muo.mutation.SetVertVis(f)
	return muo
}

// SetNillableVertVis sets the "vert_vis" field if the given value is not nil.
func (muo *MetarUpdateOne) SetNillableVertVis(f *float64) *MetarUpdateOne {
	if f != nil {
		muo.SetVertVis(*f)
	}
	return muo
}

// AddVertVis adds f to the "vert_vis" field.
func (muo *MetarUpdateOne) AddVertVis(f float64) *MetarUpdateOne {
	muo.mutation.AddVertVis(f)
	return muo
}

// ClearVertVis clears the value of the "vert_vis" field.
func (muo *MetarUpdateOne) ClearVertVis() *MetarUpdateOne {
	muo.mutation.ClearVertVis()
	return muo
}

// SetMetarType sets the "metar_type" field.
func (muo *MetarUpdateOne) SetMetarType(mt metar.MetarType) *MetarUpdateOne {
	muo.mutation.SetMetarType(mt)
	return muo
}

// SetHash sets the "hash" field.
func (muo *MetarUpdateOne) SetHash(s string) *MetarUpdateOne {
	muo.mutation.SetHash(s)
	return muo
}

// SetStationID sets the "station" edge to the WeatherStation entity by ID.
func (muo *MetarUpdateOne) SetStationID(id uuid.UUID) *MetarUpdateOne {
	muo.mutation.SetStationID(id)
	return muo
}

// SetStation sets the "station" edge to the WeatherStation entity.
func (muo *MetarUpdateOne) SetStation(w *WeatherStation) *MetarUpdateOne {
	return muo.SetStationID(w.ID)
}

// AddSkyConditionIDs adds the "sky_conditions" edge to the SkyCondition entity by IDs.
func (muo *MetarUpdateOne) AddSkyConditionIDs(ids ...uuid.UUID) *MetarUpdateOne {
	muo.mutation.AddSkyConditionIDs(ids...)
	return muo
}

// AddSkyConditions adds the "sky_conditions" edges to the SkyCondition entity.
func (muo *MetarUpdateOne) AddSkyConditions(s ...*SkyCondition) *MetarUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return muo.AddSkyConditionIDs(ids...)
}

// Mutation returns the MetarMutation object of the builder.
func (muo *MetarUpdateOne) Mutation() *MetarMutation {
	return muo.mutation
}

// ClearStation clears the "station" edge to the WeatherStation entity.
func (muo *MetarUpdateOne) ClearStation() *MetarUpdateOne {
	muo.mutation.ClearStation()
	return muo
}

// ClearSkyConditions clears all "sky_conditions" edges to the SkyCondition entity.
func (muo *MetarUpdateOne) ClearSkyConditions() *MetarUpdateOne {
	muo.mutation.ClearSkyConditions()
	return muo
}

// RemoveSkyConditionIDs removes the "sky_conditions" edge to SkyCondition entities by IDs.
func (muo *MetarUpdateOne) RemoveSkyConditionIDs(ids ...uuid.UUID) *MetarUpdateOne {
	muo.mutation.RemoveSkyConditionIDs(ids...)
	return muo
}

// RemoveSkyConditions removes "sky_conditions" edges to SkyCondition entities.
func (muo *MetarUpdateOne) RemoveSkyConditions(s ...*SkyCondition) *MetarUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return muo.RemoveSkyConditionIDs(ids...)
}

// Where appends a list predicates to the MetarUpdate builder.
func (muo *MetarUpdateOne) Where(ps ...predicate.Metar) *MetarUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MetarUpdateOne) Select(field string, fields ...string) *MetarUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Metar entity.
func (muo *MetarUpdateOne) Save(ctx context.Context) (*Metar, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MetarUpdateOne) SaveX(ctx context.Context) *Metar {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MetarUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MetarUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MetarUpdateOne) check() error {
	if v, ok := muo.mutation.FlightCategory(); ok {
		if err := metar.FlightCategoryValidator(v); err != nil {
			return &ValidationError{Name: "flight_category", err: fmt.Errorf(`ent: validator failed for field "Metar.flight_category": %w`, err)}
		}
	}
	if v, ok := muo.mutation.MetarType(); ok {
		if err := metar.MetarTypeValidator(v); err != nil {
			return &ValidationError{Name: "metar_type", err: fmt.Errorf(`ent: validator failed for field "Metar.metar_type": %w`, err)}
		}
	}
	if _, ok := muo.mutation.StationID(); muo.mutation.StationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Metar.station"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (muo *MetarUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MetarUpdateOne {
	muo.modifiers = append(muo.modifiers, modifiers...)
	return muo
}

func (muo *MetarUpdateOne) sqlSave(ctx context.Context) (_node *Metar, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(metar.Table, metar.Columns, sqlgraph.NewFieldSpec(metar.FieldID, field.TypeUUID))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Metar.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, metar.FieldID)
		for _, f := range fields {
			if !metar.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != metar.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.RawText(); ok {
		_spec.SetField(metar.FieldRawText, field.TypeString, value)
	}
	if value, ok := muo.mutation.ObservationTime(); ok {
		_spec.SetField(metar.FieldObservationTime, field.TypeTime, value)
	}
	if value, ok := muo.mutation.ImportTime(); ok {
		_spec.SetField(metar.FieldImportTime, field.TypeTime, value)
	}
	if value, ok := muo.mutation.NextImportTimePrediction(); ok {
		_spec.SetField(metar.FieldNextImportTimePrediction, field.TypeTime, value)
	}
	if muo.mutation.NextImportTimePredictionCleared() {
		_spec.ClearField(metar.FieldNextImportTimePrediction, field.TypeTime)
	}
	if value, ok := muo.mutation.Temperature(); ok {
		_spec.SetField(metar.FieldTemperature, field.TypeFloat64, value)
	}
	if value, ok := muo.mutation.AddedTemperature(); ok {
		_spec.AddField(metar.FieldTemperature, field.TypeFloat64, value)
	}
	if muo.mutation.TemperatureCleared() {
		_spec.ClearField(metar.FieldTemperature, field.TypeFloat64)
	}
	if value, ok := muo.mutation.Dewpoint(); ok {
		_spec.SetField(metar.FieldDewpoint, field.TypeFloat64, value)
	}
	if value, ok := muo.mutation.AddedDewpoint(); ok {
		_spec.AddField(metar.FieldDewpoint, field.TypeFloat64, value)
	}
	if muo.mutation.DewpointCleared() {
		_spec.ClearField(metar.FieldDewpoint, field.TypeFloat64)
	}
	if value, ok := muo.mutation.WindSpeed(); ok {
		_spec.SetField(metar.FieldWindSpeed, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedWindSpeed(); ok {
		_spec.AddField(metar.FieldWindSpeed, field.TypeInt, value)
	}
	if muo.mutation.WindSpeedCleared() {
		_spec.ClearField(metar.FieldWindSpeed, field.TypeInt)
	}
	if value, ok := muo.mutation.WindGust(); ok {
		_spec.SetField(metar.FieldWindGust, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedWindGust(); ok {
		_spec.AddField(metar.FieldWindGust, field.TypeInt, value)
	}
	if muo.mutation.WindGustCleared() {
		_spec.ClearField(metar.FieldWindGust, field.TypeInt)
	}
	if value, ok := muo.mutation.WindDirection(); ok {
		_spec.SetField(metar.FieldWindDirection, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedWindDirection(); ok {
		_spec.AddField(metar.FieldWindDirection, field.TypeInt, value)
	}
	if muo.mutation.WindDirectionCleared() {
		_spec.ClearField(metar.FieldWindDirection, field.TypeInt)
	}
	if value, ok := muo.mutation.WindDirectionVariable(); ok {
		_spec.SetField(metar.FieldWindDirectionVariable, field.TypeBool, value)
	}
	if value, ok := muo.mutation.Visibility(); ok {
		_spec.SetField(metar.FieldVisibility, field.TypeFloat64, value)
	}
	if value, ok := muo.mutation.AddedVisibility(); ok {
		_spec.AddField(metar.FieldVisibility, field.TypeFloat64, value)
	}
	if muo.mutation.VisibilityCleared() {
		_spec.ClearField(metar.FieldVisibility, field.TypeFloat64)
	}
	if value, ok := muo.mutation.VisibilityIsMoreThan(); ok {
		_spec.SetField(metar.FieldVisibilityIsMoreThan, field.TypeBool, value)
	}
	if value, ok := muo.mutation.Altimeter(); ok {
		_spec.SetField(metar.FieldAltimeter, field.TypeFloat64, value)
	}
	if value, ok := muo.mutation.AddedAltimeter(); ok {
		_spec.AddField(metar.FieldAltimeter, field.TypeFloat64, value)
	}
	if muo.mutation.AltimeterCleared() {
		_spec.ClearField(metar.FieldAltimeter, field.TypeFloat64)
	}
	if value, ok := muo.mutation.PresentWeather(); ok {
		_spec.SetField(metar.FieldPresentWeather, field.TypeString, value)
	}
	if muo.mutation.PresentWeatherCleared() {
		_spec.ClearField(metar.FieldPresentWeather, field.TypeString)
	}
	if value, ok := muo.mutation.FlightCategory(); ok {
		_spec.SetField(metar.FieldFlightCategory, field.TypeEnum, value)
	}
	if muo.mutation.FlightCategoryCleared() {
		_spec.ClearField(metar.FieldFlightCategory, field.TypeEnum)
	}
	if value, ok := muo.mutation.QualityControlCorrected(); ok {
		_spec.SetField(metar.FieldQualityControlCorrected, field.TypeBool, value)
	}
	if muo.mutation.QualityControlCorrectedCleared() {
		_spec.ClearField(metar.FieldQualityControlCorrected, field.TypeBool)
	}
	if value, ok := muo.mutation.QualityControlAutoStation(); ok {
		_spec.SetField(metar.FieldQualityControlAutoStation, field.TypeBool, value)
	}
	if value, ok := muo.mutation.QualityControlMaintenanceIndicatorOn(); ok {
		_spec.SetField(metar.FieldQualityControlMaintenanceIndicatorOn, field.TypeBool, value)
	}
	if value, ok := muo.mutation.QualityControlNoSignal(); ok {
		_spec.SetField(metar.FieldQualityControlNoSignal, field.TypeBool, value)
	}
	if value, ok := muo.mutation.QualityControlLightningSensorOff(); ok {
		_spec.SetField(metar.FieldQualityControlLightningSensorOff, field.TypeBool, value)
	}
	if value, ok := muo.mutation.QualityControlFreezingRainSensorOff(); ok {
		_spec.SetField(metar.FieldQualityControlFreezingRainSensorOff, field.TypeBool, value)
	}
	if value, ok := muo.mutation.QualityControlPresentWeatherSensorOff(); ok {
		_spec.SetField(metar.FieldQualityControlPresentWeatherSensorOff, field.TypeBool, value)
	}
	if value, ok := muo.mutation.SeaLevelPressure(); ok {
		_spec.SetField(metar.FieldSeaLevelPressure, field.TypeFloat64, value)
	}
	if value, ok := muo.mutation.AddedSeaLevelPressure(); ok {
		_spec.AddField(metar.FieldSeaLevelPressure, field.TypeFloat64, value)
	}
	if muo.mutation.SeaLevelPressureCleared() {
		_spec.ClearField(metar.FieldSeaLevelPressure, field.TypeFloat64)
	}
	if value, ok := muo.mutation.PressureTendency(); ok {
		_spec.SetField(metar.FieldPressureTendency, field.TypeFloat64, value)
	}
	if value, ok := muo.mutation.AddedPressureTendency(); ok {
		_spec.AddField(metar.FieldPressureTendency, field.TypeFloat64, value)
	}
	if muo.mutation.PressureTendencyCleared() {
		_spec.ClearField(metar.FieldPressureTendency, field.TypeFloat64)
	}
	if value, ok := muo.mutation.MaxTemp6(); ok {
		_spec.SetField(metar.FieldMaxTemp6, field.TypeFloat64, value)
	}
	if value, ok := muo.mutation.AddedMaxTemp6(); ok {
		_spec.AddField(metar.FieldMaxTemp6, field.TypeFloat64, value)
	}
	if muo.mutation.MaxTemp6Cleared() {
		_spec.ClearField(metar.FieldMaxTemp6, field.TypeFloat64)
	}
	if value, ok := muo.mutation.MinTemp6(); ok {
		_spec.SetField(metar.FieldMinTemp6, field.TypeFloat64, value)
	}
	if value, ok := muo.mutation.AddedMinTemp6(); ok {
		_spec.AddField(metar.FieldMinTemp6, field.TypeFloat64, value)
	}
	if muo.mutation.MinTemp6Cleared() {
		_spec.ClearField(metar.FieldMinTemp6, field.TypeFloat64)
	}
	if value, ok := muo.mutation.MaxTemp24(); ok {
		_spec.SetField(metar.FieldMaxTemp24, field.TypeFloat64, value)
	}
	if value, ok := muo.mutation.AddedMaxTemp24(); ok {
		_spec.AddField(metar.FieldMaxTemp24, field.TypeFloat64, value)
	}
	if muo.mutation.MaxTemp24Cleared() {
		_spec.ClearField(metar.FieldMaxTemp24, field.TypeFloat64)
	}
	if value, ok := muo.mutation.MinTemp24(); ok {
		_spec.SetField(metar.FieldMinTemp24, field.TypeFloat64, value)
	}
	if value, ok := muo.mutation.AddedMinTemp24(); ok {
		_spec.AddField(metar.FieldMinTemp24, field.TypeFloat64, value)
	}
	if muo.mutation.MinTemp24Cleared() {
		_spec.ClearField(metar.FieldMinTemp24, field.TypeFloat64)
	}
	if value, ok := muo.mutation.Precipitation(); ok {
		_spec.SetField(metar.FieldPrecipitation, field.TypeFloat64, value)
	}
	if value, ok := muo.mutation.AddedPrecipitation(); ok {
		_spec.AddField(metar.FieldPrecipitation, field.TypeFloat64, value)
	}
	if muo.mutation.PrecipitationCleared() {
		_spec.ClearField(metar.FieldPrecipitation, field.TypeFloat64)
	}
	if value, ok := muo.mutation.Precipitation3(); ok {
		_spec.SetField(metar.FieldPrecipitation3, field.TypeFloat64, value)
	}
	if value, ok := muo.mutation.AddedPrecipitation3(); ok {
		_spec.AddField(metar.FieldPrecipitation3, field.TypeFloat64, value)
	}
	if muo.mutation.Precipitation3Cleared() {
		_spec.ClearField(metar.FieldPrecipitation3, field.TypeFloat64)
	}
	if value, ok := muo.mutation.Precipitation6(); ok {
		_spec.SetField(metar.FieldPrecipitation6, field.TypeFloat64, value)
	}
	if value, ok := muo.mutation.AddedPrecipitation6(); ok {
		_spec.AddField(metar.FieldPrecipitation6, field.TypeFloat64, value)
	}
	if muo.mutation.Precipitation6Cleared() {
		_spec.ClearField(metar.FieldPrecipitation6, field.TypeFloat64)
	}
	if value, ok := muo.mutation.Precipitation24(); ok {
		_spec.SetField(metar.FieldPrecipitation24, field.TypeFloat64, value)
	}
	if value, ok := muo.mutation.AddedPrecipitation24(); ok {
		_spec.AddField(metar.FieldPrecipitation24, field.TypeFloat64, value)
	}
	if muo.mutation.Precipitation24Cleared() {
		_spec.ClearField(metar.FieldPrecipitation24, field.TypeFloat64)
	}
	if value, ok := muo.mutation.SnowDepth(); ok {
		_spec.SetField(metar.FieldSnowDepth, field.TypeFloat64, value)
	}
	if value, ok := muo.mutation.AddedSnowDepth(); ok {
		_spec.AddField(metar.FieldSnowDepth, field.TypeFloat64, value)
	}
	if muo.mutation.SnowDepthCleared() {
		_spec.ClearField(metar.FieldSnowDepth, field.TypeFloat64)
	}
	if value, ok := muo.mutation.VertVis(); ok {
		_spec.SetField(metar.FieldVertVis, field.TypeFloat64, value)
	}
	if value, ok := muo.mutation.AddedVertVis(); ok {
		_spec.AddField(metar.FieldVertVis, field.TypeFloat64, value)
	}
	if muo.mutation.VertVisCleared() {
		_spec.ClearField(metar.FieldVertVis, field.TypeFloat64)
	}
	if value, ok := muo.mutation.MetarType(); ok {
		_spec.SetField(metar.FieldMetarType, field.TypeEnum, value)
	}
	if value, ok := muo.mutation.Hash(); ok {
		_spec.SetField(metar.FieldHash, field.TypeString, value)
	}
	if muo.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   metar.StationTable,
			Columns: []string{metar.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weatherstation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   metar.StationTable,
			Columns: []string{metar.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weatherstation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.SkyConditionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metar.SkyConditionsTable,
			Columns: []string{metar.SkyConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skycondition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedSkyConditionsIDs(); len(nodes) > 0 && !muo.mutation.SkyConditionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metar.SkyConditionsTable,
			Columns: []string{metar.SkyConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skycondition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.SkyConditionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metar.SkyConditionsTable,
			Columns: []string{metar.SkyConditionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skycondition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(muo.modifiers...)
	_node = &Metar{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metar.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
