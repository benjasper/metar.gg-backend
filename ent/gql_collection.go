// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (a *AirportQuery) CollectFields(ctx context.Context, satisfies ...string) (*AirportQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return a, nil
	}
	if err := a.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return a, nil
}

func (a *AirportQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "station":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &StationQuery{config: a.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			a.withStation = query
		case "frequencies":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &FrequencyQuery{config: a.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			a.WithNamedFrequencies(alias, func(wq *FrequencyQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type airportPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []AirportPaginateOption
}

func newAirportPaginateArgs(rv map[string]interface{}) *airportPaginateArgs {
	args := &airportPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (f *ForecastQuery) CollectFields(ctx context.Context, satisfies ...string) (*ForecastQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return f, nil
	}
	if err := f.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return f, nil
}

func (f *ForecastQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "skyConditions", "sky_conditions":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &SkyConditionQuery{config: f.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			f.WithNamedSkyConditions(alias, func(wq *SkyConditionQuery) {
				*wq = *query
			})
		case "turbulenceConditions", "turbulence_conditions":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &TurbulenceConditionQuery{config: f.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			f.WithNamedTurbulenceConditions(alias, func(wq *TurbulenceConditionQuery) {
				*wq = *query
			})
		case "icingConditions", "icing_conditions":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &IcingConditionQuery{config: f.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			f.WithNamedIcingConditions(alias, func(wq *IcingConditionQuery) {
				*wq = *query
			})
		case "temperatureData", "temperature_data":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &TemperatureDataQuery{config: f.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			f.WithNamedTemperatureData(alias, func(wq *TemperatureDataQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type forecastPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ForecastPaginateOption
}

func newForecastPaginateArgs(rv map[string]interface{}) *forecastPaginateArgs {
	args := &forecastPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (f *FrequencyQuery) CollectFields(ctx context.Context, satisfies ...string) (*FrequencyQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return f, nil
	}
	if err := f.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return f, nil
}

func (f *FrequencyQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "airport":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &AirportQuery{config: f.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			f.withAirport = query
		}
	}
	return nil
}

type frequencyPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []FrequencyPaginateOption
}

func newFrequencyPaginateArgs(rv map[string]interface{}) *frequencyPaginateArgs {
	args := &frequencyPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ic *IcingConditionQuery) CollectFields(ctx context.Context, satisfies ...string) (*IcingConditionQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ic, nil
	}
	if err := ic.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ic, nil
}

func (ic *IcingConditionQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	return nil
}

type icingconditionPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []IcingConditionPaginateOption
}

func newIcingConditionPaginateArgs(rv map[string]interface{}) *icingconditionPaginateArgs {
	args := &icingconditionPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (m *MetarQuery) CollectFields(ctx context.Context, satisfies ...string) (*MetarQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return m, nil
	}
	if err := m.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return m, nil
}

func (m *MetarQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "station":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &StationQuery{config: m.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			m.withStation = query
		case "skyConditions", "sky_conditions":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &SkyConditionQuery{config: m.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			m.WithNamedSkyConditions(alias, func(wq *SkyConditionQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type metarPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []MetarPaginateOption
}

func newMetarPaginateArgs(rv map[string]interface{}) *metarPaginateArgs {
	args := &metarPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (r *RunwayQuery) CollectFields(ctx context.Context, satisfies ...string) (*RunwayQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return r, nil
	}
	if err := r.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return r, nil
}

func (r *RunwayQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "airport":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &AirportQuery{config: r.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			r.withAirport = query
		}
	}
	return nil
}

type runwayPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []RunwayPaginateOption
}

func newRunwayPaginateArgs(rv map[string]interface{}) *runwayPaginateArgs {
	args := &runwayPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (sc *SkyConditionQuery) CollectFields(ctx context.Context, satisfies ...string) (*SkyConditionQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return sc, nil
	}
	if err := sc.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return sc, nil
}

func (sc *SkyConditionQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	return nil
}

type skyconditionPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []SkyConditionPaginateOption
}

func newSkyConditionPaginateArgs(rv map[string]interface{}) *skyconditionPaginateArgs {
	args := &skyconditionPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *StationQuery) CollectFields(ctx context.Context, satisfies ...string) (*StationQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return s, nil
	}
	if err := s.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return s, nil
}

func (s *StationQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "airport":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &AirportQuery{config: s.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			s.withAirport = query
		}
	}
	return nil
}

type stationPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []StationPaginateOption
}

func newStationPaginateArgs(rv map[string]interface{}) *stationPaginateArgs {
	args := &stationPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *TafQuery) CollectFields(ctx context.Context, satisfies ...string) (*TafQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return t, nil
	}
	if err := t.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return t, nil
}

func (t *TafQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "station":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &StationQuery{config: t.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			t.withStation = query
		case "skyConditions", "sky_conditions":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &SkyConditionQuery{config: t.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			t.WithNamedSkyConditions(alias, func(wq *SkyConditionQuery) {
				*wq = *query
			})
		case "forecast":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ForecastQuery{config: t.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			t.WithNamedForecast(alias, func(wq *ForecastQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type tafPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []TafPaginateOption
}

func newTafPaginateArgs(rv map[string]interface{}) *tafPaginateArgs {
	args := &tafPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &TafOrder{Field: &TafOrderField{}}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithTafOrder(order))
			}
		case *TafOrder:
			if v != nil {
				args.opts = append(args.opts, WithTafOrder(v))
			}
		}
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (td *TemperatureDataQuery) CollectFields(ctx context.Context, satisfies ...string) (*TemperatureDataQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return td, nil
	}
	if err := td.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return td, nil
}

func (td *TemperatureDataQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	return nil
}

type temperaturedataPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []TemperatureDataPaginateOption
}

func newTemperatureDataPaginateArgs(rv map[string]interface{}) *temperaturedataPaginateArgs {
	args := &temperaturedataPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tc *TurbulenceConditionQuery) CollectFields(ctx context.Context, satisfies ...string) (*TurbulenceConditionQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return tc, nil
	}
	if err := tc.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return tc, nil
}

func (tc *TurbulenceConditionQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	return nil
}

type turbulenceconditionPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []TurbulenceConditionPaginateOption
}

func newTurbulenceConditionPaginateArgs(rv map[string]interface{}) *turbulenceconditionPaginateArgs {
	args := &turbulenceconditionPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput interface{}, path ...string) map[string]interface{} {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	for _, name := range path {
		var field *graphql.CollectedField
		for _, f := range graphql.CollectFields(oc, fc.Field.Selections, nil) {
			if f.Alias == name {
				field = &f
				break
			}
		}
		if field == nil {
			return nil
		}
		cf, err := fc.Child(ctx, *field)
		if err != nil {
			args := field.ArgumentMap(oc.Variables)
			return unmarshalArgs(ctx, whereInput, args)
		}
		fc = cf
	}
	return fc.Args
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput interface{}, args map[string]interface{}) map[string]interface{} {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}
