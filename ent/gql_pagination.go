// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"metar.gg/ent/airport"
	"metar.gg/ent/country"
	"metar.gg/ent/forecast"
	"metar.gg/ent/frequency"
	"metar.gg/ent/icingcondition"
	"metar.gg/ent/metar"
	"metar.gg/ent/region"
	"metar.gg/ent/runway"
	"metar.gg/ent/skycondition"
	"metar.gg/ent/taf"
	"metar.gg/ent/temperaturedata"
	"metar.gg/ent/turbulencecondition"
	"metar.gg/ent/weatherstation"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[uuid.UUID]
	PageInfo       = entgql.PageInfo[uuid.UUID]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AirportEdge is the edge representation of Airport.
type AirportEdge struct {
	Node   *Airport `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// AirportConnection is the connection containing edges to Airport.
type AirportConnection struct {
	Edges      []*AirportEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *AirportConnection) build(nodes []*Airport, pager *airportPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Airport
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Airport {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Airport {
			return nodes[i]
		}
	}
	c.Edges = make([]*AirportEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AirportEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AirportPaginateOption enables pagination customization.
type AirportPaginateOption func(*airportPager) error

// WithAirportOrder configures pagination ordering.
func WithAirportOrder(order *AirportOrder) AirportPaginateOption {
	if order == nil {
		order = DefaultAirportOrder
	}
	o := *order
	return func(pager *airportPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAirportOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAirportFilter configures pagination filter.
func WithAirportFilter(filter func(*AirportQuery) (*AirportQuery, error)) AirportPaginateOption {
	return func(pager *airportPager) error {
		if filter == nil {
			return errors.New("AirportQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type airportPager struct {
	reverse bool
	order   *AirportOrder
	filter  func(*AirportQuery) (*AirportQuery, error)
}

func newAirportPager(opts []AirportPaginateOption, reverse bool) (*airportPager, error) {
	pager := &airportPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAirportOrder
	}
	return pager, nil
}

func (p *airportPager) applyFilter(query *AirportQuery) (*AirportQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *airportPager) toCursor(a *Airport) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *airportPager) applyCursors(query *AirportQuery, after, before *Cursor) (*AirportQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAirportOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *airportPager) applyOrder(query *AirportQuery) *AirportQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAirportOrder.Field {
		query = query.Order(DefaultAirportOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *airportPager) orderExpr(query *AirportQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAirportOrder.Field {
			b.Comma().Ident(DefaultAirportOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Airport.
func (a *AirportQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AirportPaginateOption,
) (*AirportConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAirportPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}
	conn := &AirportConnection{Edges: []*AirportEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = a.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if a, err = pager.applyCursors(a, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		a.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := a.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	a = pager.applyOrder(a)
	nodes, err := a.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AirportOrderFieldIcaoCode orders Airport by icao_code.
	AirportOrderFieldIcaoCode = &AirportOrderField{
		Value: func(a *Airport) (ent.Value, error) {
			return a.IcaoCode, nil
		},
		column: airport.FieldIcaoCode,
		toTerm: airport.ByIcaoCode,
		toCursor: func(a *Airport) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.IcaoCode,
			}
		},
	}
	// AirportOrderFieldImportance orders Airport by importance.
	AirportOrderFieldImportance = &AirportOrderField{
		Value: func(a *Airport) (ent.Value, error) {
			return a.Importance, nil
		},
		column: airport.FieldImportance,
		toTerm: airport.ByImportance,
		toCursor: func(a *Airport) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.Importance,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AirportOrderField) String() string {
	var str string
	switch f.column {
	case AirportOrderFieldIcaoCode.column:
		str = "ICAO_CODE"
	case AirportOrderFieldImportance.column:
		str = "IMPORTANCE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AirportOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AirportOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AirportOrderField %T must be a string", v)
	}
	switch str {
	case "ICAO_CODE":
		*f = *AirportOrderFieldIcaoCode
	case "IMPORTANCE":
		*f = *AirportOrderFieldImportance
	default:
		return fmt.Errorf("%s is not a valid AirportOrderField", str)
	}
	return nil
}

// AirportOrderField defines the ordering field of Airport.
type AirportOrderField struct {
	// Value extracts the ordering value from the given Airport.
	Value    func(*Airport) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) airport.OrderOption
	toCursor func(*Airport) Cursor
}

// AirportOrder defines the ordering of Airport.
type AirportOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *AirportOrderField `json:"field"`
}

// DefaultAirportOrder is the default ordering of Airport.
var DefaultAirportOrder = &AirportOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AirportOrderField{
		Value: func(a *Airport) (ent.Value, error) {
			return a.ID, nil
		},
		column: airport.FieldID,
		toTerm: airport.ByID,
		toCursor: func(a *Airport) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Airport into AirportEdge.
func (a *Airport) ToEdge(order *AirportOrder) *AirportEdge {
	if order == nil {
		order = DefaultAirportOrder
	}
	return &AirportEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// CountryEdge is the edge representation of Country.
type CountryEdge struct {
	Node   *Country `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// CountryConnection is the connection containing edges to Country.
type CountryConnection struct {
	Edges      []*CountryEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *CountryConnection) build(nodes []*Country, pager *countryPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Country
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Country {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Country {
			return nodes[i]
		}
	}
	c.Edges = make([]*CountryEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CountryEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CountryPaginateOption enables pagination customization.
type CountryPaginateOption func(*countryPager) error

// WithCountryOrder configures pagination ordering.
func WithCountryOrder(order *CountryOrder) CountryPaginateOption {
	if order == nil {
		order = DefaultCountryOrder
	}
	o := *order
	return func(pager *countryPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCountryOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCountryFilter configures pagination filter.
func WithCountryFilter(filter func(*CountryQuery) (*CountryQuery, error)) CountryPaginateOption {
	return func(pager *countryPager) error {
		if filter == nil {
			return errors.New("CountryQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type countryPager struct {
	reverse bool
	order   *CountryOrder
	filter  func(*CountryQuery) (*CountryQuery, error)
}

func newCountryPager(opts []CountryPaginateOption, reverse bool) (*countryPager, error) {
	pager := &countryPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCountryOrder
	}
	return pager, nil
}

func (p *countryPager) applyFilter(query *CountryQuery) (*CountryQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *countryPager) toCursor(c *Country) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *countryPager) applyCursors(query *CountryQuery, after, before *Cursor) (*CountryQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCountryOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *countryPager) applyOrder(query *CountryQuery) *CountryQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCountryOrder.Field {
		query = query.Order(DefaultCountryOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *countryPager) orderExpr(query *CountryQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCountryOrder.Field {
			b.Comma().Ident(DefaultCountryOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Country.
func (c *CountryQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CountryPaginateOption,
) (*CountryConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCountryPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CountryConnection{Edges: []*CountryEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = c.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CountryOrderField defines the ordering field of Country.
type CountryOrderField struct {
	// Value extracts the ordering value from the given Country.
	Value    func(*Country) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) country.OrderOption
	toCursor func(*Country) Cursor
}

// CountryOrder defines the ordering of Country.
type CountryOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *CountryOrderField `json:"field"`
}

// DefaultCountryOrder is the default ordering of Country.
var DefaultCountryOrder = &CountryOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CountryOrderField{
		Value: func(c *Country) (ent.Value, error) {
			return c.ID, nil
		},
		column: country.FieldID,
		toTerm: country.ByID,
		toCursor: func(c *Country) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Country into CountryEdge.
func (c *Country) ToEdge(order *CountryOrder) *CountryEdge {
	if order == nil {
		order = DefaultCountryOrder
	}
	return &CountryEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// ForecastEdge is the edge representation of Forecast.
type ForecastEdge struct {
	Node   *Forecast `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// ForecastConnection is the connection containing edges to Forecast.
type ForecastConnection struct {
	Edges      []*ForecastEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *ForecastConnection) build(nodes []*Forecast, pager *forecastPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Forecast
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Forecast {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Forecast {
			return nodes[i]
		}
	}
	c.Edges = make([]*ForecastEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ForecastEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ForecastPaginateOption enables pagination customization.
type ForecastPaginateOption func(*forecastPager) error

// WithForecastOrder configures pagination ordering.
func WithForecastOrder(order *ForecastOrder) ForecastPaginateOption {
	if order == nil {
		order = DefaultForecastOrder
	}
	o := *order
	return func(pager *forecastPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultForecastOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithForecastFilter configures pagination filter.
func WithForecastFilter(filter func(*ForecastQuery) (*ForecastQuery, error)) ForecastPaginateOption {
	return func(pager *forecastPager) error {
		if filter == nil {
			return errors.New("ForecastQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type forecastPager struct {
	reverse bool
	order   *ForecastOrder
	filter  func(*ForecastQuery) (*ForecastQuery, error)
}

func newForecastPager(opts []ForecastPaginateOption, reverse bool) (*forecastPager, error) {
	pager := &forecastPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultForecastOrder
	}
	return pager, nil
}

func (p *forecastPager) applyFilter(query *ForecastQuery) (*ForecastQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *forecastPager) toCursor(f *Forecast) Cursor {
	return p.order.Field.toCursor(f)
}

func (p *forecastPager) applyCursors(query *ForecastQuery, after, before *Cursor) (*ForecastQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultForecastOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *forecastPager) applyOrder(query *ForecastQuery) *ForecastQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultForecastOrder.Field {
		query = query.Order(DefaultForecastOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *forecastPager) orderExpr(query *ForecastQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultForecastOrder.Field {
			b.Comma().Ident(DefaultForecastOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Forecast.
func (f *ForecastQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ForecastPaginateOption,
) (*ForecastConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newForecastPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if f, err = pager.applyFilter(f); err != nil {
		return nil, err
	}
	conn := &ForecastConnection{Edges: []*ForecastEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = f.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if f, err = pager.applyCursors(f, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		f.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := f.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	f = pager.applyOrder(f)
	nodes, err := f.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ForecastOrderField defines the ordering field of Forecast.
type ForecastOrderField struct {
	// Value extracts the ordering value from the given Forecast.
	Value    func(*Forecast) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) forecast.OrderOption
	toCursor func(*Forecast) Cursor
}

// ForecastOrder defines the ordering of Forecast.
type ForecastOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *ForecastOrderField `json:"field"`
}

// DefaultForecastOrder is the default ordering of Forecast.
var DefaultForecastOrder = &ForecastOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ForecastOrderField{
		Value: func(f *Forecast) (ent.Value, error) {
			return f.ID, nil
		},
		column: forecast.FieldID,
		toTerm: forecast.ByID,
		toCursor: func(f *Forecast) Cursor {
			return Cursor{ID: f.ID}
		},
	},
}

// ToEdge converts Forecast into ForecastEdge.
func (f *Forecast) ToEdge(order *ForecastOrder) *ForecastEdge {
	if order == nil {
		order = DefaultForecastOrder
	}
	return &ForecastEdge{
		Node:   f,
		Cursor: order.Field.toCursor(f),
	}
}

// FrequencyEdge is the edge representation of Frequency.
type FrequencyEdge struct {
	Node   *Frequency `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// FrequencyConnection is the connection containing edges to Frequency.
type FrequencyConnection struct {
	Edges      []*FrequencyEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *FrequencyConnection) build(nodes []*Frequency, pager *frequencyPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Frequency
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Frequency {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Frequency {
			return nodes[i]
		}
	}
	c.Edges = make([]*FrequencyEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &FrequencyEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// FrequencyPaginateOption enables pagination customization.
type FrequencyPaginateOption func(*frequencyPager) error

// WithFrequencyOrder configures pagination ordering.
func WithFrequencyOrder(order *FrequencyOrder) FrequencyPaginateOption {
	if order == nil {
		order = DefaultFrequencyOrder
	}
	o := *order
	return func(pager *frequencyPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultFrequencyOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithFrequencyFilter configures pagination filter.
func WithFrequencyFilter(filter func(*FrequencyQuery) (*FrequencyQuery, error)) FrequencyPaginateOption {
	return func(pager *frequencyPager) error {
		if filter == nil {
			return errors.New("FrequencyQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type frequencyPager struct {
	reverse bool
	order   *FrequencyOrder
	filter  func(*FrequencyQuery) (*FrequencyQuery, error)
}

func newFrequencyPager(opts []FrequencyPaginateOption, reverse bool) (*frequencyPager, error) {
	pager := &frequencyPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultFrequencyOrder
	}
	return pager, nil
}

func (p *frequencyPager) applyFilter(query *FrequencyQuery) (*FrequencyQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *frequencyPager) toCursor(f *Frequency) Cursor {
	return p.order.Field.toCursor(f)
}

func (p *frequencyPager) applyCursors(query *FrequencyQuery, after, before *Cursor) (*FrequencyQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultFrequencyOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *frequencyPager) applyOrder(query *FrequencyQuery) *FrequencyQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultFrequencyOrder.Field {
		query = query.Order(DefaultFrequencyOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *frequencyPager) orderExpr(query *FrequencyQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultFrequencyOrder.Field {
			b.Comma().Ident(DefaultFrequencyOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Frequency.
func (f *FrequencyQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...FrequencyPaginateOption,
) (*FrequencyConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newFrequencyPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if f, err = pager.applyFilter(f); err != nil {
		return nil, err
	}
	conn := &FrequencyConnection{Edges: []*FrequencyEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = f.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if f, err = pager.applyCursors(f, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		f.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := f.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	f = pager.applyOrder(f)
	nodes, err := f.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// FrequencyOrderField defines the ordering field of Frequency.
type FrequencyOrderField struct {
	// Value extracts the ordering value from the given Frequency.
	Value    func(*Frequency) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) frequency.OrderOption
	toCursor func(*Frequency) Cursor
}

// FrequencyOrder defines the ordering of Frequency.
type FrequencyOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *FrequencyOrderField `json:"field"`
}

// DefaultFrequencyOrder is the default ordering of Frequency.
var DefaultFrequencyOrder = &FrequencyOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &FrequencyOrderField{
		Value: func(f *Frequency) (ent.Value, error) {
			return f.ID, nil
		},
		column: frequency.FieldID,
		toTerm: frequency.ByID,
		toCursor: func(f *Frequency) Cursor {
			return Cursor{ID: f.ID}
		},
	},
}

// ToEdge converts Frequency into FrequencyEdge.
func (f *Frequency) ToEdge(order *FrequencyOrder) *FrequencyEdge {
	if order == nil {
		order = DefaultFrequencyOrder
	}
	return &FrequencyEdge{
		Node:   f,
		Cursor: order.Field.toCursor(f),
	}
}

// IcingConditionEdge is the edge representation of IcingCondition.
type IcingConditionEdge struct {
	Node   *IcingCondition `json:"node"`
	Cursor Cursor          `json:"cursor"`
}

// IcingConditionConnection is the connection containing edges to IcingCondition.
type IcingConditionConnection struct {
	Edges      []*IcingConditionEdge `json:"edges"`
	PageInfo   PageInfo              `json:"pageInfo"`
	TotalCount int                   `json:"totalCount"`
}

func (c *IcingConditionConnection) build(nodes []*IcingCondition, pager *icingconditionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *IcingCondition
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *IcingCondition {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *IcingCondition {
			return nodes[i]
		}
	}
	c.Edges = make([]*IcingConditionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &IcingConditionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// IcingConditionPaginateOption enables pagination customization.
type IcingConditionPaginateOption func(*icingconditionPager) error

// WithIcingConditionOrder configures pagination ordering.
func WithIcingConditionOrder(order *IcingConditionOrder) IcingConditionPaginateOption {
	if order == nil {
		order = DefaultIcingConditionOrder
	}
	o := *order
	return func(pager *icingconditionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultIcingConditionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithIcingConditionFilter configures pagination filter.
func WithIcingConditionFilter(filter func(*IcingConditionQuery) (*IcingConditionQuery, error)) IcingConditionPaginateOption {
	return func(pager *icingconditionPager) error {
		if filter == nil {
			return errors.New("IcingConditionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type icingconditionPager struct {
	reverse bool
	order   *IcingConditionOrder
	filter  func(*IcingConditionQuery) (*IcingConditionQuery, error)
}

func newIcingConditionPager(opts []IcingConditionPaginateOption, reverse bool) (*icingconditionPager, error) {
	pager := &icingconditionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultIcingConditionOrder
	}
	return pager, nil
}

func (p *icingconditionPager) applyFilter(query *IcingConditionQuery) (*IcingConditionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *icingconditionPager) toCursor(ic *IcingCondition) Cursor {
	return p.order.Field.toCursor(ic)
}

func (p *icingconditionPager) applyCursors(query *IcingConditionQuery, after, before *Cursor) (*IcingConditionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultIcingConditionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *icingconditionPager) applyOrder(query *IcingConditionQuery) *IcingConditionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultIcingConditionOrder.Field {
		query = query.Order(DefaultIcingConditionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *icingconditionPager) orderExpr(query *IcingConditionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultIcingConditionOrder.Field {
			b.Comma().Ident(DefaultIcingConditionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to IcingCondition.
func (ic *IcingConditionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...IcingConditionPaginateOption,
) (*IcingConditionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newIcingConditionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ic, err = pager.applyFilter(ic); err != nil {
		return nil, err
	}
	conn := &IcingConditionConnection{Edges: []*IcingConditionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ic.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ic, err = pager.applyCursors(ic, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		ic.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ic.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ic = pager.applyOrder(ic)
	nodes, err := ic.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// IcingConditionOrderField defines the ordering field of IcingCondition.
type IcingConditionOrderField struct {
	// Value extracts the ordering value from the given IcingCondition.
	Value    func(*IcingCondition) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) icingcondition.OrderOption
	toCursor func(*IcingCondition) Cursor
}

// IcingConditionOrder defines the ordering of IcingCondition.
type IcingConditionOrder struct {
	Direction OrderDirection            `json:"direction"`
	Field     *IcingConditionOrderField `json:"field"`
}

// DefaultIcingConditionOrder is the default ordering of IcingCondition.
var DefaultIcingConditionOrder = &IcingConditionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &IcingConditionOrderField{
		Value: func(ic *IcingCondition) (ent.Value, error) {
			return ic.ID, nil
		},
		column: icingcondition.FieldID,
		toTerm: icingcondition.ByID,
		toCursor: func(ic *IcingCondition) Cursor {
			return Cursor{ID: ic.ID}
		},
	},
}

// ToEdge converts IcingCondition into IcingConditionEdge.
func (ic *IcingCondition) ToEdge(order *IcingConditionOrder) *IcingConditionEdge {
	if order == nil {
		order = DefaultIcingConditionOrder
	}
	return &IcingConditionEdge{
		Node:   ic,
		Cursor: order.Field.toCursor(ic),
	}
}

// MetarEdge is the edge representation of Metar.
type MetarEdge struct {
	Node   *Metar `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// MetarConnection is the connection containing edges to Metar.
type MetarConnection struct {
	Edges      []*MetarEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *MetarConnection) build(nodes []*Metar, pager *metarPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Metar
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Metar {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Metar {
			return nodes[i]
		}
	}
	c.Edges = make([]*MetarEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &MetarEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// MetarPaginateOption enables pagination customization.
type MetarPaginateOption func(*metarPager) error

// WithMetarOrder configures pagination ordering.
func WithMetarOrder(order *MetarOrder) MetarPaginateOption {
	if order == nil {
		order = DefaultMetarOrder
	}
	o := *order
	return func(pager *metarPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultMetarOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithMetarFilter configures pagination filter.
func WithMetarFilter(filter func(*MetarQuery) (*MetarQuery, error)) MetarPaginateOption {
	return func(pager *metarPager) error {
		if filter == nil {
			return errors.New("MetarQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type metarPager struct {
	reverse bool
	order   *MetarOrder
	filter  func(*MetarQuery) (*MetarQuery, error)
}

func newMetarPager(opts []MetarPaginateOption, reverse bool) (*metarPager, error) {
	pager := &metarPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultMetarOrder
	}
	return pager, nil
}

func (p *metarPager) applyFilter(query *MetarQuery) (*MetarQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *metarPager) toCursor(m *Metar) Cursor {
	return p.order.Field.toCursor(m)
}

func (p *metarPager) applyCursors(query *MetarQuery, after, before *Cursor) (*MetarQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultMetarOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *metarPager) applyOrder(query *MetarQuery) *MetarQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultMetarOrder.Field {
		query = query.Order(DefaultMetarOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *metarPager) orderExpr(query *MetarQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultMetarOrder.Field {
			b.Comma().Ident(DefaultMetarOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Metar.
func (m *MetarQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MetarPaginateOption,
) (*MetarConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMetarPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if m, err = pager.applyFilter(m); err != nil {
		return nil, err
	}
	conn := &MetarConnection{Edges: []*MetarEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = m.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if m, err = pager.applyCursors(m, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := m.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	m = pager.applyOrder(m)
	nodes, err := m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// MetarOrderFieldObservationTime orders Metar by observation_time.
	MetarOrderFieldObservationTime = &MetarOrderField{
		Value: func(m *Metar) (ent.Value, error) {
			return m.ObservationTime, nil
		},
		column: metar.FieldObservationTime,
		toTerm: metar.ByObservationTime,
		toCursor: func(m *Metar) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.ObservationTime,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f MetarOrderField) String() string {
	var str string
	switch f.column {
	case MetarOrderFieldObservationTime.column:
		str = "OBSERVATION_TIME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f MetarOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *MetarOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("MetarOrderField %T must be a string", v)
	}
	switch str {
	case "OBSERVATION_TIME":
		*f = *MetarOrderFieldObservationTime
	default:
		return fmt.Errorf("%s is not a valid MetarOrderField", str)
	}
	return nil
}

// MetarOrderField defines the ordering field of Metar.
type MetarOrderField struct {
	// Value extracts the ordering value from the given Metar.
	Value    func(*Metar) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) metar.OrderOption
	toCursor func(*Metar) Cursor
}

// MetarOrder defines the ordering of Metar.
type MetarOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *MetarOrderField `json:"field"`
}

// DefaultMetarOrder is the default ordering of Metar.
var DefaultMetarOrder = &MetarOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &MetarOrderField{
		Value: func(m *Metar) (ent.Value, error) {
			return m.ID, nil
		},
		column: metar.FieldID,
		toTerm: metar.ByID,
		toCursor: func(m *Metar) Cursor {
			return Cursor{ID: m.ID}
		},
	},
}

// ToEdge converts Metar into MetarEdge.
func (m *Metar) ToEdge(order *MetarOrder) *MetarEdge {
	if order == nil {
		order = DefaultMetarOrder
	}
	return &MetarEdge{
		Node:   m,
		Cursor: order.Field.toCursor(m),
	}
}

// RegionEdge is the edge representation of Region.
type RegionEdge struct {
	Node   *Region `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// RegionConnection is the connection containing edges to Region.
type RegionConnection struct {
	Edges      []*RegionEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *RegionConnection) build(nodes []*Region, pager *regionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Region
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Region {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Region {
			return nodes[i]
		}
	}
	c.Edges = make([]*RegionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &RegionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// RegionPaginateOption enables pagination customization.
type RegionPaginateOption func(*regionPager) error

// WithRegionOrder configures pagination ordering.
func WithRegionOrder(order *RegionOrder) RegionPaginateOption {
	if order == nil {
		order = DefaultRegionOrder
	}
	o := *order
	return func(pager *regionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultRegionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithRegionFilter configures pagination filter.
func WithRegionFilter(filter func(*RegionQuery) (*RegionQuery, error)) RegionPaginateOption {
	return func(pager *regionPager) error {
		if filter == nil {
			return errors.New("RegionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type regionPager struct {
	reverse bool
	order   *RegionOrder
	filter  func(*RegionQuery) (*RegionQuery, error)
}

func newRegionPager(opts []RegionPaginateOption, reverse bool) (*regionPager, error) {
	pager := &regionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultRegionOrder
	}
	return pager, nil
}

func (p *regionPager) applyFilter(query *RegionQuery) (*RegionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *regionPager) toCursor(r *Region) Cursor {
	return p.order.Field.toCursor(r)
}

func (p *regionPager) applyCursors(query *RegionQuery, after, before *Cursor) (*RegionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultRegionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *regionPager) applyOrder(query *RegionQuery) *RegionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultRegionOrder.Field {
		query = query.Order(DefaultRegionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *regionPager) orderExpr(query *RegionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultRegionOrder.Field {
			b.Comma().Ident(DefaultRegionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Region.
func (r *RegionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...RegionPaginateOption,
) (*RegionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newRegionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if r, err = pager.applyFilter(r); err != nil {
		return nil, err
	}
	conn := &RegionConnection{Edges: []*RegionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = r.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if r, err = pager.applyCursors(r, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		r.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := r.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	r = pager.applyOrder(r)
	nodes, err := r.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// RegionOrderField defines the ordering field of Region.
type RegionOrderField struct {
	// Value extracts the ordering value from the given Region.
	Value    func(*Region) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) region.OrderOption
	toCursor func(*Region) Cursor
}

// RegionOrder defines the ordering of Region.
type RegionOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *RegionOrderField `json:"field"`
}

// DefaultRegionOrder is the default ordering of Region.
var DefaultRegionOrder = &RegionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &RegionOrderField{
		Value: func(r *Region) (ent.Value, error) {
			return r.ID, nil
		},
		column: region.FieldID,
		toTerm: region.ByID,
		toCursor: func(r *Region) Cursor {
			return Cursor{ID: r.ID}
		},
	},
}

// ToEdge converts Region into RegionEdge.
func (r *Region) ToEdge(order *RegionOrder) *RegionEdge {
	if order == nil {
		order = DefaultRegionOrder
	}
	return &RegionEdge{
		Node:   r,
		Cursor: order.Field.toCursor(r),
	}
}

// RunwayEdge is the edge representation of Runway.
type RunwayEdge struct {
	Node   *Runway `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// RunwayConnection is the connection containing edges to Runway.
type RunwayConnection struct {
	Edges      []*RunwayEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *RunwayConnection) build(nodes []*Runway, pager *runwayPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Runway
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Runway {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Runway {
			return nodes[i]
		}
	}
	c.Edges = make([]*RunwayEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &RunwayEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// RunwayPaginateOption enables pagination customization.
type RunwayPaginateOption func(*runwayPager) error

// WithRunwayOrder configures pagination ordering.
func WithRunwayOrder(order *RunwayOrder) RunwayPaginateOption {
	if order == nil {
		order = DefaultRunwayOrder
	}
	o := *order
	return func(pager *runwayPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultRunwayOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithRunwayFilter configures pagination filter.
func WithRunwayFilter(filter func(*RunwayQuery) (*RunwayQuery, error)) RunwayPaginateOption {
	return func(pager *runwayPager) error {
		if filter == nil {
			return errors.New("RunwayQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type runwayPager struct {
	reverse bool
	order   *RunwayOrder
	filter  func(*RunwayQuery) (*RunwayQuery, error)
}

func newRunwayPager(opts []RunwayPaginateOption, reverse bool) (*runwayPager, error) {
	pager := &runwayPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultRunwayOrder
	}
	return pager, nil
}

func (p *runwayPager) applyFilter(query *RunwayQuery) (*RunwayQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *runwayPager) toCursor(r *Runway) Cursor {
	return p.order.Field.toCursor(r)
}

func (p *runwayPager) applyCursors(query *RunwayQuery, after, before *Cursor) (*RunwayQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultRunwayOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *runwayPager) applyOrder(query *RunwayQuery) *RunwayQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultRunwayOrder.Field {
		query = query.Order(DefaultRunwayOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *runwayPager) orderExpr(query *RunwayQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultRunwayOrder.Field {
			b.Comma().Ident(DefaultRunwayOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Runway.
func (r *RunwayQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...RunwayPaginateOption,
) (*RunwayConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newRunwayPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if r, err = pager.applyFilter(r); err != nil {
		return nil, err
	}
	conn := &RunwayConnection{Edges: []*RunwayEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = r.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if r, err = pager.applyCursors(r, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		r.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := r.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	r = pager.applyOrder(r)
	nodes, err := r.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// RunwayOrderField defines the ordering field of Runway.
type RunwayOrderField struct {
	// Value extracts the ordering value from the given Runway.
	Value    func(*Runway) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) runway.OrderOption
	toCursor func(*Runway) Cursor
}

// RunwayOrder defines the ordering of Runway.
type RunwayOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *RunwayOrderField `json:"field"`
}

// DefaultRunwayOrder is the default ordering of Runway.
var DefaultRunwayOrder = &RunwayOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &RunwayOrderField{
		Value: func(r *Runway) (ent.Value, error) {
			return r.ID, nil
		},
		column: runway.FieldID,
		toTerm: runway.ByID,
		toCursor: func(r *Runway) Cursor {
			return Cursor{ID: r.ID}
		},
	},
}

// ToEdge converts Runway into RunwayEdge.
func (r *Runway) ToEdge(order *RunwayOrder) *RunwayEdge {
	if order == nil {
		order = DefaultRunwayOrder
	}
	return &RunwayEdge{
		Node:   r,
		Cursor: order.Field.toCursor(r),
	}
}

// SkyConditionEdge is the edge representation of SkyCondition.
type SkyConditionEdge struct {
	Node   *SkyCondition `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// SkyConditionConnection is the connection containing edges to SkyCondition.
type SkyConditionConnection struct {
	Edges      []*SkyConditionEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *SkyConditionConnection) build(nodes []*SkyCondition, pager *skyconditionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *SkyCondition
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *SkyCondition {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *SkyCondition {
			return nodes[i]
		}
	}
	c.Edges = make([]*SkyConditionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SkyConditionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SkyConditionPaginateOption enables pagination customization.
type SkyConditionPaginateOption func(*skyconditionPager) error

// WithSkyConditionOrder configures pagination ordering.
func WithSkyConditionOrder(order *SkyConditionOrder) SkyConditionPaginateOption {
	if order == nil {
		order = DefaultSkyConditionOrder
	}
	o := *order
	return func(pager *skyconditionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSkyConditionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSkyConditionFilter configures pagination filter.
func WithSkyConditionFilter(filter func(*SkyConditionQuery) (*SkyConditionQuery, error)) SkyConditionPaginateOption {
	return func(pager *skyconditionPager) error {
		if filter == nil {
			return errors.New("SkyConditionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type skyconditionPager struct {
	reverse bool
	order   *SkyConditionOrder
	filter  func(*SkyConditionQuery) (*SkyConditionQuery, error)
}

func newSkyConditionPager(opts []SkyConditionPaginateOption, reverse bool) (*skyconditionPager, error) {
	pager := &skyconditionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSkyConditionOrder
	}
	return pager, nil
}

func (p *skyconditionPager) applyFilter(query *SkyConditionQuery) (*SkyConditionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *skyconditionPager) toCursor(sc *SkyCondition) Cursor {
	return p.order.Field.toCursor(sc)
}

func (p *skyconditionPager) applyCursors(query *SkyConditionQuery, after, before *Cursor) (*SkyConditionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultSkyConditionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *skyconditionPager) applyOrder(query *SkyConditionQuery) *SkyConditionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultSkyConditionOrder.Field {
		query = query.Order(DefaultSkyConditionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *skyconditionPager) orderExpr(query *SkyConditionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSkyConditionOrder.Field {
			b.Comma().Ident(DefaultSkyConditionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to SkyCondition.
func (sc *SkyConditionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SkyConditionPaginateOption,
) (*SkyConditionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSkyConditionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if sc, err = pager.applyFilter(sc); err != nil {
		return nil, err
	}
	conn := &SkyConditionConnection{Edges: []*SkyConditionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = sc.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if sc, err = pager.applyCursors(sc, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		sc.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sc.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	sc = pager.applyOrder(sc)
	nodes, err := sc.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// SkyConditionOrderField defines the ordering field of SkyCondition.
type SkyConditionOrderField struct {
	// Value extracts the ordering value from the given SkyCondition.
	Value    func(*SkyCondition) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) skycondition.OrderOption
	toCursor func(*SkyCondition) Cursor
}

// SkyConditionOrder defines the ordering of SkyCondition.
type SkyConditionOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *SkyConditionOrderField `json:"field"`
}

// DefaultSkyConditionOrder is the default ordering of SkyCondition.
var DefaultSkyConditionOrder = &SkyConditionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &SkyConditionOrderField{
		Value: func(sc *SkyCondition) (ent.Value, error) {
			return sc.ID, nil
		},
		column: skycondition.FieldID,
		toTerm: skycondition.ByID,
		toCursor: func(sc *SkyCondition) Cursor {
			return Cursor{ID: sc.ID}
		},
	},
}

// ToEdge converts SkyCondition into SkyConditionEdge.
func (sc *SkyCondition) ToEdge(order *SkyConditionOrder) *SkyConditionEdge {
	if order == nil {
		order = DefaultSkyConditionOrder
	}
	return &SkyConditionEdge{
		Node:   sc,
		Cursor: order.Field.toCursor(sc),
	}
}

// TafEdge is the edge representation of Taf.
type TafEdge struct {
	Node   *Taf   `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// TafConnection is the connection containing edges to Taf.
type TafConnection struct {
	Edges      []*TafEdge `json:"edges"`
	PageInfo   PageInfo   `json:"pageInfo"`
	TotalCount int        `json:"totalCount"`
}

func (c *TafConnection) build(nodes []*Taf, pager *tafPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Taf
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Taf {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Taf {
			return nodes[i]
		}
	}
	c.Edges = make([]*TafEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TafEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TafPaginateOption enables pagination customization.
type TafPaginateOption func(*tafPager) error

// WithTafOrder configures pagination ordering.
func WithTafOrder(order *TafOrder) TafPaginateOption {
	if order == nil {
		order = DefaultTafOrder
	}
	o := *order
	return func(pager *tafPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTafOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTafFilter configures pagination filter.
func WithTafFilter(filter func(*TafQuery) (*TafQuery, error)) TafPaginateOption {
	return func(pager *tafPager) error {
		if filter == nil {
			return errors.New("TafQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type tafPager struct {
	reverse bool
	order   *TafOrder
	filter  func(*TafQuery) (*TafQuery, error)
}

func newTafPager(opts []TafPaginateOption, reverse bool) (*tafPager, error) {
	pager := &tafPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTafOrder
	}
	return pager, nil
}

func (p *tafPager) applyFilter(query *TafQuery) (*TafQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *tafPager) toCursor(t *Taf) Cursor {
	return p.order.Field.toCursor(t)
}

func (p *tafPager) applyCursors(query *TafQuery, after, before *Cursor) (*TafQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultTafOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *tafPager) applyOrder(query *TafQuery) *TafQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultTafOrder.Field {
		query = query.Order(DefaultTafOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *tafPager) orderExpr(query *TafQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTafOrder.Field {
			b.Comma().Ident(DefaultTafOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Taf.
func (t *TafQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TafPaginateOption,
) (*TafConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTafPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}
	conn := &TafConnection{Edges: []*TafEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = t.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if t, err = pager.applyCursors(t, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		t.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := t.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	t = pager.applyOrder(t)
	nodes, err := t.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// TafOrderFieldIssueTime orders Taf by issue_time.
	TafOrderFieldIssueTime = &TafOrderField{
		Value: func(t *Taf) (ent.Value, error) {
			return t.IssueTime, nil
		},
		column: taf.FieldIssueTime,
		toTerm: taf.ByIssueTime,
		toCursor: func(t *Taf) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.IssueTime,
			}
		},
	}
	// TafOrderFieldValidFromTime orders Taf by valid_from_time.
	TafOrderFieldValidFromTime = &TafOrderField{
		Value: func(t *Taf) (ent.Value, error) {
			return t.ValidFromTime, nil
		},
		column: taf.FieldValidFromTime,
		toTerm: taf.ByValidFromTime,
		toCursor: func(t *Taf) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.ValidFromTime,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TafOrderField) String() string {
	var str string
	switch f.column {
	case TafOrderFieldIssueTime.column:
		str = "ISSUE_TIME"
	case TafOrderFieldValidFromTime.column:
		str = "valid_from_time"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TafOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TafOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TafOrderField %T must be a string", v)
	}
	switch str {
	case "ISSUE_TIME":
		*f = *TafOrderFieldIssueTime
	case "valid_from_time":
		*f = *TafOrderFieldValidFromTime
	default:
		return fmt.Errorf("%s is not a valid TafOrderField", str)
	}
	return nil
}

// TafOrderField defines the ordering field of Taf.
type TafOrderField struct {
	// Value extracts the ordering value from the given Taf.
	Value    func(*Taf) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) taf.OrderOption
	toCursor func(*Taf) Cursor
}

// TafOrder defines the ordering of Taf.
type TafOrder struct {
	Direction OrderDirection `json:"direction"`
	Field     *TafOrderField `json:"field"`
}

// DefaultTafOrder is the default ordering of Taf.
var DefaultTafOrder = &TafOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &TafOrderField{
		Value: func(t *Taf) (ent.Value, error) {
			return t.ID, nil
		},
		column: taf.FieldID,
		toTerm: taf.ByID,
		toCursor: func(t *Taf) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Taf into TafEdge.
func (t *Taf) ToEdge(order *TafOrder) *TafEdge {
	if order == nil {
		order = DefaultTafOrder
	}
	return &TafEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}

// TemperatureDataEdge is the edge representation of TemperatureData.
type TemperatureDataEdge struct {
	Node   *TemperatureData `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// TemperatureDataConnection is the connection containing edges to TemperatureData.
type TemperatureDataConnection struct {
	Edges      []*TemperatureDataEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *TemperatureDataConnection) build(nodes []*TemperatureData, pager *temperaturedataPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *TemperatureData
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TemperatureData {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TemperatureData {
			return nodes[i]
		}
	}
	c.Edges = make([]*TemperatureDataEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TemperatureDataEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TemperatureDataPaginateOption enables pagination customization.
type TemperatureDataPaginateOption func(*temperaturedataPager) error

// WithTemperatureDataOrder configures pagination ordering.
func WithTemperatureDataOrder(order *TemperatureDataOrder) TemperatureDataPaginateOption {
	if order == nil {
		order = DefaultTemperatureDataOrder
	}
	o := *order
	return func(pager *temperaturedataPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTemperatureDataOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTemperatureDataFilter configures pagination filter.
func WithTemperatureDataFilter(filter func(*TemperatureDataQuery) (*TemperatureDataQuery, error)) TemperatureDataPaginateOption {
	return func(pager *temperaturedataPager) error {
		if filter == nil {
			return errors.New("TemperatureDataQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type temperaturedataPager struct {
	reverse bool
	order   *TemperatureDataOrder
	filter  func(*TemperatureDataQuery) (*TemperatureDataQuery, error)
}

func newTemperatureDataPager(opts []TemperatureDataPaginateOption, reverse bool) (*temperaturedataPager, error) {
	pager := &temperaturedataPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTemperatureDataOrder
	}
	return pager, nil
}

func (p *temperaturedataPager) applyFilter(query *TemperatureDataQuery) (*TemperatureDataQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *temperaturedataPager) toCursor(td *TemperatureData) Cursor {
	return p.order.Field.toCursor(td)
}

func (p *temperaturedataPager) applyCursors(query *TemperatureDataQuery, after, before *Cursor) (*TemperatureDataQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultTemperatureDataOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *temperaturedataPager) applyOrder(query *TemperatureDataQuery) *TemperatureDataQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultTemperatureDataOrder.Field {
		query = query.Order(DefaultTemperatureDataOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *temperaturedataPager) orderExpr(query *TemperatureDataQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTemperatureDataOrder.Field {
			b.Comma().Ident(DefaultTemperatureDataOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to TemperatureData.
func (td *TemperatureDataQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TemperatureDataPaginateOption,
) (*TemperatureDataConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTemperatureDataPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if td, err = pager.applyFilter(td); err != nil {
		return nil, err
	}
	conn := &TemperatureDataConnection{Edges: []*TemperatureDataEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = td.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if td, err = pager.applyCursors(td, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		td.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := td.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	td = pager.applyOrder(td)
	nodes, err := td.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// TemperatureDataOrderField defines the ordering field of TemperatureData.
type TemperatureDataOrderField struct {
	// Value extracts the ordering value from the given TemperatureData.
	Value    func(*TemperatureData) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) temperaturedata.OrderOption
	toCursor func(*TemperatureData) Cursor
}

// TemperatureDataOrder defines the ordering of TemperatureData.
type TemperatureDataOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *TemperatureDataOrderField `json:"field"`
}

// DefaultTemperatureDataOrder is the default ordering of TemperatureData.
var DefaultTemperatureDataOrder = &TemperatureDataOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &TemperatureDataOrderField{
		Value: func(td *TemperatureData) (ent.Value, error) {
			return td.ID, nil
		},
		column: temperaturedata.FieldID,
		toTerm: temperaturedata.ByID,
		toCursor: func(td *TemperatureData) Cursor {
			return Cursor{ID: td.ID}
		},
	},
}

// ToEdge converts TemperatureData into TemperatureDataEdge.
func (td *TemperatureData) ToEdge(order *TemperatureDataOrder) *TemperatureDataEdge {
	if order == nil {
		order = DefaultTemperatureDataOrder
	}
	return &TemperatureDataEdge{
		Node:   td,
		Cursor: order.Field.toCursor(td),
	}
}

// TurbulenceConditionEdge is the edge representation of TurbulenceCondition.
type TurbulenceConditionEdge struct {
	Node   *TurbulenceCondition `json:"node"`
	Cursor Cursor               `json:"cursor"`
}

// TurbulenceConditionConnection is the connection containing edges to TurbulenceCondition.
type TurbulenceConditionConnection struct {
	Edges      []*TurbulenceConditionEdge `json:"edges"`
	PageInfo   PageInfo                   `json:"pageInfo"`
	TotalCount int                        `json:"totalCount"`
}

func (c *TurbulenceConditionConnection) build(nodes []*TurbulenceCondition, pager *turbulenceconditionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *TurbulenceCondition
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TurbulenceCondition {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TurbulenceCondition {
			return nodes[i]
		}
	}
	c.Edges = make([]*TurbulenceConditionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TurbulenceConditionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TurbulenceConditionPaginateOption enables pagination customization.
type TurbulenceConditionPaginateOption func(*turbulenceconditionPager) error

// WithTurbulenceConditionOrder configures pagination ordering.
func WithTurbulenceConditionOrder(order *TurbulenceConditionOrder) TurbulenceConditionPaginateOption {
	if order == nil {
		order = DefaultTurbulenceConditionOrder
	}
	o := *order
	return func(pager *turbulenceconditionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTurbulenceConditionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTurbulenceConditionFilter configures pagination filter.
func WithTurbulenceConditionFilter(filter func(*TurbulenceConditionQuery) (*TurbulenceConditionQuery, error)) TurbulenceConditionPaginateOption {
	return func(pager *turbulenceconditionPager) error {
		if filter == nil {
			return errors.New("TurbulenceConditionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type turbulenceconditionPager struct {
	reverse bool
	order   *TurbulenceConditionOrder
	filter  func(*TurbulenceConditionQuery) (*TurbulenceConditionQuery, error)
}

func newTurbulenceConditionPager(opts []TurbulenceConditionPaginateOption, reverse bool) (*turbulenceconditionPager, error) {
	pager := &turbulenceconditionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTurbulenceConditionOrder
	}
	return pager, nil
}

func (p *turbulenceconditionPager) applyFilter(query *TurbulenceConditionQuery) (*TurbulenceConditionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *turbulenceconditionPager) toCursor(tc *TurbulenceCondition) Cursor {
	return p.order.Field.toCursor(tc)
}

func (p *turbulenceconditionPager) applyCursors(query *TurbulenceConditionQuery, after, before *Cursor) (*TurbulenceConditionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultTurbulenceConditionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *turbulenceconditionPager) applyOrder(query *TurbulenceConditionQuery) *TurbulenceConditionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultTurbulenceConditionOrder.Field {
		query = query.Order(DefaultTurbulenceConditionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *turbulenceconditionPager) orderExpr(query *TurbulenceConditionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTurbulenceConditionOrder.Field {
			b.Comma().Ident(DefaultTurbulenceConditionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to TurbulenceCondition.
func (tc *TurbulenceConditionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TurbulenceConditionPaginateOption,
) (*TurbulenceConditionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTurbulenceConditionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if tc, err = pager.applyFilter(tc); err != nil {
		return nil, err
	}
	conn := &TurbulenceConditionConnection{Edges: []*TurbulenceConditionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = tc.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if tc, err = pager.applyCursors(tc, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		tc.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := tc.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	tc = pager.applyOrder(tc)
	nodes, err := tc.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// TurbulenceConditionOrderField defines the ordering field of TurbulenceCondition.
type TurbulenceConditionOrderField struct {
	// Value extracts the ordering value from the given TurbulenceCondition.
	Value    func(*TurbulenceCondition) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) turbulencecondition.OrderOption
	toCursor func(*TurbulenceCondition) Cursor
}

// TurbulenceConditionOrder defines the ordering of TurbulenceCondition.
type TurbulenceConditionOrder struct {
	Direction OrderDirection                 `json:"direction"`
	Field     *TurbulenceConditionOrderField `json:"field"`
}

// DefaultTurbulenceConditionOrder is the default ordering of TurbulenceCondition.
var DefaultTurbulenceConditionOrder = &TurbulenceConditionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &TurbulenceConditionOrderField{
		Value: func(tc *TurbulenceCondition) (ent.Value, error) {
			return tc.ID, nil
		},
		column: turbulencecondition.FieldID,
		toTerm: turbulencecondition.ByID,
		toCursor: func(tc *TurbulenceCondition) Cursor {
			return Cursor{ID: tc.ID}
		},
	},
}

// ToEdge converts TurbulenceCondition into TurbulenceConditionEdge.
func (tc *TurbulenceCondition) ToEdge(order *TurbulenceConditionOrder) *TurbulenceConditionEdge {
	if order == nil {
		order = DefaultTurbulenceConditionOrder
	}
	return &TurbulenceConditionEdge{
		Node:   tc,
		Cursor: order.Field.toCursor(tc),
	}
}

// WeatherStationEdge is the edge representation of WeatherStation.
type WeatherStationEdge struct {
	Node   *WeatherStation `json:"node"`
	Cursor Cursor          `json:"cursor"`
}

// WeatherStationConnection is the connection containing edges to WeatherStation.
type WeatherStationConnection struct {
	Edges      []*WeatherStationEdge `json:"edges"`
	PageInfo   PageInfo              `json:"pageInfo"`
	TotalCount int                   `json:"totalCount"`
}

func (c *WeatherStationConnection) build(nodes []*WeatherStation, pager *weatherstationPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *WeatherStation
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *WeatherStation {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *WeatherStation {
			return nodes[i]
		}
	}
	c.Edges = make([]*WeatherStationEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &WeatherStationEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// WeatherStationPaginateOption enables pagination customization.
type WeatherStationPaginateOption func(*weatherstationPager) error

// WithWeatherStationOrder configures pagination ordering.
func WithWeatherStationOrder(order *WeatherStationOrder) WeatherStationPaginateOption {
	if order == nil {
		order = DefaultWeatherStationOrder
	}
	o := *order
	return func(pager *weatherstationPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultWeatherStationOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithWeatherStationFilter configures pagination filter.
func WithWeatherStationFilter(filter func(*WeatherStationQuery) (*WeatherStationQuery, error)) WeatherStationPaginateOption {
	return func(pager *weatherstationPager) error {
		if filter == nil {
			return errors.New("WeatherStationQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type weatherstationPager struct {
	reverse bool
	order   *WeatherStationOrder
	filter  func(*WeatherStationQuery) (*WeatherStationQuery, error)
}

func newWeatherStationPager(opts []WeatherStationPaginateOption, reverse bool) (*weatherstationPager, error) {
	pager := &weatherstationPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultWeatherStationOrder
	}
	return pager, nil
}

func (p *weatherstationPager) applyFilter(query *WeatherStationQuery) (*WeatherStationQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *weatherstationPager) toCursor(ws *WeatherStation) Cursor {
	return p.order.Field.toCursor(ws)
}

func (p *weatherstationPager) applyCursors(query *WeatherStationQuery, after, before *Cursor) (*WeatherStationQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultWeatherStationOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *weatherstationPager) applyOrder(query *WeatherStationQuery) *WeatherStationQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultWeatherStationOrder.Field {
		query = query.Order(DefaultWeatherStationOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *weatherstationPager) orderExpr(query *WeatherStationQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultWeatherStationOrder.Field {
			b.Comma().Ident(DefaultWeatherStationOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to WeatherStation.
func (ws *WeatherStationQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...WeatherStationPaginateOption,
) (*WeatherStationConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newWeatherStationPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ws, err = pager.applyFilter(ws); err != nil {
		return nil, err
	}
	conn := &WeatherStationConnection{Edges: []*WeatherStationEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ws.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ws, err = pager.applyCursors(ws, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		ws.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ws.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ws = pager.applyOrder(ws)
	nodes, err := ws.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// WeatherStationOrderField defines the ordering field of WeatherStation.
type WeatherStationOrderField struct {
	// Value extracts the ordering value from the given WeatherStation.
	Value    func(*WeatherStation) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) weatherstation.OrderOption
	toCursor func(*WeatherStation) Cursor
}

// WeatherStationOrder defines the ordering of WeatherStation.
type WeatherStationOrder struct {
	Direction OrderDirection            `json:"direction"`
	Field     *WeatherStationOrderField `json:"field"`
}

// DefaultWeatherStationOrder is the default ordering of WeatherStation.
var DefaultWeatherStationOrder = &WeatherStationOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &WeatherStationOrderField{
		Value: func(ws *WeatherStation) (ent.Value, error) {
			return ws.ID, nil
		},
		column: weatherstation.FieldID,
		toTerm: weatherstation.ByID,
		toCursor: func(ws *WeatherStation) Cursor {
			return Cursor{ID: ws.ID}
		},
	},
}

// ToEdge converts WeatherStation into WeatherStationEdge.
func (ws *WeatherStation) ToEdge(order *WeatherStationOrder) *WeatherStationEdge {
	if order == nil {
		order = DefaultWeatherStationOrder
	}
	return &WeatherStationEdge{
		Node:   ws,
		Cursor: order.Field.toCursor(ws),
	}
}
