// Code generated by ent, DO NOT EDIT.

package weatherstation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the weatherstation type in the database.
	Label = "weather_station"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStationID holds the string denoting the station_id field in the database.
	FieldStationID = "station_id"
	// FieldLatitude holds the string denoting the latitude field in the database.
	FieldLatitude = "latitude"
	// FieldLongitude holds the string denoting the longitude field in the database.
	FieldLongitude = "longitude"
	// FieldElevation holds the string denoting the elevation field in the database.
	FieldElevation = "elevation"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// EdgeAirport holds the string denoting the airport edge name in mutations.
	EdgeAirport = "airport"
	// EdgeMetars holds the string denoting the metars edge name in mutations.
	EdgeMetars = "metars"
	// EdgeTafs holds the string denoting the tafs edge name in mutations.
	EdgeTafs = "tafs"
	// Table holds the table name of the weatherstation in the database.
	Table = "weather_stations"
	// AirportTable is the table that holds the airport relation/edge.
	AirportTable = "weather_stations"
	// AirportInverseTable is the table name for the Airport entity.
	// It exists in this package in order to avoid circular dependency with the "airport" package.
	AirportInverseTable = "airports"
	// AirportColumn is the table column denoting the airport relation/edge.
	AirportColumn = "airport_station"
	// MetarsTable is the table that holds the metars relation/edge.
	MetarsTable = "metars"
	// MetarsInverseTable is the table name for the Metar entity.
	// It exists in this package in order to avoid circular dependency with the "metar" package.
	MetarsInverseTable = "metars"
	// MetarsColumn is the table column denoting the metars relation/edge.
	MetarsColumn = "weather_station_metars"
	// TafsTable is the table that holds the tafs relation/edge.
	TafsTable = "tafs"
	// TafsInverseTable is the table name for the Taf entity.
	// It exists in this package in order to avoid circular dependency with the "taf" package.
	TafsInverseTable = "tafs"
	// TafsColumn is the table column denoting the tafs relation/edge.
	TafsColumn = "weather_station_tafs"
)

// Columns holds all SQL columns for weatherstation fields.
var Columns = []string{
	FieldID,
	FieldStationID,
	FieldLatitude,
	FieldLongitude,
	FieldElevation,
	FieldHash,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "weather_stations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"airport_station",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the WeatherStation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStationID orders the results by the station_id field.
func ByStationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStationID, opts...).ToFunc()
}

// ByLatitude orders the results by the latitude field.
func ByLatitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLatitude, opts...).ToFunc()
}

// ByLongitude orders the results by the longitude field.
func ByLongitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLongitude, opts...).ToFunc()
}

// ByElevation orders the results by the elevation field.
func ByElevation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldElevation, opts...).ToFunc()
}

// ByHash orders the results by the hash field.
func ByHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHash, opts...).ToFunc()
}

// ByAirportField orders the results by airport field.
func ByAirportField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAirportStep(), sql.OrderByField(field, opts...))
	}
}

// ByMetarsCount orders the results by metars count.
func ByMetarsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMetarsStep(), opts...)
	}
}

// ByMetars orders the results by metars terms.
func ByMetars(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMetarsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTafsCount orders the results by tafs count.
func ByTafsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTafsStep(), opts...)
	}
}

// ByTafs orders the results by tafs terms.
func ByTafs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTafsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAirportStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AirportInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, AirportTable, AirportColumn),
	)
}
func newMetarsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MetarsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MetarsTable, MetarsColumn),
	)
}
func newTafsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TafsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TafsTable, TafsColumn),
	)
}
