// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"metar.gg/ent/taf"
	"metar.gg/ent/weatherstation"
)

// Taf is the model entity for the Taf schema.
type Taf struct {
	config `json:"-"`
	// ID of the ent.
	// The unique identifier of the record.
	ID uuid.UUID `json:"id,omitempty"`
	// The raw TAF text.
	RawText string `json:"raw_text,omitempty"`
	// The time the TAF was issued.
	IssueTime time.Time `json:"issue_time,omitempty"`
	// The time the TAF was imported.
	ImportTime time.Time `json:"import_time,omitempty"`
	// TAF bulletin time.
	BulletinTime time.Time `json:"bulletin_time,omitempty"`
	// The start time of the TAF validity period.
	ValidFromTime time.Time `json:"valid_from_time,omitempty"`
	// The end time of the TAF validity period.
	ValidToTime time.Time `json:"valid_to_time,omitempty"`
	// Remarks.
	Remarks string `json:"remarks,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TafQuery when eager-loading is set.
	Edges                TafEdges `json:"edges"`
	weather_station_tafs *uuid.UUID
}

// TafEdges holds the relations/edges for other nodes in the graph.
type TafEdges struct {
	// The station that issued this taf.
	Station *WeatherStation `json:"station,omitempty"`
	// The forecasts
	Forecast []*Forecast `json:"forecast,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedForecast map[string][]*Forecast
}

// StationOrErr returns the Station value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TafEdges) StationOrErr() (*WeatherStation, error) {
	if e.loadedTypes[0] {
		if e.Station == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: weatherstation.Label}
		}
		return e.Station, nil
	}
	return nil, &NotLoadedError{edge: "station"}
}

// ForecastOrErr returns the Forecast value or an error if the edge
// was not loaded in eager-loading.
func (e TafEdges) ForecastOrErr() ([]*Forecast, error) {
	if e.loadedTypes[1] {
		return e.Forecast, nil
	}
	return nil, &NotLoadedError{edge: "forecast"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Taf) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case taf.FieldRawText, taf.FieldRemarks, taf.FieldHash:
			values[i] = new(sql.NullString)
		case taf.FieldIssueTime, taf.FieldImportTime, taf.FieldBulletinTime, taf.FieldValidFromTime, taf.FieldValidToTime:
			values[i] = new(sql.NullTime)
		case taf.FieldID:
			values[i] = new(uuid.UUID)
		case taf.ForeignKeys[0]: // weather_station_tafs
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Taf", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Taf fields.
func (t *Taf) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case taf.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case taf.FieldRawText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field raw_text", values[i])
			} else if value.Valid {
				t.RawText = value.String
			}
		case taf.FieldIssueTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field issue_time", values[i])
			} else if value.Valid {
				t.IssueTime = value.Time
			}
		case taf.FieldImportTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field import_time", values[i])
			} else if value.Valid {
				t.ImportTime = value.Time
			}
		case taf.FieldBulletinTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field bulletin_time", values[i])
			} else if value.Valid {
				t.BulletinTime = value.Time
			}
		case taf.FieldValidFromTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field valid_from_time", values[i])
			} else if value.Valid {
				t.ValidFromTime = value.Time
			}
		case taf.FieldValidToTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field valid_to_time", values[i])
			} else if value.Valid {
				t.ValidToTime = value.Time
			}
		case taf.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				t.Remarks = value.String
			}
		case taf.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				t.Hash = value.String
			}
		case taf.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field weather_station_tafs", values[i])
			} else if value.Valid {
				t.weather_station_tafs = new(uuid.UUID)
				*t.weather_station_tafs = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryStation queries the "station" edge of the Taf entity.
func (t *Taf) QueryStation() *WeatherStationQuery {
	return NewTafClient(t.config).QueryStation(t)
}

// QueryForecast queries the "forecast" edge of the Taf entity.
func (t *Taf) QueryForecast() *ForecastQuery {
	return NewTafClient(t.config).QueryForecast(t)
}

// Update returns a builder for updating this Taf.
// Note that you need to call Taf.Unwrap() before calling this method if this Taf
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Taf) Update() *TafUpdateOne {
	return NewTafClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Taf entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Taf) Unwrap() *Taf {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Taf is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Taf) String() string {
	var builder strings.Builder
	builder.WriteString("Taf(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("raw_text=")
	builder.WriteString(t.RawText)
	builder.WriteString(", ")
	builder.WriteString("issue_time=")
	builder.WriteString(t.IssueTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("import_time=")
	builder.WriteString(t.ImportTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("bulletin_time=")
	builder.WriteString(t.BulletinTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("valid_from_time=")
	builder.WriteString(t.ValidFromTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("valid_to_time=")
	builder.WriteString(t.ValidToTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(t.Remarks)
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(t.Hash)
	builder.WriteByte(')')
	return builder.String()
}

// NamedForecast returns the Forecast named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Taf) NamedForecast(name string) ([]*Forecast, error) {
	if t.Edges.namedForecast == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedForecast[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Taf) appendNamedForecast(name string, edges ...*Forecast) {
	if t.Edges.namedForecast == nil {
		t.Edges.namedForecast = make(map[string][]*Forecast)
	}
	if len(edges) == 0 {
		t.Edges.namedForecast[name] = []*Forecast{}
	} else {
		t.Edges.namedForecast[name] = append(t.Edges.namedForecast[name], edges...)
	}
}

// Tafs is a parsable slice of Taf.
type Tafs []*Taf
