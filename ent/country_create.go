// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"metar.gg/ent/airport"
	"metar.gg/ent/country"
)

// CountryCreate is the builder for creating a Country entity.
type CountryCreate struct {
	config
	mutation *CountryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetImportID sets the "import_id" field.
func (cc *CountryCreate) SetImportID(i int) *CountryCreate {
	cc.mutation.SetImportID(i)
	return cc
}

// SetHash sets the "hash" field.
func (cc *CountryCreate) SetHash(s string) *CountryCreate {
	cc.mutation.SetHash(s)
	return cc
}

// SetImportFlag sets the "import_flag" field.
func (cc *CountryCreate) SetImportFlag(b bool) *CountryCreate {
	cc.mutation.SetImportFlag(b)
	return cc
}

// SetNillableImportFlag sets the "import_flag" field if the given value is not nil.
func (cc *CountryCreate) SetNillableImportFlag(b *bool) *CountryCreate {
	if b != nil {
		cc.SetImportFlag(*b)
	}
	return cc
}

// SetLastUpdated sets the "last_updated" field.
func (cc *CountryCreate) SetLastUpdated(t time.Time) *CountryCreate {
	cc.mutation.SetLastUpdated(t)
	return cc
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (cc *CountryCreate) SetNillableLastUpdated(t *time.Time) *CountryCreate {
	if t != nil {
		cc.SetLastUpdated(*t)
	}
	return cc
}

// SetCode sets the "code" field.
func (cc *CountryCreate) SetCode(s string) *CountryCreate {
	cc.mutation.SetCode(s)
	return cc
}

// SetName sets the "name" field.
func (cc *CountryCreate) SetName(s string) *CountryCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetContinent sets the "continent" field.
func (cc *CountryCreate) SetContinent(c country.Continent) *CountryCreate {
	cc.mutation.SetContinent(c)
	return cc
}

// SetWikipediaLink sets the "wikipedia_link" field.
func (cc *CountryCreate) SetWikipediaLink(s string) *CountryCreate {
	cc.mutation.SetWikipediaLink(s)
	return cc
}

// SetKeywords sets the "keywords" field.
func (cc *CountryCreate) SetKeywords(s []string) *CountryCreate {
	cc.mutation.SetKeywords(s)
	return cc
}

// SetID sets the "id" field.
func (cc *CountryCreate) SetID(u uuid.UUID) *CountryCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CountryCreate) SetNillableID(u *uuid.UUID) *CountryCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// AddAirportIDs adds the "airports" edge to the Airport entity by IDs.
func (cc *CountryCreate) AddAirportIDs(ids ...uuid.UUID) *CountryCreate {
	cc.mutation.AddAirportIDs(ids...)
	return cc
}

// AddAirports adds the "airports" edges to the Airport entity.
func (cc *CountryCreate) AddAirports(a ...*Airport) *CountryCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cc.AddAirportIDs(ids...)
}

// Mutation returns the CountryMutation object of the builder.
func (cc *CountryCreate) Mutation() *CountryMutation {
	return cc.mutation
}

// Save creates the Country in the database.
func (cc *CountryCreate) Save(ctx context.Context) (*Country, error) {
	var (
		err  error
		node *Country
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CountryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Country)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CountryMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CountryCreate) SaveX(ctx context.Context) *Country {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CountryCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CountryCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CountryCreate) defaults() {
	if _, ok := cc.mutation.ImportFlag(); !ok {
		v := country.DefaultImportFlag
		cc.mutation.SetImportFlag(v)
	}
	if _, ok := cc.mutation.LastUpdated(); !ok {
		v := country.DefaultLastUpdated()
		cc.mutation.SetLastUpdated(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := country.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CountryCreate) check() error {
	if _, ok := cc.mutation.ImportID(); !ok {
		return &ValidationError{Name: "import_id", err: errors.New(`ent: missing required field "Country.import_id"`)}
	}
	if _, ok := cc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "Country.hash"`)}
	}
	if _, ok := cc.mutation.ImportFlag(); !ok {
		return &ValidationError{Name: "import_flag", err: errors.New(`ent: missing required field "Country.import_flag"`)}
	}
	if _, ok := cc.mutation.LastUpdated(); !ok {
		return &ValidationError{Name: "last_updated", err: errors.New(`ent: missing required field "Country.last_updated"`)}
	}
	if _, ok := cc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Country.code"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Country.name"`)}
	}
	if _, ok := cc.mutation.Continent(); !ok {
		return &ValidationError{Name: "continent", err: errors.New(`ent: missing required field "Country.continent"`)}
	}
	if v, ok := cc.mutation.Continent(); ok {
		if err := country.ContinentValidator(v); err != nil {
			return &ValidationError{Name: "continent", err: fmt.Errorf(`ent: validator failed for field "Country.continent": %w`, err)}
		}
	}
	if _, ok := cc.mutation.WikipediaLink(); !ok {
		return &ValidationError{Name: "wikipedia_link", err: errors.New(`ent: missing required field "Country.wikipedia_link"`)}
	}
	if _, ok := cc.mutation.Keywords(); !ok {
		return &ValidationError{Name: "keywords", err: errors.New(`ent: missing required field "Country.keywords"`)}
	}
	return nil
}

func (cc *CountryCreate) sqlSave(ctx context.Context) (*Country, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (cc *CountryCreate) createSpec() (*Country, *sqlgraph.CreateSpec) {
	var (
		_node = &Country{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: country.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: country.FieldID,
			},
		}
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.ImportID(); ok {
		_spec.SetField(country.FieldImportID, field.TypeInt, value)
		_node.ImportID = value
	}
	if value, ok := cc.mutation.Hash(); ok {
		_spec.SetField(country.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := cc.mutation.ImportFlag(); ok {
		_spec.SetField(country.FieldImportFlag, field.TypeBool, value)
		_node.ImportFlag = value
	}
	if value, ok := cc.mutation.LastUpdated(); ok {
		_spec.SetField(country.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if value, ok := cc.mutation.Code(); ok {
		_spec.SetField(country.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(country.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Continent(); ok {
		_spec.SetField(country.FieldContinent, field.TypeEnum, value)
		_node.Continent = value
	}
	if value, ok := cc.mutation.WikipediaLink(); ok {
		_spec.SetField(country.FieldWikipediaLink, field.TypeString, value)
		_node.WikipediaLink = value
	}
	if value, ok := cc.mutation.Keywords(); ok {
		_spec.SetField(country.FieldKeywords, field.TypeJSON, value)
		_node.Keywords = value
	}
	if nodes := cc.mutation.AirportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.AirportsTable,
			Columns: []string{country.AirportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Country.Create().
//		SetImportID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CountryUpsert) {
//			SetImportID(v+v).
//		}).
//		Exec(ctx)
func (cc *CountryCreate) OnConflict(opts ...sql.ConflictOption) *CountryUpsertOne {
	cc.conflict = opts
	return &CountryUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Country.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CountryCreate) OnConflictColumns(columns ...string) *CountryUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CountryUpsertOne{
		create: cc,
	}
}

type (
	// CountryUpsertOne is the builder for "upsert"-ing
	//  one Country node.
	CountryUpsertOne struct {
		create *CountryCreate
	}

	// CountryUpsert is the "OnConflict" setter.
	CountryUpsert struct {
		*sql.UpdateSet
	}
)

// SetImportID sets the "import_id" field.
func (u *CountryUpsert) SetImportID(v int) *CountryUpsert {
	u.Set(country.FieldImportID, v)
	return u
}

// UpdateImportID sets the "import_id" field to the value that was provided on create.
func (u *CountryUpsert) UpdateImportID() *CountryUpsert {
	u.SetExcluded(country.FieldImportID)
	return u
}

// AddImportID adds v to the "import_id" field.
func (u *CountryUpsert) AddImportID(v int) *CountryUpsert {
	u.Add(country.FieldImportID, v)
	return u
}

// SetHash sets the "hash" field.
func (u *CountryUpsert) SetHash(v string) *CountryUpsert {
	u.Set(country.FieldHash, v)
	return u
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *CountryUpsert) UpdateHash() *CountryUpsert {
	u.SetExcluded(country.FieldHash)
	return u
}

// SetImportFlag sets the "import_flag" field.
func (u *CountryUpsert) SetImportFlag(v bool) *CountryUpsert {
	u.Set(country.FieldImportFlag, v)
	return u
}

// UpdateImportFlag sets the "import_flag" field to the value that was provided on create.
func (u *CountryUpsert) UpdateImportFlag() *CountryUpsert {
	u.SetExcluded(country.FieldImportFlag)
	return u
}

// SetLastUpdated sets the "last_updated" field.
func (u *CountryUpsert) SetLastUpdated(v time.Time) *CountryUpsert {
	u.Set(country.FieldLastUpdated, v)
	return u
}

// UpdateLastUpdated sets the "last_updated" field to the value that was provided on create.
func (u *CountryUpsert) UpdateLastUpdated() *CountryUpsert {
	u.SetExcluded(country.FieldLastUpdated)
	return u
}

// SetName sets the "name" field.
func (u *CountryUpsert) SetName(v string) *CountryUpsert {
	u.Set(country.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CountryUpsert) UpdateName() *CountryUpsert {
	u.SetExcluded(country.FieldName)
	return u
}

// SetContinent sets the "continent" field.
func (u *CountryUpsert) SetContinent(v country.Continent) *CountryUpsert {
	u.Set(country.FieldContinent, v)
	return u
}

// UpdateContinent sets the "continent" field to the value that was provided on create.
func (u *CountryUpsert) UpdateContinent() *CountryUpsert {
	u.SetExcluded(country.FieldContinent)
	return u
}

// SetWikipediaLink sets the "wikipedia_link" field.
func (u *CountryUpsert) SetWikipediaLink(v string) *CountryUpsert {
	u.Set(country.FieldWikipediaLink, v)
	return u
}

// UpdateWikipediaLink sets the "wikipedia_link" field to the value that was provided on create.
func (u *CountryUpsert) UpdateWikipediaLink() *CountryUpsert {
	u.SetExcluded(country.FieldWikipediaLink)
	return u
}

// SetKeywords sets the "keywords" field.
func (u *CountryUpsert) SetKeywords(v []string) *CountryUpsert {
	u.Set(country.FieldKeywords, v)
	return u
}

// UpdateKeywords sets the "keywords" field to the value that was provided on create.
func (u *CountryUpsert) UpdateKeywords() *CountryUpsert {
	u.SetExcluded(country.FieldKeywords)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Country.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(country.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CountryUpsertOne) UpdateNewValues() *CountryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(country.FieldID)
		}
		if _, exists := u.create.mutation.Code(); exists {
			s.SetIgnore(country.FieldCode)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Country.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CountryUpsertOne) Ignore() *CountryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CountryUpsertOne) DoNothing() *CountryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CountryCreate.OnConflict
// documentation for more info.
func (u *CountryUpsertOne) Update(set func(*CountryUpsert)) *CountryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CountryUpsert{UpdateSet: update})
	}))
	return u
}

// SetImportID sets the "import_id" field.
func (u *CountryUpsertOne) SetImportID(v int) *CountryUpsertOne {
	return u.Update(func(s *CountryUpsert) {
		s.SetImportID(v)
	})
}

// AddImportID adds v to the "import_id" field.
func (u *CountryUpsertOne) AddImportID(v int) *CountryUpsertOne {
	return u.Update(func(s *CountryUpsert) {
		s.AddImportID(v)
	})
}

// UpdateImportID sets the "import_id" field to the value that was provided on create.
func (u *CountryUpsertOne) UpdateImportID() *CountryUpsertOne {
	return u.Update(func(s *CountryUpsert) {
		s.UpdateImportID()
	})
}

// SetHash sets the "hash" field.
func (u *CountryUpsertOne) SetHash(v string) *CountryUpsertOne {
	return u.Update(func(s *CountryUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *CountryUpsertOne) UpdateHash() *CountryUpsertOne {
	return u.Update(func(s *CountryUpsert) {
		s.UpdateHash()
	})
}

// SetImportFlag sets the "import_flag" field.
func (u *CountryUpsertOne) SetImportFlag(v bool) *CountryUpsertOne {
	return u.Update(func(s *CountryUpsert) {
		s.SetImportFlag(v)
	})
}

// UpdateImportFlag sets the "import_flag" field to the value that was provided on create.
func (u *CountryUpsertOne) UpdateImportFlag() *CountryUpsertOne {
	return u.Update(func(s *CountryUpsert) {
		s.UpdateImportFlag()
	})
}

// SetLastUpdated sets the "last_updated" field.
func (u *CountryUpsertOne) SetLastUpdated(v time.Time) *CountryUpsertOne {
	return u.Update(func(s *CountryUpsert) {
		s.SetLastUpdated(v)
	})
}

// UpdateLastUpdated sets the "last_updated" field to the value that was provided on create.
func (u *CountryUpsertOne) UpdateLastUpdated() *CountryUpsertOne {
	return u.Update(func(s *CountryUpsert) {
		s.UpdateLastUpdated()
	})
}

// SetName sets the "name" field.
func (u *CountryUpsertOne) SetName(v string) *CountryUpsertOne {
	return u.Update(func(s *CountryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CountryUpsertOne) UpdateName() *CountryUpsertOne {
	return u.Update(func(s *CountryUpsert) {
		s.UpdateName()
	})
}

// SetContinent sets the "continent" field.
func (u *CountryUpsertOne) SetContinent(v country.Continent) *CountryUpsertOne {
	return u.Update(func(s *CountryUpsert) {
		s.SetContinent(v)
	})
}

// UpdateContinent sets the "continent" field to the value that was provided on create.
func (u *CountryUpsertOne) UpdateContinent() *CountryUpsertOne {
	return u.Update(func(s *CountryUpsert) {
		s.UpdateContinent()
	})
}

// SetWikipediaLink sets the "wikipedia_link" field.
func (u *CountryUpsertOne) SetWikipediaLink(v string) *CountryUpsertOne {
	return u.Update(func(s *CountryUpsert) {
		s.SetWikipediaLink(v)
	})
}

// UpdateWikipediaLink sets the "wikipedia_link" field to the value that was provided on create.
func (u *CountryUpsertOne) UpdateWikipediaLink() *CountryUpsertOne {
	return u.Update(func(s *CountryUpsert) {
		s.UpdateWikipediaLink()
	})
}

// SetKeywords sets the "keywords" field.
func (u *CountryUpsertOne) SetKeywords(v []string) *CountryUpsertOne {
	return u.Update(func(s *CountryUpsert) {
		s.SetKeywords(v)
	})
}

// UpdateKeywords sets the "keywords" field to the value that was provided on create.
func (u *CountryUpsertOne) UpdateKeywords() *CountryUpsertOne {
	return u.Update(func(s *CountryUpsert) {
		s.UpdateKeywords()
	})
}

// Exec executes the query.
func (u *CountryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CountryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CountryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CountryUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CountryUpsertOne.ID is not supported by MySQL driver. Use CountryUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CountryUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CountryCreateBulk is the builder for creating many Country entities in bulk.
type CountryCreateBulk struct {
	config
	builders []*CountryCreate
	conflict []sql.ConflictOption
}

// Save creates the Country entities in the database.
func (ccb *CountryCreateBulk) Save(ctx context.Context) ([]*Country, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Country, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CountryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CountryCreateBulk) SaveX(ctx context.Context) []*Country {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CountryCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CountryCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Country.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CountryUpsert) {
//			SetImportID(v+v).
//		}).
//		Exec(ctx)
func (ccb *CountryCreateBulk) OnConflict(opts ...sql.ConflictOption) *CountryUpsertBulk {
	ccb.conflict = opts
	return &CountryUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Country.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CountryCreateBulk) OnConflictColumns(columns ...string) *CountryUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CountryUpsertBulk{
		create: ccb,
	}
}

// CountryUpsertBulk is the builder for "upsert"-ing
// a bulk of Country nodes.
type CountryUpsertBulk struct {
	create *CountryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Country.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(country.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CountryUpsertBulk) UpdateNewValues() *CountryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(country.FieldID)
			}
			if _, exists := b.mutation.Code(); exists {
				s.SetIgnore(country.FieldCode)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Country.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CountryUpsertBulk) Ignore() *CountryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CountryUpsertBulk) DoNothing() *CountryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CountryCreateBulk.OnConflict
// documentation for more info.
func (u *CountryUpsertBulk) Update(set func(*CountryUpsert)) *CountryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CountryUpsert{UpdateSet: update})
	}))
	return u
}

// SetImportID sets the "import_id" field.
func (u *CountryUpsertBulk) SetImportID(v int) *CountryUpsertBulk {
	return u.Update(func(s *CountryUpsert) {
		s.SetImportID(v)
	})
}

// AddImportID adds v to the "import_id" field.
func (u *CountryUpsertBulk) AddImportID(v int) *CountryUpsertBulk {
	return u.Update(func(s *CountryUpsert) {
		s.AddImportID(v)
	})
}

// UpdateImportID sets the "import_id" field to the value that was provided on create.
func (u *CountryUpsertBulk) UpdateImportID() *CountryUpsertBulk {
	return u.Update(func(s *CountryUpsert) {
		s.UpdateImportID()
	})
}

// SetHash sets the "hash" field.
func (u *CountryUpsertBulk) SetHash(v string) *CountryUpsertBulk {
	return u.Update(func(s *CountryUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *CountryUpsertBulk) UpdateHash() *CountryUpsertBulk {
	return u.Update(func(s *CountryUpsert) {
		s.UpdateHash()
	})
}

// SetImportFlag sets the "import_flag" field.
func (u *CountryUpsertBulk) SetImportFlag(v bool) *CountryUpsertBulk {
	return u.Update(func(s *CountryUpsert) {
		s.SetImportFlag(v)
	})
}

// UpdateImportFlag sets the "import_flag" field to the value that was provided on create.
func (u *CountryUpsertBulk) UpdateImportFlag() *CountryUpsertBulk {
	return u.Update(func(s *CountryUpsert) {
		s.UpdateImportFlag()
	})
}

// SetLastUpdated sets the "last_updated" field.
func (u *CountryUpsertBulk) SetLastUpdated(v time.Time) *CountryUpsertBulk {
	return u.Update(func(s *CountryUpsert) {
		s.SetLastUpdated(v)
	})
}

// UpdateLastUpdated sets the "last_updated" field to the value that was provided on create.
func (u *CountryUpsertBulk) UpdateLastUpdated() *CountryUpsertBulk {
	return u.Update(func(s *CountryUpsert) {
		s.UpdateLastUpdated()
	})
}

// SetName sets the "name" field.
func (u *CountryUpsertBulk) SetName(v string) *CountryUpsertBulk {
	return u.Update(func(s *CountryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CountryUpsertBulk) UpdateName() *CountryUpsertBulk {
	return u.Update(func(s *CountryUpsert) {
		s.UpdateName()
	})
}

// SetContinent sets the "continent" field.
func (u *CountryUpsertBulk) SetContinent(v country.Continent) *CountryUpsertBulk {
	return u.Update(func(s *CountryUpsert) {
		s.SetContinent(v)
	})
}

// UpdateContinent sets the "continent" field to the value that was provided on create.
func (u *CountryUpsertBulk) UpdateContinent() *CountryUpsertBulk {
	return u.Update(func(s *CountryUpsert) {
		s.UpdateContinent()
	})
}

// SetWikipediaLink sets the "wikipedia_link" field.
func (u *CountryUpsertBulk) SetWikipediaLink(v string) *CountryUpsertBulk {
	return u.Update(func(s *CountryUpsert) {
		s.SetWikipediaLink(v)
	})
}

// UpdateWikipediaLink sets the "wikipedia_link" field to the value that was provided on create.
func (u *CountryUpsertBulk) UpdateWikipediaLink() *CountryUpsertBulk {
	return u.Update(func(s *CountryUpsert) {
		s.UpdateWikipediaLink()
	})
}

// SetKeywords sets the "keywords" field.
func (u *CountryUpsertBulk) SetKeywords(v []string) *CountryUpsertBulk {
	return u.Update(func(s *CountryUpsert) {
		s.SetKeywords(v)
	})
}

// UpdateKeywords sets the "keywords" field to the value that was provided on create.
func (u *CountryUpsertBulk) UpdateKeywords() *CountryUpsertBulk {
	return u.Update(func(s *CountryUpsert) {
		s.UpdateKeywords()
	})
}

// Exec executes the query.
func (u *CountryUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CountryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CountryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CountryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
