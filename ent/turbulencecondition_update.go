// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"metar.gg/ent/predicate"
	"metar.gg/ent/turbulencecondition"
)

// TurbulenceConditionUpdate is the builder for updating TurbulenceCondition entities.
type TurbulenceConditionUpdate struct {
	config
	hooks     []Hook
	mutation  *TurbulenceConditionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TurbulenceConditionUpdate builder.
func (tcu *TurbulenceConditionUpdate) Where(ps ...predicate.TurbulenceCondition) *TurbulenceConditionUpdate {
	tcu.mutation.Where(ps...)
	return tcu
}

// SetIntensity sets the "intensity" field.
func (tcu *TurbulenceConditionUpdate) SetIntensity(s string) *TurbulenceConditionUpdate {
	tcu.mutation.SetIntensity(s)
	return tcu
}

// SetMinAltitude sets the "min_altitude" field.
func (tcu *TurbulenceConditionUpdate) SetMinAltitude(i int) *TurbulenceConditionUpdate {
	tcu.mutation.ResetMinAltitude()
	tcu.mutation.SetMinAltitude(i)
	return tcu
}

// AddMinAltitude adds i to the "min_altitude" field.
func (tcu *TurbulenceConditionUpdate) AddMinAltitude(i int) *TurbulenceConditionUpdate {
	tcu.mutation.AddMinAltitude(i)
	return tcu
}

// SetMaxAltitude sets the "max_altitude" field.
func (tcu *TurbulenceConditionUpdate) SetMaxAltitude(i int) *TurbulenceConditionUpdate {
	tcu.mutation.ResetMaxAltitude()
	tcu.mutation.SetMaxAltitude(i)
	return tcu
}

// AddMaxAltitude adds i to the "max_altitude" field.
func (tcu *TurbulenceConditionUpdate) AddMaxAltitude(i int) *TurbulenceConditionUpdate {
	tcu.mutation.AddMaxAltitude(i)
	return tcu
}

// Mutation returns the TurbulenceConditionMutation object of the builder.
func (tcu *TurbulenceConditionUpdate) Mutation() *TurbulenceConditionMutation {
	return tcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcu *TurbulenceConditionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, TurbulenceConditionMutation](ctx, tcu.sqlSave, tcu.mutation, tcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcu *TurbulenceConditionUpdate) SaveX(ctx context.Context) int {
	affected, err := tcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcu *TurbulenceConditionUpdate) Exec(ctx context.Context) error {
	_, err := tcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcu *TurbulenceConditionUpdate) ExecX(ctx context.Context) {
	if err := tcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tcu *TurbulenceConditionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TurbulenceConditionUpdate {
	tcu.modifiers = append(tcu.modifiers, modifiers...)
	return tcu
}

func (tcu *TurbulenceConditionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(turbulencecondition.Table, turbulencecondition.Columns, sqlgraph.NewFieldSpec(turbulencecondition.FieldID, field.TypeUUID))
	if ps := tcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcu.mutation.Intensity(); ok {
		_spec.SetField(turbulencecondition.FieldIntensity, field.TypeString, value)
	}
	if value, ok := tcu.mutation.MinAltitude(); ok {
		_spec.SetField(turbulencecondition.FieldMinAltitude, field.TypeInt, value)
	}
	if value, ok := tcu.mutation.AddedMinAltitude(); ok {
		_spec.AddField(turbulencecondition.FieldMinAltitude, field.TypeInt, value)
	}
	if value, ok := tcu.mutation.MaxAltitude(); ok {
		_spec.SetField(turbulencecondition.FieldMaxAltitude, field.TypeInt, value)
	}
	if value, ok := tcu.mutation.AddedMaxAltitude(); ok {
		_spec.AddField(turbulencecondition.FieldMaxAltitude, field.TypeInt, value)
	}
	_spec.AddModifiers(tcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{turbulencecondition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tcu.mutation.done = true
	return n, nil
}

// TurbulenceConditionUpdateOne is the builder for updating a single TurbulenceCondition entity.
type TurbulenceConditionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TurbulenceConditionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetIntensity sets the "intensity" field.
func (tcuo *TurbulenceConditionUpdateOne) SetIntensity(s string) *TurbulenceConditionUpdateOne {
	tcuo.mutation.SetIntensity(s)
	return tcuo
}

// SetMinAltitude sets the "min_altitude" field.
func (tcuo *TurbulenceConditionUpdateOne) SetMinAltitude(i int) *TurbulenceConditionUpdateOne {
	tcuo.mutation.ResetMinAltitude()
	tcuo.mutation.SetMinAltitude(i)
	return tcuo
}

// AddMinAltitude adds i to the "min_altitude" field.
func (tcuo *TurbulenceConditionUpdateOne) AddMinAltitude(i int) *TurbulenceConditionUpdateOne {
	tcuo.mutation.AddMinAltitude(i)
	return tcuo
}

// SetMaxAltitude sets the "max_altitude" field.
func (tcuo *TurbulenceConditionUpdateOne) SetMaxAltitude(i int) *TurbulenceConditionUpdateOne {
	tcuo.mutation.ResetMaxAltitude()
	tcuo.mutation.SetMaxAltitude(i)
	return tcuo
}

// AddMaxAltitude adds i to the "max_altitude" field.
func (tcuo *TurbulenceConditionUpdateOne) AddMaxAltitude(i int) *TurbulenceConditionUpdateOne {
	tcuo.mutation.AddMaxAltitude(i)
	return tcuo
}

// Mutation returns the TurbulenceConditionMutation object of the builder.
func (tcuo *TurbulenceConditionUpdateOne) Mutation() *TurbulenceConditionMutation {
	return tcuo.mutation
}

// Where appends a list predicates to the TurbulenceConditionUpdate builder.
func (tcuo *TurbulenceConditionUpdateOne) Where(ps ...predicate.TurbulenceCondition) *TurbulenceConditionUpdateOne {
	tcuo.mutation.Where(ps...)
	return tcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcuo *TurbulenceConditionUpdateOne) Select(field string, fields ...string) *TurbulenceConditionUpdateOne {
	tcuo.fields = append([]string{field}, fields...)
	return tcuo
}

// Save executes the query and returns the updated TurbulenceCondition entity.
func (tcuo *TurbulenceConditionUpdateOne) Save(ctx context.Context) (*TurbulenceCondition, error) {
	return withHooks[*TurbulenceCondition, TurbulenceConditionMutation](ctx, tcuo.sqlSave, tcuo.mutation, tcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcuo *TurbulenceConditionUpdateOne) SaveX(ctx context.Context) *TurbulenceCondition {
	node, err := tcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcuo *TurbulenceConditionUpdateOne) Exec(ctx context.Context) error {
	_, err := tcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcuo *TurbulenceConditionUpdateOne) ExecX(ctx context.Context) {
	if err := tcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tcuo *TurbulenceConditionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TurbulenceConditionUpdateOne {
	tcuo.modifiers = append(tcuo.modifiers, modifiers...)
	return tcuo
}

func (tcuo *TurbulenceConditionUpdateOne) sqlSave(ctx context.Context) (_node *TurbulenceCondition, err error) {
	_spec := sqlgraph.NewUpdateSpec(turbulencecondition.Table, turbulencecondition.Columns, sqlgraph.NewFieldSpec(turbulencecondition.FieldID, field.TypeUUID))
	id, ok := tcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TurbulenceCondition.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, turbulencecondition.FieldID)
		for _, f := range fields {
			if !turbulencecondition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != turbulencecondition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcuo.mutation.Intensity(); ok {
		_spec.SetField(turbulencecondition.FieldIntensity, field.TypeString, value)
	}
	if value, ok := tcuo.mutation.MinAltitude(); ok {
		_spec.SetField(turbulencecondition.FieldMinAltitude, field.TypeInt, value)
	}
	if value, ok := tcuo.mutation.AddedMinAltitude(); ok {
		_spec.AddField(turbulencecondition.FieldMinAltitude, field.TypeInt, value)
	}
	if value, ok := tcuo.mutation.MaxAltitude(); ok {
		_spec.SetField(turbulencecondition.FieldMaxAltitude, field.TypeInt, value)
	}
	if value, ok := tcuo.mutation.AddedMaxAltitude(); ok {
		_spec.AddField(turbulencecondition.FieldMaxAltitude, field.TypeInt, value)
	}
	_spec.AddModifiers(tcuo.modifiers...)
	_node = &TurbulenceCondition{config: tcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{turbulencecondition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tcuo.mutation.done = true
	return _node, nil
}
